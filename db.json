{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png.old","path":"images/favicon-32x32-next.png.old","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1586924521900},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1586925069462},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1586925069462},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1586925069462},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1586925069462},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1586925069462},{"_id":"themes/next/_config.yml","hash":"0e5b65840d22675954908c3795eab400b18a23c8","modified":1586932671420},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1586925069466},{"_id":"source/_posts/TreadMarks.md","hash":"ed28b1d32baf50f44b6030aba284c1668fd18425","modified":1586936714004},{"_id":"source/_posts/grpc.md","hash":"dc2ba4e5d3eb3c266059ecc97d196924afbb6aaf","modified":1586924521900},{"_id":"source/_posts/numa.md","hash":"c1562c429bd1c31fc445ae455b2c6df6d45c475b","modified":1586921321896},{"_id":"source/_posts/which-most-important.md","hash":"5528db430f8424ad375c0a950ea6325144570c11","modified":1586921321896},{"_id":"source/about/index.md","hash":"96f5bc323f9c4317ef0bc190e2c0a2fb0391e1ad","modified":1586921321896},{"_id":"source/categories/index.md","hash":"2f9d09207ab355d5c468b6732b65efb8847d97d6","modified":1586921321896},{"_id":"source/tags/index.md","hash":"522024bf32f56ea036e0ccc370b0a05313bca99f","modified":1586921321896},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1586925069462},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1586925069462},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1586925069462},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1586925069462},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1586925069462},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1586925069462},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1586925069462},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1586925069462},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1586925069462},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1586925069462},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1586925069462},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1586925069462},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1586925069462},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1586925069462},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1586925069462},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1586925069462},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1586925069462},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1586925069462},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1586925069462},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1586925069462},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1586925069462},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1586925069462},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1586925069462},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1586925069466},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1586925069466},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1586925069466},{"_id":"themes/next/source/.DS_Store","hash":"806cbd19861a958a52cecb5e5a1ecf4ecc769886","modified":1586925069466},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1586925069486},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1586925069486},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1586925069486},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069470},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1586925069462},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1586925069462},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1586925069462},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"ab737670d272b5a967ca0cb8538168e17d6e8439","modified":1586925069462},{"_id":"themes/next/layout/_macro/post.swig","hash":"3f963030f79a4349f8dbddcea236272f2bce37c4","modified":1586925069462},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1586925069462},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1586925069462},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1586925069462},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1586925069462},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b91d9de24b9f77f267ea81a2cdbe1489a61403b8","modified":1586925069462},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1586925069462},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1586925069462},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1586925069462},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1586925069462},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1586925069462},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1586925069462},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1586925069462},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1586925069462},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1586925069462},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1586925069462},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1586925069462},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1586925069462},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1586925069462},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1586925069462},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1586925069462},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1586925069466},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1586925069466},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1586925069466},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1586925069466},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1586925069466},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1586925069466},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1586925069466},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1586925069466},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1586925069466},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1586925069470},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586925069470},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586925069470},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1586925069470},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1586925069470},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1586925069470},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1586925069470},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1586925069470},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1586925069470},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1586925069470},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1586925069470},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"9c284639834af422449de565fcd188ba3ea7c82a","modified":1586925069470},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"2f8c280c445978977714a2056c8227def6561106","modified":1586925069470},{"_id":"themes/next/source/images/favicon-32x32-next.png.old","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586925069470},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586925069470},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1586925069470},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586925069470},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1586925069470},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1586925069470},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1586925069470},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069462},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069462},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069466},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069466},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069466},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069470},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586925069470},{"_id":"themes/next/source/images/avatar.png","hash":"45692987c75e538c863654f0d66e7353db29c967","modified":1586925069470},{"_id":"themes/next/source/images/wechatpay.png","hash":"9ceb1c02e3d387d7b8784d50a52e5cedb8c16140","modified":1586925069470},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1586925069462},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1586925069462},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1586925069462},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1586925069462},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1586925069462},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1586925069462},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1586925069462},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1586925069462},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1586925069462},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1586925069462},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1586925069462},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1586925069462},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1586925069462},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1586925069462},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1586925069462},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1586925069462},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1586925069462},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1586925069462},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1586925069466},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1586925069466},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1586925069466},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1586925069466},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1586925069470},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1586925069470},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1586925069470},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1586925069470},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1586925069470},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1586925069470},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1586925069470},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1586925069470},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1586925069470},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1586925069470},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1586925069470},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1586925069470},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1586925069470},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1586925069470},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1586925069470},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1586925069474},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1586925069474},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1586925069474},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1586925069474},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1586925069474},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1586925069474},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1586925069478},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1586925069482},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1586925069482},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1586925069482},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1586925069482},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1586925069482},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1586925069482},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1586925069486},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1586925069486},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1586925069482},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1586925069482},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1586925069486},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1586925069486},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1586925069486},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1586925069486},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1586925069486},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1586925069482},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1586925069462},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1586925069462},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1586925069466},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1586925069466},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1586925069470},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1586925069470},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1586925069474},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1586925069474},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1586925069478},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1586925069478},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1586925069486},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1586925069486},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1586925069474},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586925069482},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586925069482},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1586925069486},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1586925069466},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1586925069466},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1586925069470},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1586925069470},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1586925069474},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1586925069474},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586925069478},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586925069482},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1586925069474},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1586925069486},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1586925069482}],"Category":[{"name":"2020","_id":"ck9115hpm0004ppfcayy0bwtp"},{"name":"2018","_id":"ck9115hpr0009ppfchvycnpvv"}],"Data":[],"Page":[{"title":"about","date":"2019-06-30T23:05:53.000Z","layout":"post","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-01 07:05:53\nlayout: post\n---\n","updated":"2020-04-15T03:28:41.896Z","path":"about/index.html","comments":1,"_id":"ck9115hpj0001ppfc7ovgs0vm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-06-30T22:57:47.000Z","comments":0,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-01 06:57:47\ncomments: false\ntype: \"categories\"\n---\n","updated":"2020-04-15T03:28:41.896Z","path":"categories/index.html","layout":"page","_id":"ck9115hpl0003ppfcwc6zxmfh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: tags\n---\n","date":"2020-04-15T03:28:41.896Z","updated":"2020-04-15T03:28:41.896Z","path":"tags/index.html","comments":1,"_id":"ck9115hpp0007ppfc5g1mxi9f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"TreadMarks: 基于工作站网络的共享内存计算","date":"2020-03-31T16:00:00.000Z","_content":"\n> TreadMarks: 基于工作站网络的共享内存计算<!-- more -->  \n\n\n\n\n\n　　　　　　论文: TreadMarks: Shared Memory Computing on Networks of Workstations\n\n　　　　　　　Christiana Amza, Alan L. Cox, Sandhya Dwarkadas, Pete Keleher,    \n　　　　　　　Honghui Lu, Ramakrishnan Ra jamony, Weimin Yu and Willy Zwaenepoel    \n　　　　　　　　　　　　　Department of Computer Science    \n　　　　　　　　　　　　　　　　Rice University    \n\n\n\n# 摘要（Abstract）\n\nTreadMarks通过为应用程序提供共享的内存抽象来支持基于工作站网络上的并行计算。共享内存有助于从顺序程序转换成并行程序，因为大多数数据结构都可无需做更改。 只需要添加同步操作。 我们会讨论TreadMarks中用于提供有效的共享内存技术，并讨论了两个主要应用程序的经验，即混合整数编程和遗传连锁分析。\n\n# 1 介绍（ Introduction）\n\n高速网络和快速提高的微处理器性能使工作站的网络成为越来越有吸引力的并行计算工具。通过仅仅依靠廉价硬件和软件，工作站网络可以以相对较低的成本提供并行处理。可以将工作站网络的多处理器实现成处理器组[17]，这是许多专用于提供计算周期的处理器。或者，它也可以由一组动态变化的机器组成，在这些机器上利用空闲周期执行长时间运行的计算[14]。在后一种情况下，（硬件）成本基本上为零，因为许多组织机构已经拥有广泛的工作站网络。在性能方面，处理器速度，网络带宽和延迟的改进使联网的工作站能够为越来越多的应用程序提供接近或超过超级计算机的性能。我们的立场不是让这种松耦合的多处理器设计使更紧密耦合的设计过时。\n尤其是，更低延迟和更高带宽的这些紧耦合的设计能有效执行对同步和通信要求更加严格的应用程序。但是，我们认为网络技术和处理器性能的进步将极大地扩展可以在工作站网络上有效执行的应用程序的种类。\n\n　　在论文中，我们会讨论使用TreadMarks分布式共享内存（DSM）系统在工作站网络上进行并行计算的经验。DSM允许进程假定全局共享的虚拟内存，即使它们运行的节点并没有在物理上共享内存[13]。图1举例说明了一个DSM系统，该系统由N个联网的工作站组成，每个工作站都有自己的内存，并通过网络连接起来。DSM软件提供了全局共享内存的抽象，每个处理器都可以访问任何数据项，而程序员不必担心数据在哪里或如何获取。相反，在基于工作站网络的“本地”编程模型中，程序员必须确定处理器何时需要进行通信，与谁进行通信以及要发送什么数据。对于具有复杂数据结构和复杂并行化策略的程序，这可能成为艰巨的任务。在DSM系统上，程序员可以专注于算法开发，而不是管理分区的数据集和数据传输。除了易于编程之外，DSM还提供了与（硬件）共享内存多处理器相同的编程环境，从而允许在两种环境之间进行移植。最后，DSM考虑到在网络环境中无缝集成共享内存的多处理器工作站。本文描述的实际系统TreadMarks [7]，在Unix工作站上以用户级别运行。不需要进行内核修改或使用特权，并且使用标准Unix编译器和链接器。实现DSM系统的挑战在于确保共享内存抽象不会导致大量通信。TreadMarks中使用了多种技术来应对这一挑战，包括lazy release consistency(延迟释放一致性)[6]和多写协议[3]。本文首先会描述TreadMarks提供的应用程序编程接口（第2节），接下来，我们会讨论实现方面的挑战。（第3节）以及用于应对这些挑战的技术（第4和第5节）。我们在第6节中会简要的描述TreadMarks的实现，并通过讨论我们在混合整数编程和遗传连锁分析（第7节）这两个大型应用程序中的经验来证明其效率。最后，我们在第8节中讨论相关工作，并在第9节中提供一些结论和指导，以及进一步的工作。\n\n![图１](https://github.com/ikenchina/img1/raw/master/1/treadmarks/arch1.png)\n\n　　　　　　　　　　　　　　　　　图１　分布式共享内存\n\n# 2 共享内存编程（Shared Memory Programming）\n\n## 2.1 应用程序编程接口（Application Programming Interface）\n\nTreadMarks API简洁但功能强大（有关C语言接口，见图2）。它提供了用于进程创建和销毁，同步以及共享内存分配的功能。我们专注于同步原语。 共享内存会引起数据争用。当不同进程以程序员不希望的方式交错对共享变量访问时，就会发生数据竞争。例如，假设一个进程写入共享记录的多个字段，而另一个进程尝试读取这些相同的字段。第二个进程很有可能读取新写入的值，但也有可能在第一个进程写入新值前读取到旧值。通常不希望发生这种情况。 为了避免这种情况，共享内存并行程序包含同步操作。 在这种特殊情况下，将使用锁来允许每个进程对记录的独占访问。\n\nTreadMarks提供了两种同步原语：barrier(屏障)和exclusive locks(排他锁)。进程通过调用 Tmk barrier() 来等待屏障。屏障是全局的：调用进程会被暂停，直到系统中的所有进程到达同一屏障为止。进程调用Tmk lock来获取锁，然后调用Tmk release来释放锁。当另一个进程持有该锁时，任何进程都无法获取该锁。同步原语的这种特定选择跟TreadMarks的设计没有任何关系；以后可能会增加其他原语。 我们通过两个简单的应用程序演示了这些以及其他TreadMarks原语的用法。\n\n\n\n## 2.2 两个简单的示例（Two Simple Illustrations）\n\n图3和图4说明了TreadMarks API在Jacobi迭代和解决旅行商问题（TSP）中的使用。 我们很清楚这些示例代码的过于简单。 但在这里仅用于演示目的。 实际应用将在第7节中讨论。\n\n　　Jacobi是一种求解偏微分方程的方法。我们的示例遍历二维数组。在每次迭代期间，每个矩阵元素都会更新为其最近元素的平均值（上方，下方，左侧和右侧）。Jacobi使用临时数组存储每次迭代期间计算的新值，以避免元素的旧值在其被临近元素使用之前覆盖。在并行版本中，为所有处理器分配的数量大致相等的行。 边界上的行由两个相邻进程共享。\n\n　　图3中的TreadMarks版本使用两个数组：一个网格和一个临时数组。网格的保存在共享内存中，而临时的是每个进程专有的。网格由进程0分配和初始化。Jacobi中的同步是通过屏障实现的。 Tmk barrier(0) 确保在开始计算之前，进程0的初始化对所有进程可见。Tmk barrier(1) 确保所有进程在上一次迭代中完成读取值之前，不会有进程会覆盖网格中的任何值。Tmk barrier(2) 可防止当前迭代计算中的所有网格的值被设置前，没有任何进程可以开始下一次迭代。\n\n　　旅行商问题（TSP）是查找从指定城市开始，经过地图上所有其他城市恰好一次并返回原始城市的最短路径。使用了一种简单的分支定界算法。每次局部旅行一次就扩展一个城市。如果局部旅行的长度加上路径剩余部分的下限大于当前最短旅行路径的话，则不会在进一步进行局部旅行了，因为他不会导致比当前最短路径更短的路径了。\n\n　　该程序维护一个局部旅行的列队，保持最短的局部旅行在列队最前面。它不断往列队中添加可能最优的局部旅行，直到从列队的开头开始找到一个比阈值长的路径为止。然后程序将它从列队中移除，并尝试剩余程序的所有排列。最终，它将比较当前路径和包含此路径的最短路径，且如果有必要的话就更新当前最短路径。列队和当前最短路径是共享的，通过锁来保护对他们的访问。\n\n\n\n```\n/* the maximum number of parallel processes supported by TreadMarks */\n#define TMK_NPROCS\n/* the actual number of parallel processes after Tmk_startup */\nextern unsigned Tmk_nprocs;\n/* the process id, an integer in the range 0 ... Tmk_nprocs - 1 */\nextern unsigned Tmk_proc_id;\n/* the number of lock synchronization objects provided by TreadMarks */\n#define TMK_NLOCKS\n/* the number of barrier synchronization objects provided by TreadMarks */\n#define TMK_NBARRIERS\n/* Initialize TreadMarks and start the remote processes */\nvoid Tmk_startup(argc, argv) int argc; char **argv;\n/* Terminate the calling process. Other processes are unaffected. */\nvoid Tmk_exit(status) int status;\n/* Block the calling process until every other process arrives at the barrier. */\nvoid Tmk_barrier(id) unsigned id;\n/* Block the calling process until it acquires the specified lock. */\nvoid Tmk_lock_acquire(id) unsigned id;\n/* Release the specified lock. */\nvoid Tmk_lock_release(id) unsigned id;\n/* Allocate the specified number of bytes of shared memory */\nchar *Tmk_malloc(size) unsigned size;\n/* Free shared memory allocated by Tmk_malloc. */\nvoid Tmk_free(ptr) char *ptr;\n\n```\n\n　　　　　　　　　　　图 2 TreadMarks C语言接口\n\n\n\n```\n#define M 1024\n#define N 1024\nfloat **grid;\nfloat scratch[M][N];\n\nTmk_startup();\n\nif (Tmk_proc_id == 0)\n{\n    grid = Tmk_malloc(M * N * sizeof(float));\n    initialize grid;\n}\n\nTmk_barrier(0);\nlength = M / Tmk_nprocs;\nbegin = length * Tmk_proc_id;\nend = length * (Tmk_proc_id + 1);\nfor (number of iterations)\n{\n    for (i = begin; i < end; i++)\n        for (j = 0; j < N; j++)\n            scratch[i][j] = (grid[i - 1][j] + grid[i + 1][j] +\n                             grid[i][j - 1] + grid[i][j + 1]) / 4;\n    Tmk_barrier(1);\n    for (i = begin; i < end; i++)\n        for (j = 0; j < N; j++)\n            grid[i][j] = scratch[i][j];\n    Tmk_barrier(2);\n}\n\n```\n\n　　　　　　　　　　　图 3 The TreadMarks Jacobi 程序\n\n\n\n\n\n\n\n# 实现的挑战（Implementation Challenges）\n\n提供内存一致性是DSM系统的核心：DSM软件必须以一种提供全局共享内存的方式在处理器之间移动数据。在李的原始IVY系统中[13]，虚拟内存硬件用于维护内存一致性。每个处理器的本地（物理）存储器形成全局虚拟地址空间的高速缓存（请参见图5）。如果一个页面不在本地处理器的内存中，则会产生缺页错误。DSM软件将该页面的最新副本从其远程位置导入本地内存，然后重新启动该过程。例如，图5显示了处理器1发生缺页错误，然后从处理器3的本地内存中复制需要页面的副本。IVY进一步将读取错误与写入错误区分开。发生读取错误时，页面将所有副本以只读方式进行复制，而发生写入错误时，所有现有副本都将无效，并且写的处理器保留唯一副本。\n\n```\nqueue_type *Queue;\nint *Shortest_length;\nint queue_lock, tour_lock;\nmain()\n{\n    Tmk_startup();\n    queue_lock = 0;\n    tour_lock = 1;\n    if (Tmk_proc_id == 0)\n        Queue = Tmk_malloc(sizeof(queue_type));\n    Shortest_length = Tmk_malloc(sizeof(int));\n    initialize Heap and Shortest_length\n        Tmk_barrier(0);\n    Tmk_lock_acquire(queue_lock);\n    Exit if queue is empty;\n    Keep adding to queue\n        until a long,\n        promising tour appears at the head;\n    Path = Delete the tour from the head;\n    Tmk_lock_release(queue_lock);\n    length = recursively\n    try\n        all cities not on Path,\n            find the shortest tour length\n                Tmk_lock_acquire(tour_lock);\n    if (length < *Shortest_length)\n        *Shortest_length = length;\n    Tmk_lock_release(tour_lock);\n}\n\n```\n\n　　　　　　　　　　　图4 The TreadMarks TSP 程序\n\n\n\n　　尽管很简单，但DSM的IVY实现可能产生大量通信。而在工作站网络上通信的成本很高。发送消息可能涉及到进入操作系统内核陷阱，中断，上下文切换以及可能经过多层网络协议的处理。因此，必须保持较少的消息的数量。 我们使用图3和图4的示例来说明IVY中的一些通信问题。\n\n　　第一个问题与IVY的一致性模型有关，通常称为顺序一致性（sequential consistency） [9]。粗略地说，顺序一致性要求对共享内存的写入对于其他处理器“立即”变为可见。这就是为什么IVY在写入共享内存之前发送无效消息的原因。在许多情况下，顺序一致性提供了过强的保证。 例如，思考下图4中TSP中最佳巡回的更新及其长度。在IVY中，这两个共享内存更新将导致无效信息发送到所有其他的缓存包含这些变量的页面的处理器。 但是，只会在有相应锁保护的临界区内访问这些变量，因此仅将无效发送给获取锁的下一个处理器就足够了，并且仅在获取锁时才发送。\n\n　　第二个问题涉及到潜在的伪共享的问题。当位于同一个页面的两个或两个以上不相关的数据对象由不同的处理器并发写入时，就会导致伪共享，从而导致该页在处理器之间像乒乓球一样来回移动。由于一致性单元很大（虚拟内存页），所以伪共享是一个潜在的严重问题。图6展示了Jacobi中网格数组可能的页面布局。 当两个处理器都更新其网格数组的一部分时，它们正在同时写入同一页面，并导致该页面在处理器间来回移动多次。\n\n\n\n\n\n![图５](https://github.com/ikenchina/img1/raw/master/1/treadmarks/ivh1.png)\n\n　　　　　　　　　　　图５　IVH DSM系统操作\n\n\n# 4 懒惰更新释放一致性（Lazy Release Consistency）\n\n\n\n## 4.1 释放一致性（Release Consistency）\n\n释放一致性[5]是一个宽松的内存一致性模型。它不能始终保证一致性。 对共享内存更新的传播可能会延迟一段时间。这样，释放一致性实现可以将多个更新消息合并为单个消息，从而减少消息的数量。但是，通过在某些同步操作中强制执行一致性，至少对于正确同步的程序而言，对程序员屏蔽了潜在的不一致性。我们都在直观层面上讨论这些问题。关于更详细的说明，读者可以参考Gharachorloo 等人的论文\n\n　　释放一致性的直觉如下。并行程序不应出现数据竞争，因为这会导致不确定的结果。因此，必须充分的使用同步来防止数据竞争。更具体地说，在对共享内存的两个冲突性访问之间必须存在同步（如果两个访问相同的内存位置，并且其中至少一个是写操作，则这两个访问是冲突性的）。由于存在这种同步，因此DSM系统可以延迟发送从一个进程到另一个进程的更新，直到发生这样的同步事件为止，因为只有执行了同步操作，第二个进程才会访问数据。对于没有数据竞争的程序，顺序一致性和释放一致性的结果是相同的。\n\n　　我们将通过第2节中的Jacobi和TSP示例来说明这个原理。在Jacobi中，执行barrier 1 后才进行写共享内存操作，此时将新计算的值从临时数组复制到网格数组中。执行barrier 2时计算阶段才结束。执行barrier 2是为了避免在所有新值被写入网格数组前进程就开始下一次迭代。不管是什么存储模型，都必须需要barrier来确保正确性。但是，它的存在使我们可以推迟网格数组元素新值的传播，直到遇到更低的barrier。\n\n　　在TSP中，任务队列是主要的共享数据结构。处理器从队列中获取任务并对其进行处理，也会创建新的任务。 这些新创建的任务将插入队列。任务队列结构的更新需要对共享内存进行一系列的写入，例如其大小，位于队列开头的任务等。原子地对任务队列数据结构进行访问是为了保证程序的正常运行。一次仅允许一个处理器访问任务队列数据结构。这些保证通过在操作前加锁，操作后解锁来实现。因此只有获得锁的进程才能访问数据结构，也无须立即将更新传播给其他进程。这些处理器需要首先获得锁。因此在获得锁的时候传播数据结构的更新就可以了。\n\n　　这两个示例说明了释放一致性的基本原理。在共享内存的并行程序中引入了同步，以防止进程在同步操作完成之前查看某些内存。由此得出结论，在同步操作完成之前，不必传播那些内存操作的值。相反，顺序一致性会立即更新每个远程内存。 释放一致性需要少得多的消息，并导致更少的消息到达延迟。\n\n　　程序员不必对此太在意。 如果程序没有数据竞争，则它的行为就好像在普通的共享内存系统上执行一样，其条件是：所有同步都必须使用TreadMarks提供的原语来完成。 否则，TreadMarks无法知道何时应该让共享内存保持一致性。\n\n\n\n![图6](https://github.com/ikenchina/img1/raw/master/1/treadmarks/false_sharing1.png)\n\n　　　　　　　　　　　　图６　Jacobi的伪共享例子\n\n\n\n## 4.2 懒惰更新释放一致性（Lazy Release Consistency）\n\nTreadMarks使用懒惰更新释放一致性算法[6]来实现释放一致性。粗略地说，懒惰更新释放一致性在获取锁时确保一致性，相反的，Munin早期实现的释放一致性在释放锁时实施一致性。懒惰更新释放一致性发送的消息更少。在锁释放时，Munin的释放锁的处理器发送缓存了修改数据的所有其他处理器。比较起来，在懒惰更新释放一致性中，一致性消息仅在锁的最后一个释放者和新获取者之间传播。\n\n　　懒惰更新释放一致性（lazy release consistency）比急迫更新释放一致性（eager release consistency）更复杂一些。在释放后，Munin可以忘记释放的处理器在释放之前所做的所有修改。懒惰更新释放一致性不是这种情况，因为第三个处理器以后可能会获取锁并需要查看修改。在实践中，我们的经验表明，对于工作站网络而言，发送消息的成本很高，减少消息数量所带来的收益超过了更复杂的实现的成本。\n\n# 5 多写协议（Multiple-Writer Protocols）\n\n大多数硬件缓存和DSM系统使用单写程序协议。这些协议允许多个读同时访问同一页面，但是在执行任何修改之前，只允许一个写对页面进行修改。单写程序协议易于实现，因为给定页面的所有副本始终都是相同的，并且始终可以通过从当前具有有效副本的任何其他处理器中获取页面的副本来解决缺页错误。不幸的是，这种简单性通常以牺牲消息流量为代价的。 在写页面之前，所有其他副本都必须无效。如果其页面已失效的处理器仍在访问该页面的数据，这些失效则可能导致随后的访问丢失。\n\n　　伪共享会由于无关访问之间的干扰而导致单写程序协议的性能更差。DSM系统通常比硬件系统遭遇更多的伪共享，因为它们以虚拟内存页面而不是高速缓存行的粒度跟踪数据访问。\n\n　　顾名思义，多写协议允许多个写同时修改同一页面，并延后发送保证一致性的消息，尤其是直到同步发生为止\n\n　　TreadMarks使用虚拟内存硬件来检测对共享内存页面的访问和修改。图7显示了如何使用保护故障（protection faults）来创建差异（diffs）。有效页面最初被写保护。 发生写操作时，TreadMarks会创建虚拟内存页的一个副本，或一个twin（双胞胎），并将其保存在系统空间中。当需要将修改发送到另一个处理器时，则将页面的当前副本与twin逐字比较，并将变化的字节保存到diff数据结构中。一旦创建diff后，twin将被丢弃。 除了处理器第一次访问页面外，其页面副本仅通过应用diff进行更新。 不再需要页面的新完整副本。\n\n　　使用diff的主要好处是它们可用于实现多写协议，由于diff通常比页面小得多，因此它们还可显着降低总体带宽需求。\n\n\n\n# ６ TreadMarks系统（The TreadMarks System）\n\nTreadMarks完全以Unix上用户库的方式实现的。不需要修改Unix内核，因为现代Unix提供了在用户级别实现TreadMarks所需的所有通信和内存管理功能。用C，C++或者FORTRAN编写的程序可以用这些语言标准的编译器来编译和连接TreadMarks库。该系统是相对便携式的。 当前，它可以在SPARC，DECStation，DEC / Alpha，IBM RS-6000，IBM SP-1和SGI平台以及以太网和ATM网络上运行。 在本节中，我们简要描述如何实现TreadMarks的通信和内存管理。\n\n　　TreadMarks使用Berkeley套接字接口实现了机器间通信。取决于底层的网络硬件，例如以太网或ATM，TreadMarks使用UDP / IP或AAL3 / 4作为消息传输协议。默认情况下，除非计算机通过ATM LAN连接，否则TreadMarks使用UDP / IP。AAL3 / 4是ATM标准规定的面向连接的最大努力交付协议（best-efforts delivery protocol）。 由于UDP / IP和AAL3 / 4都不保证可靠的传递，因此TreadMarks使用轻量，特定操作的用户级协议来确保消息到达。\n\n　　TreadMarks发送的每个消息要么是请求消息要么是响应消息。TreadMarks发送的消息可能是显式调用TreadMarks库产生的或者是缺页错误产生的。一旦机器发送了请求消息，它将阻塞直到有一个请求消息或者预期的响应消息到达。为了请求处理的延迟最小化，TreadMarks使用SIGIO信号的处理程序来处理请求。消息到达用于接收请求消息的任何套接字都会产生SIGIO信号。由于AAL3 / 4是面向连接的协议，因此与其他每台机器都有一个相对应的套接字。为了确定哪个套接字处理请求，处理程序将执行select系统调用。处理程序收到请求消息后，将执行指定的操作，发送响应消息，然后返回到中断的进程。\n\n　　为了实现一致性协议，TreadMarks使用mprotect系统调用来控制对共享页面的访问。尝试在共享页面上执行受限访问都会产生SIGSEGV信号。SIGSEGV信号处理程序检查本地数据结构以确定页面的状态。如果本地副本是只读的，则该处理程序从空闲页面池中分配一个页面，并执行bcopy来创建一个twin。最后，处理程序将访问权限升级到原来的页面并返回。如果本地页面无效，则处理程序执行一个过程（procedure）通过从最少的远程计算机集中获取对共享内存的必要更新。\n\n![图7](https://github.com/ikenchina/img1/raw/master/1/treadmarks/diff1.png)\n\n　　　　　　　　　　　　图７　DiffCreation\n\n# 7 应用（Applications）\n\n使用TreadMarks已实现了许多应用程序，并且一些基准测试的性能已在之前进行了报道[7]。在这里，我们描述最近使用TreadMarks实现的两个大型应用程序的经验。在本文作者的帮助下，顺序执行代码的作者将混合整数编程（mixed integer programming）和遗传连锁分析（genetic linkage analysis）这些应用程序从现有的顺序代码进行了并行处理。虽然很难量化所涉及的工作量，但已经证明为获得有效的并行代码而进行的修改的工作量相对很小，这将在本节的其余部分中演示。\n\n\n\n## 7.1 混合整数编程（Mixed Integer Programming）\n\n混合整数编程（MIP）是线性编程（LP）的一个版本。在LP中，在由一组线性不等式描述的区域中优化了目标函数。在MIP中，部分或全部变量被约束为只能用整数值（有时仅是0或1）。 图8显示了一个精确的数学公式，图9显示了一个简单的二维实例。\n\n![图8](https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip3.png)\n\n\n\n　　　　　　　　　　　　　　图 8 混合整数编程问题(MIP) \n\n\n\n![图9](https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip_two1.png)\n\n​\t　　　　　　　　　　　　　　　图 9 MIP二维实例\n\n\n\n\n\n![图１０](https://github.com/ikenchina/img1/raw/master/1/treadmarks/branch_and_bound_mip2.png)\n\n　　　　　　　　　　　　　　　　　图10 解决MIP问题的分支界定法\n\n\n\n　　Lee等人实现了用于解决MIP问题的TreadMarks代码 [11]。该代码使用分支剪切法。首先将MIP问题简化为相应的LP问题。通常，这个LP问题的解决方案将为某些约束为整数的变量产生非整数值。下一步是选择这些变量中的一个，并分支出两个新的LP问题，一个问题具有 $x_{i} =  \\left \\lfloor x_{i} \\right \\rfloor$ 的附加约束，另一个具有 $x_{i} =  \\left \\lceil x_{i} \\right \\rceil$ 的附加约束（见图10）。慢慢地，该算法会生成此类分支的树。找到解决方案后，此解决方案便会在解决方案上建立界限。分支中的LP问题的解决方案产生的结果低于此边界则无需再进入下一步了。为了加快此过程，该算法使用一种称为`plunging`的技术，本质上是对树进行深度优先搜索，以找到整数解并尽快建立边界。最后一种感兴趣的改进的算法是`cutting planes`的使用。 这些是添加到LP问题的附加约束，以加强对整数问题的描述。\n\n　　该代码用于解决MIPLIB库中的所有51个问题。该库包括航空人员调度，网络流量，工厂位置，机队调度等方面的代表性示例。图11显示了在8台运行Ultrix 4.3且通过100Mbps Fore ATM交换机连接的DecStation-5000 / 240机器的网络上获得的加速，这些问题的顺序运行时间超过2,000秒。对于大多数问题，加速几乎是线性的。 一个问题表现为超线性加速，这是因为并行代码命中了前期运行的解决方案，从而裁剪掉了大多数分枝定界树。对于另一个问题，几乎没有加速，因为在预处理步骤之后不久就找到了解决方案，此时还没有进行并行化。除了MIPLIB库中的问题外，该代码还可用于解决以前无法解决的多商品流问题[2]。 该问题在具有8个处理器的IBM SP-上花费的CPU时间为30天，并且还表现出接近线性的加速。\n\n\n\n![图１１](https://github.com/ikenchina/img1/raw/master/1/treadmarks/miplib2.png)\n\n　　　　　　　　　　　　　图11 MIPLIB库的结果\n\n\n\n## 7.2 遗传连锁（Genetic Linkage）\n\n遗传连锁分析是一种统计技术，使用家族谱系信息来绘制人类基因图谱并在人类基因组中定位疾病基因。生物学和遗传学的最新进展已提供了大量可用的遗传材料，使计算成为进一步研究的瓶颈。\n\n　　在Mendelian经典的继承理论中，孩子的染色体接收父母一方每个染色体的一条链。考虑重组时，情况会有所不同。如果发生重组，则孩子的染色体链将包含父母染色体的每一条链中的每一条（见图12）。连锁分析的目的是推导我们寻找的基因与已知位置的基因之间发生重组的概率。 从这些概率可以计算出基因在染色体上的大概位置。\n\n　　ILINK [4]是广泛使用的遗传连锁分析程序的一个并行版本，它是LINKAGE [10]程序包的一部分。ILINK将称为谱系的家谱作为输入，并增加了有关该家族成员的一些遗传信息。它计算重组概率θ的最大似然估计。从最上层来看，ILINK由一个优化θ的循环组成。在优化循环的每次迭代中，程序遍历整个谱系，一次遍历一个核心家庭，在已知家庭成员的遗传信息的情况下，计算当前θ的可能性。对于核心家庭的每个成员，该算法都会更新一系列条件概率，这些条件概率表示个体具有特定遗传特征的概率，其条件取决于θ和已经遍历的部分家谱。\n\n　　通过以均衡负载的方式在可用处理器之间分配每个核心家庭的迭代空间，可以并行化上述算法。负载均衡是必不可少的，且依赖于阵列元素中表示的遗传信息的知识。另一个方式是拆分树，它未能产生良好的加速效果，因为大多数计算都发生在树的一小部分上（通常，这些节点靠近树的根部，他们表示已知遗传信息很少的已故者）。另外，无法并行评估不同的θ值，因为优化程序会从一个θ值顺序移至下一个θ值。\n\n　　图13显示了使用ILINK为各种数据集获得的加速。数据集来自对真实的疾病基因定位的研究。对于运行时间较长的数据集，可以实现良好的加速。 对于最小的数据集BAD，由于通信与计算的比率变大，因此加速要少得多。\n\n\n\n![图12](https://github.com/ikenchina/img1/raw/master/1/treadmarks/dna1.png)\n\n　　　　　　　　　　　　　　图12 DNA重组\n\n# 8 相关工作（Related Work）\n\n本节的目标不是进行广泛的并行编程研究，而是以一个独特的示例说明替代性方案，并将最终的系统与TreadMarks进行比较。\n\n消息传递（PVM）。 当前，消息传递是分布式存储系统的主要编程范例。便携式虚拟机（PVM）[15]是一种流行的消息传递软件。它允许将异构的计算机网络视为单个并发计算引擎。尽管PVM中的编程比底层机器的本机消息传递范例中的编程容易得多，并且可移植性强，但是应用程序程序员仍然需要编写代码来显式交换消息。TreadMarks的目标是减轻程序员的负担。 对于具有复杂数据结构和复杂并行化策略的程序，我们认为这是一个主要优势。\n\n隐式并行（HPF）。 如HPF [8]中所示，隐式并行性依赖于用户提供的数据分布，编译器随后使用这些数据分布来生成消息传递代码。这种方法适用于数据并行程序，例如Jacobi。 动态并行性的程序，例如TSP，ILINK或MIP，很难在HPF框架中表达。\n\n面向对象的并行计算（Orca）。Orca [16]和其他面向对象的并行计算系统一样没有为程序员提供共享的存储空间，而是支持对象的共享空间，每个对象都可以通过适当同步的方法进行访问。除了从编程的角度来看的优点之外，这种方法还允许编译器推断出某些优化方法，这些优化方法可用于减少通信量。缺点是，顺序程序中“自然”的对象通常不是正确的并行化对象，需要更多的更改才能获得有效的并行程序\n\n硬件共享内存实现（DASH）。 另一种方法是在硬件中实现共享内存，对少量处理器使用侦听总线协议，或对大量处理器使用基于目录的协议（例如[12]）。我们使用这种方法来共享编程模型，但是我们的实现避免了昂贵的缓存控制器硬件。 另一方面，硬件实现可以有效地支持具有更细粒度并行性的应用程序。\n\n条目一致性（Entry Consistency）（中途）。 条目一致性是另一种宽松的内存模型[1]。它要求所有共享数据都与同步对象相关联。当获取同步对象时，只传输与该同步对象关联的修改后的数据，从而进一步减少通信数据量。但是，条目一致性内存模型比释放一致性弱，这可能会使编程更加困难。\n\n![图13](https://github.com/ikenchina/img1/raw/master/1/treadmarks/ilink.png)\n\n　　　　　　　　　　　　　　　图13 ILINK结果　\n\n# 9 总结和下一步工作（Conclusions and Further Work）\n\n我们的经验表明，使用适当的实现技术，分布式共享内存可以为工作站网络上的并行计算提供有效的平台。多数应用程序移植到TreadMarks分布式共享内存系统上，几乎没有困难，并且性能良好。在下一步的工作中，我们打算尝试其他实际应用，包括地震建模代码。我们还在开发各种工具，以进一步减轻编程负担并提高性能。特别是，我们正在研究使用诸如支持预取的编译器，以及使用性能监视工具来消除不必要的同步。\n\n\n\n# 引用（References）\n\n[1] B.N. Bershad, M.J. Zekauskas, and W.A. Sawdon. The Midway distributed shared memory system. In Proceedings of the '93 CompCon Conference, pages 528-537, February 1993.\n[2] D. Bienstock and O. Gumluk. Computational experience with a difficult mixed-integer multi-commodity  flow problem. To appear in Mathematical Programming, 1994.\n[3] J.B. Carter, J.K. Bennett, and W. Zwaenepoel. Implementation and performance of Munin. In Proceedings of the 13th ACM Symposium on Operating Systems Principles, pages 152-164, October 1991.\n[4] S. Dwarkadas, A.A. Schäffer, R.W. Cottingham Jr., A.L. Cox, P. Keleher, and W. Zwaenepoel. Parallelization of general linkage analysis problems. Human Heredity, 44:127-141, 1994.\n[5] K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. Memory consistency and event ordering in scalable shared-memory multiprocessors. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 15-26, May 1990.\n[6] P. Keleher, A. L. Cox, and W. Zwaenepoel. Lazy release consistency for software distributed shared memory. In Proceedings of the 19th Annual International Symposium on Computer Architecture, pages 13-21, May 1992.\n[7] P. Keleher, S. Dwarkadas, A. Cox, and W. Zwaenepoel. Treadmarks: Distributed shared memory on standard workstations and operating systems. In Proceedings of the 1994 Winter Usenix Conference, pages 115-131, January 1994.\n[8] C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. The High Performance Fortran Handbook. The MIT Press, 1994.\n[9] L. Lamport. How to make a multiprocessor computer that correctly executes multiprocess programs. IEEE Transactions on Computers, C-28(9):690{691, September 1979.\n[10] G. M. Lathrop, J. M. Lalouel, C. Julier, and J. Ott. Strategies for multilocus linkage analysis in humans. Proc. Natl. Acad. Sci. USA, 81:3443-3446, June 1984.\n[11] E. Lee, R. Bixby, W. Cook, and A.L. Cox. Parallelism in mixed integer programming. Sub\u0002mitted for publication, 1994.\n[12] D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. The directory-based cache coherence protocol for the DASH multiprocessor. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 148-159, May 1990.\n[13] K. Li and P. Hudak. Memory coherence in shared virtual memory systems. ACM Transactions on Computer Systems, 7(4):321-359, November 1989.\n[14] M. Litzkow, M. Livny, and M. Mutka. Condor - a hunter of idle workstations. In Proceedings of the 8th International Conference on Distributed Computing Systems, pages 104-111, June 1988.\n[15] V. Sunderam. PVM: A framework for parallel distributed computing. Concurrency:Practice and Experience, 2(4):315-339, December 1990.\n[16] A.S. Tanenbaum, M.F. Kaashoek, and H.E. Bal. Parallel programming using shared ob jects and broadcasting. IEEE Computer, 25(8):10-20, August 1992.\n[17] A.S. Tanenbaum, R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, J. Jansen, and G. van Rossum. Experiences with the Amoeba distributed operating system. Communications of the ACM, 33(12):46-63, December 1990.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/TreadMarks.md","raw":"---\nlayout: post\ncategory: \"2020\"\ntitle:  \"TreadMarks: 基于工作站网络的共享内存计算\"\ntags: [分布式]\ndate: 2020-04-01\n---\n\n> TreadMarks: 基于工作站网络的共享内存计算<!-- more -->  \n\n\n\n\n\n　　　　　　论文: TreadMarks: Shared Memory Computing on Networks of Workstations\n\n　　　　　　　Christiana Amza, Alan L. Cox, Sandhya Dwarkadas, Pete Keleher,    \n　　　　　　　Honghui Lu, Ramakrishnan Ra jamony, Weimin Yu and Willy Zwaenepoel    \n　　　　　　　　　　　　　Department of Computer Science    \n　　　　　　　　　　　　　　　　Rice University    \n\n\n\n# 摘要（Abstract）\n\nTreadMarks通过为应用程序提供共享的内存抽象来支持基于工作站网络上的并行计算。共享内存有助于从顺序程序转换成并行程序，因为大多数数据结构都可无需做更改。 只需要添加同步操作。 我们会讨论TreadMarks中用于提供有效的共享内存技术，并讨论了两个主要应用程序的经验，即混合整数编程和遗传连锁分析。\n\n# 1 介绍（ Introduction）\n\n高速网络和快速提高的微处理器性能使工作站的网络成为越来越有吸引力的并行计算工具。通过仅仅依靠廉价硬件和软件，工作站网络可以以相对较低的成本提供并行处理。可以将工作站网络的多处理器实现成处理器组[17]，这是许多专用于提供计算周期的处理器。或者，它也可以由一组动态变化的机器组成，在这些机器上利用空闲周期执行长时间运行的计算[14]。在后一种情况下，（硬件）成本基本上为零，因为许多组织机构已经拥有广泛的工作站网络。在性能方面，处理器速度，网络带宽和延迟的改进使联网的工作站能够为越来越多的应用程序提供接近或超过超级计算机的性能。我们的立场不是让这种松耦合的多处理器设计使更紧密耦合的设计过时。\n尤其是，更低延迟和更高带宽的这些紧耦合的设计能有效执行对同步和通信要求更加严格的应用程序。但是，我们认为网络技术和处理器性能的进步将极大地扩展可以在工作站网络上有效执行的应用程序的种类。\n\n　　在论文中，我们会讨论使用TreadMarks分布式共享内存（DSM）系统在工作站网络上进行并行计算的经验。DSM允许进程假定全局共享的虚拟内存，即使它们运行的节点并没有在物理上共享内存[13]。图1举例说明了一个DSM系统，该系统由N个联网的工作站组成，每个工作站都有自己的内存，并通过网络连接起来。DSM软件提供了全局共享内存的抽象，每个处理器都可以访问任何数据项，而程序员不必担心数据在哪里或如何获取。相反，在基于工作站网络的“本地”编程模型中，程序员必须确定处理器何时需要进行通信，与谁进行通信以及要发送什么数据。对于具有复杂数据结构和复杂并行化策略的程序，这可能成为艰巨的任务。在DSM系统上，程序员可以专注于算法开发，而不是管理分区的数据集和数据传输。除了易于编程之外，DSM还提供了与（硬件）共享内存多处理器相同的编程环境，从而允许在两种环境之间进行移植。最后，DSM考虑到在网络环境中无缝集成共享内存的多处理器工作站。本文描述的实际系统TreadMarks [7]，在Unix工作站上以用户级别运行。不需要进行内核修改或使用特权，并且使用标准Unix编译器和链接器。实现DSM系统的挑战在于确保共享内存抽象不会导致大量通信。TreadMarks中使用了多种技术来应对这一挑战，包括lazy release consistency(延迟释放一致性)[6]和多写协议[3]。本文首先会描述TreadMarks提供的应用程序编程接口（第2节），接下来，我们会讨论实现方面的挑战。（第3节）以及用于应对这些挑战的技术（第4和第5节）。我们在第6节中会简要的描述TreadMarks的实现，并通过讨论我们在混合整数编程和遗传连锁分析（第7节）这两个大型应用程序中的经验来证明其效率。最后，我们在第8节中讨论相关工作，并在第9节中提供一些结论和指导，以及进一步的工作。\n\n![图１](https://github.com/ikenchina/img1/raw/master/1/treadmarks/arch1.png)\n\n　　　　　　　　　　　　　　　　　图１　分布式共享内存\n\n# 2 共享内存编程（Shared Memory Programming）\n\n## 2.1 应用程序编程接口（Application Programming Interface）\n\nTreadMarks API简洁但功能强大（有关C语言接口，见图2）。它提供了用于进程创建和销毁，同步以及共享内存分配的功能。我们专注于同步原语。 共享内存会引起数据争用。当不同进程以程序员不希望的方式交错对共享变量访问时，就会发生数据竞争。例如，假设一个进程写入共享记录的多个字段，而另一个进程尝试读取这些相同的字段。第二个进程很有可能读取新写入的值，但也有可能在第一个进程写入新值前读取到旧值。通常不希望发生这种情况。 为了避免这种情况，共享内存并行程序包含同步操作。 在这种特殊情况下，将使用锁来允许每个进程对记录的独占访问。\n\nTreadMarks提供了两种同步原语：barrier(屏障)和exclusive locks(排他锁)。进程通过调用 Tmk barrier() 来等待屏障。屏障是全局的：调用进程会被暂停，直到系统中的所有进程到达同一屏障为止。进程调用Tmk lock来获取锁，然后调用Tmk release来释放锁。当另一个进程持有该锁时，任何进程都无法获取该锁。同步原语的这种特定选择跟TreadMarks的设计没有任何关系；以后可能会增加其他原语。 我们通过两个简单的应用程序演示了这些以及其他TreadMarks原语的用法。\n\n\n\n## 2.2 两个简单的示例（Two Simple Illustrations）\n\n图3和图4说明了TreadMarks API在Jacobi迭代和解决旅行商问题（TSP）中的使用。 我们很清楚这些示例代码的过于简单。 但在这里仅用于演示目的。 实际应用将在第7节中讨论。\n\n　　Jacobi是一种求解偏微分方程的方法。我们的示例遍历二维数组。在每次迭代期间，每个矩阵元素都会更新为其最近元素的平均值（上方，下方，左侧和右侧）。Jacobi使用临时数组存储每次迭代期间计算的新值，以避免元素的旧值在其被临近元素使用之前覆盖。在并行版本中，为所有处理器分配的数量大致相等的行。 边界上的行由两个相邻进程共享。\n\n　　图3中的TreadMarks版本使用两个数组：一个网格和一个临时数组。网格的保存在共享内存中，而临时的是每个进程专有的。网格由进程0分配和初始化。Jacobi中的同步是通过屏障实现的。 Tmk barrier(0) 确保在开始计算之前，进程0的初始化对所有进程可见。Tmk barrier(1) 确保所有进程在上一次迭代中完成读取值之前，不会有进程会覆盖网格中的任何值。Tmk barrier(2) 可防止当前迭代计算中的所有网格的值被设置前，没有任何进程可以开始下一次迭代。\n\n　　旅行商问题（TSP）是查找从指定城市开始，经过地图上所有其他城市恰好一次并返回原始城市的最短路径。使用了一种简单的分支定界算法。每次局部旅行一次就扩展一个城市。如果局部旅行的长度加上路径剩余部分的下限大于当前最短旅行路径的话，则不会在进一步进行局部旅行了，因为他不会导致比当前最短路径更短的路径了。\n\n　　该程序维护一个局部旅行的列队，保持最短的局部旅行在列队最前面。它不断往列队中添加可能最优的局部旅行，直到从列队的开头开始找到一个比阈值长的路径为止。然后程序将它从列队中移除，并尝试剩余程序的所有排列。最终，它将比较当前路径和包含此路径的最短路径，且如果有必要的话就更新当前最短路径。列队和当前最短路径是共享的，通过锁来保护对他们的访问。\n\n\n\n```\n/* the maximum number of parallel processes supported by TreadMarks */\n#define TMK_NPROCS\n/* the actual number of parallel processes after Tmk_startup */\nextern unsigned Tmk_nprocs;\n/* the process id, an integer in the range 0 ... Tmk_nprocs - 1 */\nextern unsigned Tmk_proc_id;\n/* the number of lock synchronization objects provided by TreadMarks */\n#define TMK_NLOCKS\n/* the number of barrier synchronization objects provided by TreadMarks */\n#define TMK_NBARRIERS\n/* Initialize TreadMarks and start the remote processes */\nvoid Tmk_startup(argc, argv) int argc; char **argv;\n/* Terminate the calling process. Other processes are unaffected. */\nvoid Tmk_exit(status) int status;\n/* Block the calling process until every other process arrives at the barrier. */\nvoid Tmk_barrier(id) unsigned id;\n/* Block the calling process until it acquires the specified lock. */\nvoid Tmk_lock_acquire(id) unsigned id;\n/* Release the specified lock. */\nvoid Tmk_lock_release(id) unsigned id;\n/* Allocate the specified number of bytes of shared memory */\nchar *Tmk_malloc(size) unsigned size;\n/* Free shared memory allocated by Tmk_malloc. */\nvoid Tmk_free(ptr) char *ptr;\n\n```\n\n　　　　　　　　　　　图 2 TreadMarks C语言接口\n\n\n\n```\n#define M 1024\n#define N 1024\nfloat **grid;\nfloat scratch[M][N];\n\nTmk_startup();\n\nif (Tmk_proc_id == 0)\n{\n    grid = Tmk_malloc(M * N * sizeof(float));\n    initialize grid;\n}\n\nTmk_barrier(0);\nlength = M / Tmk_nprocs;\nbegin = length * Tmk_proc_id;\nend = length * (Tmk_proc_id + 1);\nfor (number of iterations)\n{\n    for (i = begin; i < end; i++)\n        for (j = 0; j < N; j++)\n            scratch[i][j] = (grid[i - 1][j] + grid[i + 1][j] +\n                             grid[i][j - 1] + grid[i][j + 1]) / 4;\n    Tmk_barrier(1);\n    for (i = begin; i < end; i++)\n        for (j = 0; j < N; j++)\n            grid[i][j] = scratch[i][j];\n    Tmk_barrier(2);\n}\n\n```\n\n　　　　　　　　　　　图 3 The TreadMarks Jacobi 程序\n\n\n\n\n\n\n\n# 实现的挑战（Implementation Challenges）\n\n提供内存一致性是DSM系统的核心：DSM软件必须以一种提供全局共享内存的方式在处理器之间移动数据。在李的原始IVY系统中[13]，虚拟内存硬件用于维护内存一致性。每个处理器的本地（物理）存储器形成全局虚拟地址空间的高速缓存（请参见图5）。如果一个页面不在本地处理器的内存中，则会产生缺页错误。DSM软件将该页面的最新副本从其远程位置导入本地内存，然后重新启动该过程。例如，图5显示了处理器1发生缺页错误，然后从处理器3的本地内存中复制需要页面的副本。IVY进一步将读取错误与写入错误区分开。发生读取错误时，页面将所有副本以只读方式进行复制，而发生写入错误时，所有现有副本都将无效，并且写的处理器保留唯一副本。\n\n```\nqueue_type *Queue;\nint *Shortest_length;\nint queue_lock, tour_lock;\nmain()\n{\n    Tmk_startup();\n    queue_lock = 0;\n    tour_lock = 1;\n    if (Tmk_proc_id == 0)\n        Queue = Tmk_malloc(sizeof(queue_type));\n    Shortest_length = Tmk_malloc(sizeof(int));\n    initialize Heap and Shortest_length\n        Tmk_barrier(0);\n    Tmk_lock_acquire(queue_lock);\n    Exit if queue is empty;\n    Keep adding to queue\n        until a long,\n        promising tour appears at the head;\n    Path = Delete the tour from the head;\n    Tmk_lock_release(queue_lock);\n    length = recursively\n    try\n        all cities not on Path,\n            find the shortest tour length\n                Tmk_lock_acquire(tour_lock);\n    if (length < *Shortest_length)\n        *Shortest_length = length;\n    Tmk_lock_release(tour_lock);\n}\n\n```\n\n　　　　　　　　　　　图4 The TreadMarks TSP 程序\n\n\n\n　　尽管很简单，但DSM的IVY实现可能产生大量通信。而在工作站网络上通信的成本很高。发送消息可能涉及到进入操作系统内核陷阱，中断，上下文切换以及可能经过多层网络协议的处理。因此，必须保持较少的消息的数量。 我们使用图3和图4的示例来说明IVY中的一些通信问题。\n\n　　第一个问题与IVY的一致性模型有关，通常称为顺序一致性（sequential consistency） [9]。粗略地说，顺序一致性要求对共享内存的写入对于其他处理器“立即”变为可见。这就是为什么IVY在写入共享内存之前发送无效消息的原因。在许多情况下，顺序一致性提供了过强的保证。 例如，思考下图4中TSP中最佳巡回的更新及其长度。在IVY中，这两个共享内存更新将导致无效信息发送到所有其他的缓存包含这些变量的页面的处理器。 但是，只会在有相应锁保护的临界区内访问这些变量，因此仅将无效发送给获取锁的下一个处理器就足够了，并且仅在获取锁时才发送。\n\n　　第二个问题涉及到潜在的伪共享的问题。当位于同一个页面的两个或两个以上不相关的数据对象由不同的处理器并发写入时，就会导致伪共享，从而导致该页在处理器之间像乒乓球一样来回移动。由于一致性单元很大（虚拟内存页），所以伪共享是一个潜在的严重问题。图6展示了Jacobi中网格数组可能的页面布局。 当两个处理器都更新其网格数组的一部分时，它们正在同时写入同一页面，并导致该页面在处理器间来回移动多次。\n\n\n\n\n\n![图５](https://github.com/ikenchina/img1/raw/master/1/treadmarks/ivh1.png)\n\n　　　　　　　　　　　图５　IVH DSM系统操作\n\n\n# 4 懒惰更新释放一致性（Lazy Release Consistency）\n\n\n\n## 4.1 释放一致性（Release Consistency）\n\n释放一致性[5]是一个宽松的内存一致性模型。它不能始终保证一致性。 对共享内存更新的传播可能会延迟一段时间。这样，释放一致性实现可以将多个更新消息合并为单个消息，从而减少消息的数量。但是，通过在某些同步操作中强制执行一致性，至少对于正确同步的程序而言，对程序员屏蔽了潜在的不一致性。我们都在直观层面上讨论这些问题。关于更详细的说明，读者可以参考Gharachorloo 等人的论文\n\n　　释放一致性的直觉如下。并行程序不应出现数据竞争，因为这会导致不确定的结果。因此，必须充分的使用同步来防止数据竞争。更具体地说，在对共享内存的两个冲突性访问之间必须存在同步（如果两个访问相同的内存位置，并且其中至少一个是写操作，则这两个访问是冲突性的）。由于存在这种同步，因此DSM系统可以延迟发送从一个进程到另一个进程的更新，直到发生这样的同步事件为止，因为只有执行了同步操作，第二个进程才会访问数据。对于没有数据竞争的程序，顺序一致性和释放一致性的结果是相同的。\n\n　　我们将通过第2节中的Jacobi和TSP示例来说明这个原理。在Jacobi中，执行barrier 1 后才进行写共享内存操作，此时将新计算的值从临时数组复制到网格数组中。执行barrier 2时计算阶段才结束。执行barrier 2是为了避免在所有新值被写入网格数组前进程就开始下一次迭代。不管是什么存储模型，都必须需要barrier来确保正确性。但是，它的存在使我们可以推迟网格数组元素新值的传播，直到遇到更低的barrier。\n\n　　在TSP中，任务队列是主要的共享数据结构。处理器从队列中获取任务并对其进行处理，也会创建新的任务。 这些新创建的任务将插入队列。任务队列结构的更新需要对共享内存进行一系列的写入，例如其大小，位于队列开头的任务等。原子地对任务队列数据结构进行访问是为了保证程序的正常运行。一次仅允许一个处理器访问任务队列数据结构。这些保证通过在操作前加锁，操作后解锁来实现。因此只有获得锁的进程才能访问数据结构，也无须立即将更新传播给其他进程。这些处理器需要首先获得锁。因此在获得锁的时候传播数据结构的更新就可以了。\n\n　　这两个示例说明了释放一致性的基本原理。在共享内存的并行程序中引入了同步，以防止进程在同步操作完成之前查看某些内存。由此得出结论，在同步操作完成之前，不必传播那些内存操作的值。相反，顺序一致性会立即更新每个远程内存。 释放一致性需要少得多的消息，并导致更少的消息到达延迟。\n\n　　程序员不必对此太在意。 如果程序没有数据竞争，则它的行为就好像在普通的共享内存系统上执行一样，其条件是：所有同步都必须使用TreadMarks提供的原语来完成。 否则，TreadMarks无法知道何时应该让共享内存保持一致性。\n\n\n\n![图6](https://github.com/ikenchina/img1/raw/master/1/treadmarks/false_sharing1.png)\n\n　　　　　　　　　　　　图６　Jacobi的伪共享例子\n\n\n\n## 4.2 懒惰更新释放一致性（Lazy Release Consistency）\n\nTreadMarks使用懒惰更新释放一致性算法[6]来实现释放一致性。粗略地说，懒惰更新释放一致性在获取锁时确保一致性，相反的，Munin早期实现的释放一致性在释放锁时实施一致性。懒惰更新释放一致性发送的消息更少。在锁释放时，Munin的释放锁的处理器发送缓存了修改数据的所有其他处理器。比较起来，在懒惰更新释放一致性中，一致性消息仅在锁的最后一个释放者和新获取者之间传播。\n\n　　懒惰更新释放一致性（lazy release consistency）比急迫更新释放一致性（eager release consistency）更复杂一些。在释放后，Munin可以忘记释放的处理器在释放之前所做的所有修改。懒惰更新释放一致性不是这种情况，因为第三个处理器以后可能会获取锁并需要查看修改。在实践中，我们的经验表明，对于工作站网络而言，发送消息的成本很高，减少消息数量所带来的收益超过了更复杂的实现的成本。\n\n# 5 多写协议（Multiple-Writer Protocols）\n\n大多数硬件缓存和DSM系统使用单写程序协议。这些协议允许多个读同时访问同一页面，但是在执行任何修改之前，只允许一个写对页面进行修改。单写程序协议易于实现，因为给定页面的所有副本始终都是相同的，并且始终可以通过从当前具有有效副本的任何其他处理器中获取页面的副本来解决缺页错误。不幸的是，这种简单性通常以牺牲消息流量为代价的。 在写页面之前，所有其他副本都必须无效。如果其页面已失效的处理器仍在访问该页面的数据，这些失效则可能导致随后的访问丢失。\n\n　　伪共享会由于无关访问之间的干扰而导致单写程序协议的性能更差。DSM系统通常比硬件系统遭遇更多的伪共享，因为它们以虚拟内存页面而不是高速缓存行的粒度跟踪数据访问。\n\n　　顾名思义，多写协议允许多个写同时修改同一页面，并延后发送保证一致性的消息，尤其是直到同步发生为止\n\n　　TreadMarks使用虚拟内存硬件来检测对共享内存页面的访问和修改。图7显示了如何使用保护故障（protection faults）来创建差异（diffs）。有效页面最初被写保护。 发生写操作时，TreadMarks会创建虚拟内存页的一个副本，或一个twin（双胞胎），并将其保存在系统空间中。当需要将修改发送到另一个处理器时，则将页面的当前副本与twin逐字比较，并将变化的字节保存到diff数据结构中。一旦创建diff后，twin将被丢弃。 除了处理器第一次访问页面外，其页面副本仅通过应用diff进行更新。 不再需要页面的新完整副本。\n\n　　使用diff的主要好处是它们可用于实现多写协议，由于diff通常比页面小得多，因此它们还可显着降低总体带宽需求。\n\n\n\n# ６ TreadMarks系统（The TreadMarks System）\n\nTreadMarks完全以Unix上用户库的方式实现的。不需要修改Unix内核，因为现代Unix提供了在用户级别实现TreadMarks所需的所有通信和内存管理功能。用C，C++或者FORTRAN编写的程序可以用这些语言标准的编译器来编译和连接TreadMarks库。该系统是相对便携式的。 当前，它可以在SPARC，DECStation，DEC / Alpha，IBM RS-6000，IBM SP-1和SGI平台以及以太网和ATM网络上运行。 在本节中，我们简要描述如何实现TreadMarks的通信和内存管理。\n\n　　TreadMarks使用Berkeley套接字接口实现了机器间通信。取决于底层的网络硬件，例如以太网或ATM，TreadMarks使用UDP / IP或AAL3 / 4作为消息传输协议。默认情况下，除非计算机通过ATM LAN连接，否则TreadMarks使用UDP / IP。AAL3 / 4是ATM标准规定的面向连接的最大努力交付协议（best-efforts delivery protocol）。 由于UDP / IP和AAL3 / 4都不保证可靠的传递，因此TreadMarks使用轻量，特定操作的用户级协议来确保消息到达。\n\n　　TreadMarks发送的每个消息要么是请求消息要么是响应消息。TreadMarks发送的消息可能是显式调用TreadMarks库产生的或者是缺页错误产生的。一旦机器发送了请求消息，它将阻塞直到有一个请求消息或者预期的响应消息到达。为了请求处理的延迟最小化，TreadMarks使用SIGIO信号的处理程序来处理请求。消息到达用于接收请求消息的任何套接字都会产生SIGIO信号。由于AAL3 / 4是面向连接的协议，因此与其他每台机器都有一个相对应的套接字。为了确定哪个套接字处理请求，处理程序将执行select系统调用。处理程序收到请求消息后，将执行指定的操作，发送响应消息，然后返回到中断的进程。\n\n　　为了实现一致性协议，TreadMarks使用mprotect系统调用来控制对共享页面的访问。尝试在共享页面上执行受限访问都会产生SIGSEGV信号。SIGSEGV信号处理程序检查本地数据结构以确定页面的状态。如果本地副本是只读的，则该处理程序从空闲页面池中分配一个页面，并执行bcopy来创建一个twin。最后，处理程序将访问权限升级到原来的页面并返回。如果本地页面无效，则处理程序执行一个过程（procedure）通过从最少的远程计算机集中获取对共享内存的必要更新。\n\n![图7](https://github.com/ikenchina/img1/raw/master/1/treadmarks/diff1.png)\n\n　　　　　　　　　　　　图７　DiffCreation\n\n# 7 应用（Applications）\n\n使用TreadMarks已实现了许多应用程序，并且一些基准测试的性能已在之前进行了报道[7]。在这里，我们描述最近使用TreadMarks实现的两个大型应用程序的经验。在本文作者的帮助下，顺序执行代码的作者将混合整数编程（mixed integer programming）和遗传连锁分析（genetic linkage analysis）这些应用程序从现有的顺序代码进行了并行处理。虽然很难量化所涉及的工作量，但已经证明为获得有效的并行代码而进行的修改的工作量相对很小，这将在本节的其余部分中演示。\n\n\n\n## 7.1 混合整数编程（Mixed Integer Programming）\n\n混合整数编程（MIP）是线性编程（LP）的一个版本。在LP中，在由一组线性不等式描述的区域中优化了目标函数。在MIP中，部分或全部变量被约束为只能用整数值（有时仅是0或1）。 图8显示了一个精确的数学公式，图9显示了一个简单的二维实例。\n\n![图8](https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip3.png)\n\n\n\n　　　　　　　　　　　　　　图 8 混合整数编程问题(MIP) \n\n\n\n![图9](https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip_two1.png)\n\n​\t　　　　　　　　　　　　　　　图 9 MIP二维实例\n\n\n\n\n\n![图１０](https://github.com/ikenchina/img1/raw/master/1/treadmarks/branch_and_bound_mip2.png)\n\n　　　　　　　　　　　　　　　　　图10 解决MIP问题的分支界定法\n\n\n\n　　Lee等人实现了用于解决MIP问题的TreadMarks代码 [11]。该代码使用分支剪切法。首先将MIP问题简化为相应的LP问题。通常，这个LP问题的解决方案将为某些约束为整数的变量产生非整数值。下一步是选择这些变量中的一个，并分支出两个新的LP问题，一个问题具有 $x_{i} =  \\left \\lfloor x_{i} \\right \\rfloor$ 的附加约束，另一个具有 $x_{i} =  \\left \\lceil x_{i} \\right \\rceil$ 的附加约束（见图10）。慢慢地，该算法会生成此类分支的树。找到解决方案后，此解决方案便会在解决方案上建立界限。分支中的LP问题的解决方案产生的结果低于此边界则无需再进入下一步了。为了加快此过程，该算法使用一种称为`plunging`的技术，本质上是对树进行深度优先搜索，以找到整数解并尽快建立边界。最后一种感兴趣的改进的算法是`cutting planes`的使用。 这些是添加到LP问题的附加约束，以加强对整数问题的描述。\n\n　　该代码用于解决MIPLIB库中的所有51个问题。该库包括航空人员调度，网络流量，工厂位置，机队调度等方面的代表性示例。图11显示了在8台运行Ultrix 4.3且通过100Mbps Fore ATM交换机连接的DecStation-5000 / 240机器的网络上获得的加速，这些问题的顺序运行时间超过2,000秒。对于大多数问题，加速几乎是线性的。 一个问题表现为超线性加速，这是因为并行代码命中了前期运行的解决方案，从而裁剪掉了大多数分枝定界树。对于另一个问题，几乎没有加速，因为在预处理步骤之后不久就找到了解决方案，此时还没有进行并行化。除了MIPLIB库中的问题外，该代码还可用于解决以前无法解决的多商品流问题[2]。 该问题在具有8个处理器的IBM SP-上花费的CPU时间为30天，并且还表现出接近线性的加速。\n\n\n\n![图１１](https://github.com/ikenchina/img1/raw/master/1/treadmarks/miplib2.png)\n\n　　　　　　　　　　　　　图11 MIPLIB库的结果\n\n\n\n## 7.2 遗传连锁（Genetic Linkage）\n\n遗传连锁分析是一种统计技术，使用家族谱系信息来绘制人类基因图谱并在人类基因组中定位疾病基因。生物学和遗传学的最新进展已提供了大量可用的遗传材料，使计算成为进一步研究的瓶颈。\n\n　　在Mendelian经典的继承理论中，孩子的染色体接收父母一方每个染色体的一条链。考虑重组时，情况会有所不同。如果发生重组，则孩子的染色体链将包含父母染色体的每一条链中的每一条（见图12）。连锁分析的目的是推导我们寻找的基因与已知位置的基因之间发生重组的概率。 从这些概率可以计算出基因在染色体上的大概位置。\n\n　　ILINK [4]是广泛使用的遗传连锁分析程序的一个并行版本，它是LINKAGE [10]程序包的一部分。ILINK将称为谱系的家谱作为输入，并增加了有关该家族成员的一些遗传信息。它计算重组概率θ的最大似然估计。从最上层来看，ILINK由一个优化θ的循环组成。在优化循环的每次迭代中，程序遍历整个谱系，一次遍历一个核心家庭，在已知家庭成员的遗传信息的情况下，计算当前θ的可能性。对于核心家庭的每个成员，该算法都会更新一系列条件概率，这些条件概率表示个体具有特定遗传特征的概率，其条件取决于θ和已经遍历的部分家谱。\n\n　　通过以均衡负载的方式在可用处理器之间分配每个核心家庭的迭代空间，可以并行化上述算法。负载均衡是必不可少的，且依赖于阵列元素中表示的遗传信息的知识。另一个方式是拆分树，它未能产生良好的加速效果，因为大多数计算都发生在树的一小部分上（通常，这些节点靠近树的根部，他们表示已知遗传信息很少的已故者）。另外，无法并行评估不同的θ值，因为优化程序会从一个θ值顺序移至下一个θ值。\n\n　　图13显示了使用ILINK为各种数据集获得的加速。数据集来自对真实的疾病基因定位的研究。对于运行时间较长的数据集，可以实现良好的加速。 对于最小的数据集BAD，由于通信与计算的比率变大，因此加速要少得多。\n\n\n\n![图12](https://github.com/ikenchina/img1/raw/master/1/treadmarks/dna1.png)\n\n　　　　　　　　　　　　　　图12 DNA重组\n\n# 8 相关工作（Related Work）\n\n本节的目标不是进行广泛的并行编程研究，而是以一个独特的示例说明替代性方案，并将最终的系统与TreadMarks进行比较。\n\n消息传递（PVM）。 当前，消息传递是分布式存储系统的主要编程范例。便携式虚拟机（PVM）[15]是一种流行的消息传递软件。它允许将异构的计算机网络视为单个并发计算引擎。尽管PVM中的编程比底层机器的本机消息传递范例中的编程容易得多，并且可移植性强，但是应用程序程序员仍然需要编写代码来显式交换消息。TreadMarks的目标是减轻程序员的负担。 对于具有复杂数据结构和复杂并行化策略的程序，我们认为这是一个主要优势。\n\n隐式并行（HPF）。 如HPF [8]中所示，隐式并行性依赖于用户提供的数据分布，编译器随后使用这些数据分布来生成消息传递代码。这种方法适用于数据并行程序，例如Jacobi。 动态并行性的程序，例如TSP，ILINK或MIP，很难在HPF框架中表达。\n\n面向对象的并行计算（Orca）。Orca [16]和其他面向对象的并行计算系统一样没有为程序员提供共享的存储空间，而是支持对象的共享空间，每个对象都可以通过适当同步的方法进行访问。除了从编程的角度来看的优点之外，这种方法还允许编译器推断出某些优化方法，这些优化方法可用于减少通信量。缺点是，顺序程序中“自然”的对象通常不是正确的并行化对象，需要更多的更改才能获得有效的并行程序\n\n硬件共享内存实现（DASH）。 另一种方法是在硬件中实现共享内存，对少量处理器使用侦听总线协议，或对大量处理器使用基于目录的协议（例如[12]）。我们使用这种方法来共享编程模型，但是我们的实现避免了昂贵的缓存控制器硬件。 另一方面，硬件实现可以有效地支持具有更细粒度并行性的应用程序。\n\n条目一致性（Entry Consistency）（中途）。 条目一致性是另一种宽松的内存模型[1]。它要求所有共享数据都与同步对象相关联。当获取同步对象时，只传输与该同步对象关联的修改后的数据，从而进一步减少通信数据量。但是，条目一致性内存模型比释放一致性弱，这可能会使编程更加困难。\n\n![图13](https://github.com/ikenchina/img1/raw/master/1/treadmarks/ilink.png)\n\n　　　　　　　　　　　　　　　图13 ILINK结果　\n\n# 9 总结和下一步工作（Conclusions and Further Work）\n\n我们的经验表明，使用适当的实现技术，分布式共享内存可以为工作站网络上的并行计算提供有效的平台。多数应用程序移植到TreadMarks分布式共享内存系统上，几乎没有困难，并且性能良好。在下一步的工作中，我们打算尝试其他实际应用，包括地震建模代码。我们还在开发各种工具，以进一步减轻编程负担并提高性能。特别是，我们正在研究使用诸如支持预取的编译器，以及使用性能监视工具来消除不必要的同步。\n\n\n\n# 引用（References）\n\n[1] B.N. Bershad, M.J. Zekauskas, and W.A. Sawdon. The Midway distributed shared memory system. In Proceedings of the '93 CompCon Conference, pages 528-537, February 1993.\n[2] D. Bienstock and O. Gumluk. Computational experience with a difficult mixed-integer multi-commodity  flow problem. To appear in Mathematical Programming, 1994.\n[3] J.B. Carter, J.K. Bennett, and W. Zwaenepoel. Implementation and performance of Munin. In Proceedings of the 13th ACM Symposium on Operating Systems Principles, pages 152-164, October 1991.\n[4] S. Dwarkadas, A.A. Schäffer, R.W. Cottingham Jr., A.L. Cox, P. Keleher, and W. Zwaenepoel. Parallelization of general linkage analysis problems. Human Heredity, 44:127-141, 1994.\n[5] K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. Memory consistency and event ordering in scalable shared-memory multiprocessors. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 15-26, May 1990.\n[6] P. Keleher, A. L. Cox, and W. Zwaenepoel. Lazy release consistency for software distributed shared memory. In Proceedings of the 19th Annual International Symposium on Computer Architecture, pages 13-21, May 1992.\n[7] P. Keleher, S. Dwarkadas, A. Cox, and W. Zwaenepoel. Treadmarks: Distributed shared memory on standard workstations and operating systems. In Proceedings of the 1994 Winter Usenix Conference, pages 115-131, January 1994.\n[8] C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. The High Performance Fortran Handbook. The MIT Press, 1994.\n[9] L. Lamport. How to make a multiprocessor computer that correctly executes multiprocess programs. IEEE Transactions on Computers, C-28(9):690{691, September 1979.\n[10] G. M. Lathrop, J. M. Lalouel, C. Julier, and J. Ott. Strategies for multilocus linkage analysis in humans. Proc. Natl. Acad. Sci. USA, 81:3443-3446, June 1984.\n[11] E. Lee, R. Bixby, W. Cook, and A.L. Cox. Parallelism in mixed integer programming. Sub\u0002mitted for publication, 1994.\n[12] D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. The directory-based cache coherence protocol for the DASH multiprocessor. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 148-159, May 1990.\n[13] K. Li and P. Hudak. Memory coherence in shared virtual memory systems. ACM Transactions on Computer Systems, 7(4):321-359, November 1989.\n[14] M. Litzkow, M. Livny, and M. Mutka. Condor - a hunter of idle workstations. In Proceedings of the 8th International Conference on Distributed Computing Systems, pages 104-111, June 1988.\n[15] V. Sunderam. PVM: A framework for parallel distributed computing. Concurrency:Practice and Experience, 2(4):315-339, December 1990.\n[16] A.S. Tanenbaum, M.F. Kaashoek, and H.E. Bal. Parallel programming using shared ob jects and broadcasting. IEEE Computer, 25(8):10-20, August 1992.\n[17] A.S. Tanenbaum, R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, J. Jansen, and G. van Rossum. Experiences with the Amoeba distributed operating system. Communications of the ACM, 33(12):46-63, December 1990.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"TreadMarks","published":1,"updated":"2020-04-15T07:45:14.004Z","comments":1,"photos":[],"link":"","_id":"ck9115hpf0000ppfcvq9z2p4f","content":"<blockquote>\n<p>TreadMarks: 基于工作站网络的共享内存计算<a id=\"more\"></a>  </p>\n</blockquote>\n<p>　　　　　　论文: TreadMarks: Shared Memory Computing on Networks of Workstations</p>\n<p>　　　　　　　Christiana Amza, Alan L. Cox, Sandhya Dwarkadas, Pete Keleher,<br>　　　　　　　Honghui Lu, Ramakrishnan Ra jamony, Weimin Yu and Willy Zwaenepoel<br>　　　　　　　　　　　　　Department of Computer Science<br>　　　　　　　　　　　　　　　　Rice University    </p>\n<h1 id=\"摘要（Abstract）\"><a href=\"#摘要（Abstract）\" class=\"headerlink\" title=\"摘要（Abstract）\"></a>摘要（Abstract）</h1><p>TreadMarks通过为应用程序提供共享的内存抽象来支持基于工作站网络上的并行计算。共享内存有助于从顺序程序转换成并行程序，因为大多数数据结构都可无需做更改。 只需要添加同步操作。 我们会讨论TreadMarks中用于提供有效的共享内存技术，并讨论了两个主要应用程序的经验，即混合整数编程和遗传连锁分析。</p>\n<h1 id=\"1-介绍（-Introduction）\"><a href=\"#1-介绍（-Introduction）\" class=\"headerlink\" title=\"1 介绍（ Introduction）\"></a>1 介绍（ Introduction）</h1><p>高速网络和快速提高的微处理器性能使工作站的网络成为越来越有吸引力的并行计算工具。通过仅仅依靠廉价硬件和软件，工作站网络可以以相对较低的成本提供并行处理。可以将工作站网络的多处理器实现成处理器组[17]，这是许多专用于提供计算周期的处理器。或者，它也可以由一组动态变化的机器组成，在这些机器上利用空闲周期执行长时间运行的计算[14]。在后一种情况下，（硬件）成本基本上为零，因为许多组织机构已经拥有广泛的工作站网络。在性能方面，处理器速度，网络带宽和延迟的改进使联网的工作站能够为越来越多的应用程序提供接近或超过超级计算机的性能。我们的立场不是让这种松耦合的多处理器设计使更紧密耦合的设计过时。<br>尤其是，更低延迟和更高带宽的这些紧耦合的设计能有效执行对同步和通信要求更加严格的应用程序。但是，我们认为网络技术和处理器性能的进步将极大地扩展可以在工作站网络上有效执行的应用程序的种类。</p>\n<p>　　在论文中，我们会讨论使用TreadMarks分布式共享内存（DSM）系统在工作站网络上进行并行计算的经验。DSM允许进程假定全局共享的虚拟内存，即使它们运行的节点并没有在物理上共享内存[13]。图1举例说明了一个DSM系统，该系统由N个联网的工作站组成，每个工作站都有自己的内存，并通过网络连接起来。DSM软件提供了全局共享内存的抽象，每个处理器都可以访问任何数据项，而程序员不必担心数据在哪里或如何获取。相反，在基于工作站网络的“本地”编程模型中，程序员必须确定处理器何时需要进行通信，与谁进行通信以及要发送什么数据。对于具有复杂数据结构和复杂并行化策略的程序，这可能成为艰巨的任务。在DSM系统上，程序员可以专注于算法开发，而不是管理分区的数据集和数据传输。除了易于编程之外，DSM还提供了与（硬件）共享内存多处理器相同的编程环境，从而允许在两种环境之间进行移植。最后，DSM考虑到在网络环境中无缝集成共享内存的多处理器工作站。本文描述的实际系统TreadMarks [7]，在Unix工作站上以用户级别运行。不需要进行内核修改或使用特权，并且使用标准Unix编译器和链接器。实现DSM系统的挑战在于确保共享内存抽象不会导致大量通信。TreadMarks中使用了多种技术来应对这一挑战，包括lazy release consistency(延迟释放一致性)[6]和多写协议[3]。本文首先会描述TreadMarks提供的应用程序编程接口（第2节），接下来，我们会讨论实现方面的挑战。（第3节）以及用于应对这些挑战的技术（第4和第5节）。我们在第6节中会简要的描述TreadMarks的实现，并通过讨论我们在混合整数编程和遗传连锁分析（第7节）这两个大型应用程序中的经验来证明其效率。最后，我们在第8节中讨论相关工作，并在第9节中提供一些结论和指导，以及进一步的工作。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/arch1.png\" alt=\"图１\"></p>\n<p>　　　　　　　　　　　　　　　　　图１　分布式共享内存</p>\n<h1 id=\"2-共享内存编程（Shared-Memory-Programming）\"><a href=\"#2-共享内存编程（Shared-Memory-Programming）\" class=\"headerlink\" title=\"2 共享内存编程（Shared Memory Programming）\"></a>2 共享内存编程（Shared Memory Programming）</h1><h2 id=\"2-1-应用程序编程接口（Application-Programming-Interface）\"><a href=\"#2-1-应用程序编程接口（Application-Programming-Interface）\" class=\"headerlink\" title=\"2.1 应用程序编程接口（Application Programming Interface）\"></a>2.1 应用程序编程接口（Application Programming Interface）</h2><p>TreadMarks API简洁但功能强大（有关C语言接口，见图2）。它提供了用于进程创建和销毁，同步以及共享内存分配的功能。我们专注于同步原语。 共享内存会引起数据争用。当不同进程以程序员不希望的方式交错对共享变量访问时，就会发生数据竞争。例如，假设一个进程写入共享记录的多个字段，而另一个进程尝试读取这些相同的字段。第二个进程很有可能读取新写入的值，但也有可能在第一个进程写入新值前读取到旧值。通常不希望发生这种情况。 为了避免这种情况，共享内存并行程序包含同步操作。 在这种特殊情况下，将使用锁来允许每个进程对记录的独占访问。</p>\n<p>TreadMarks提供了两种同步原语：barrier(屏障)和exclusive locks(排他锁)。进程通过调用 Tmk barrier() 来等待屏障。屏障是全局的：调用进程会被暂停，直到系统中的所有进程到达同一屏障为止。进程调用Tmk lock来获取锁，然后调用Tmk release来释放锁。当另一个进程持有该锁时，任何进程都无法获取该锁。同步原语的这种特定选择跟TreadMarks的设计没有任何关系；以后可能会增加其他原语。 我们通过两个简单的应用程序演示了这些以及其他TreadMarks原语的用法。</p>\n<h2 id=\"2-2-两个简单的示例（Two-Simple-Illustrations）\"><a href=\"#2-2-两个简单的示例（Two-Simple-Illustrations）\" class=\"headerlink\" title=\"2.2 两个简单的示例（Two Simple Illustrations）\"></a>2.2 两个简单的示例（Two Simple Illustrations）</h2><p>图3和图4说明了TreadMarks API在Jacobi迭代和解决旅行商问题（TSP）中的使用。 我们很清楚这些示例代码的过于简单。 但在这里仅用于演示目的。 实际应用将在第7节中讨论。</p>\n<p>　　Jacobi是一种求解偏微分方程的方法。我们的示例遍历二维数组。在每次迭代期间，每个矩阵元素都会更新为其最近元素的平均值（上方，下方，左侧和右侧）。Jacobi使用临时数组存储每次迭代期间计算的新值，以避免元素的旧值在其被临近元素使用之前覆盖。在并行版本中，为所有处理器分配的数量大致相等的行。 边界上的行由两个相邻进程共享。</p>\n<p>　　图3中的TreadMarks版本使用两个数组：一个网格和一个临时数组。网格的保存在共享内存中，而临时的是每个进程专有的。网格由进程0分配和初始化。Jacobi中的同步是通过屏障实现的。 Tmk barrier(0) 确保在开始计算之前，进程0的初始化对所有进程可见。Tmk barrier(1) 确保所有进程在上一次迭代中完成读取值之前，不会有进程会覆盖网格中的任何值。Tmk barrier(2) 可防止当前迭代计算中的所有网格的值被设置前，没有任何进程可以开始下一次迭代。</p>\n<p>　　旅行商问题（TSP）是查找从指定城市开始，经过地图上所有其他城市恰好一次并返回原始城市的最短路径。使用了一种简单的分支定界算法。每次局部旅行一次就扩展一个城市。如果局部旅行的长度加上路径剩余部分的下限大于当前最短旅行路径的话，则不会在进一步进行局部旅行了，因为他不会导致比当前最短路径更短的路径了。</p>\n<p>　　该程序维护一个局部旅行的列队，保持最短的局部旅行在列队最前面。它不断往列队中添加可能最优的局部旅行，直到从列队的开头开始找到一个比阈值长的路径为止。然后程序将它从列队中移除，并尝试剩余程序的所有排列。最终，它将比较当前路径和包含此路径的最短路径，且如果有必要的话就更新当前最短路径。列队和当前最短路径是共享的，通过锁来保护对他们的访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* the maximum number of parallel processes supported by TreadMarks */</span><br><span class=\"line\">#define TMK_NPROCS</span><br><span class=\"line\">/* the actual number of parallel processes after Tmk_startup */</span><br><span class=\"line\">extern unsigned Tmk_nprocs;</span><br><span class=\"line\">/* the process id, an integer in the range 0 ... Tmk_nprocs - 1 */</span><br><span class=\"line\">extern unsigned Tmk_proc_id;</span><br><span class=\"line\">/* the number of lock synchronization objects provided by TreadMarks */</span><br><span class=\"line\">#define TMK_NLOCKS</span><br><span class=\"line\">/* the number of barrier synchronization objects provided by TreadMarks */</span><br><span class=\"line\">#define TMK_NBARRIERS</span><br><span class=\"line\">/* Initialize TreadMarks and start the remote processes */</span><br><span class=\"line\">void Tmk_startup(argc, argv) int argc; char **argv;</span><br><span class=\"line\">/* Terminate the calling process. Other processes are unaffected. */</span><br><span class=\"line\">void Tmk_exit(status) int status;</span><br><span class=\"line\">/* Block the calling process until every other process arrives at the barrier. */</span><br><span class=\"line\">void Tmk_barrier(id) unsigned id;</span><br><span class=\"line\">/* Block the calling process until it acquires the specified lock. */</span><br><span class=\"line\">void Tmk_lock_acquire(id) unsigned id;</span><br><span class=\"line\">/* Release the specified lock. */</span><br><span class=\"line\">void Tmk_lock_release(id) unsigned id;</span><br><span class=\"line\">/* Allocate the specified number of bytes of shared memory */</span><br><span class=\"line\">char *Tmk_malloc(size) unsigned size;</span><br><span class=\"line\">/* Free shared memory allocated by Tmk_malloc. */</span><br><span class=\"line\">void Tmk_free(ptr) char *ptr;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图 2 TreadMarks C语言接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define M 1024</span><br><span class=\"line\">#define N 1024</span><br><span class=\"line\">float **grid;</span><br><span class=\"line\">float scratch[M][N];</span><br><span class=\"line\"></span><br><span class=\"line\">Tmk_startup();</span><br><span class=\"line\"></span><br><span class=\"line\">if (Tmk_proc_id == 0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grid = Tmk_malloc(M * N * sizeof(float));</span><br><span class=\"line\">    initialize grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tmk_barrier(0);</span><br><span class=\"line\">length = M / Tmk_nprocs;</span><br><span class=\"line\">begin = length * Tmk_proc_id;</span><br><span class=\"line\">end = length * (Tmk_proc_id + 1);</span><br><span class=\"line\">for (number of iterations)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (i = begin; i &lt; end; i++)</span><br><span class=\"line\">        for (j = 0; j &lt; N; j++)</span><br><span class=\"line\">            scratch[i][j] = (grid[i - 1][j] + grid[i + 1][j] +</span><br><span class=\"line\">                             grid[i][j - 1] + grid[i][j + 1]) / 4;</span><br><span class=\"line\">    Tmk_barrier(1);</span><br><span class=\"line\">    for (i = begin; i &lt; end; i++)</span><br><span class=\"line\">        for (j = 0; j &lt; N; j++)</span><br><span class=\"line\">            grid[i][j] = scratch[i][j];</span><br><span class=\"line\">    Tmk_barrier(2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图 3 The TreadMarks Jacobi 程序</p>\n<h1 id=\"实现的挑战（Implementation-Challenges）\"><a href=\"#实现的挑战（Implementation-Challenges）\" class=\"headerlink\" title=\"实现的挑战（Implementation Challenges）\"></a>实现的挑战（Implementation Challenges）</h1><p>提供内存一致性是DSM系统的核心：DSM软件必须以一种提供全局共享内存的方式在处理器之间移动数据。在李的原始IVY系统中[13]，虚拟内存硬件用于维护内存一致性。每个处理器的本地（物理）存储器形成全局虚拟地址空间的高速缓存（请参见图5）。如果一个页面不在本地处理器的内存中，则会产生缺页错误。DSM软件将该页面的最新副本从其远程位置导入本地内存，然后重新启动该过程。例如，图5显示了处理器1发生缺页错误，然后从处理器3的本地内存中复制需要页面的副本。IVY进一步将读取错误与写入错误区分开。发生读取错误时，页面将所有副本以只读方式进行复制，而发生写入错误时，所有现有副本都将无效，并且写的处理器保留唯一副本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue_type *Queue;</span><br><span class=\"line\">int *Shortest_length;</span><br><span class=\"line\">int queue_lock, tour_lock;</span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Tmk_startup();</span><br><span class=\"line\">    queue_lock = 0;</span><br><span class=\"line\">    tour_lock = 1;</span><br><span class=\"line\">    if (Tmk_proc_id == 0)</span><br><span class=\"line\">        Queue = Tmk_malloc(sizeof(queue_type));</span><br><span class=\"line\">    Shortest_length = Tmk_malloc(sizeof(int));</span><br><span class=\"line\">    initialize Heap and Shortest_length</span><br><span class=\"line\">        Tmk_barrier(0);</span><br><span class=\"line\">    Tmk_lock_acquire(queue_lock);</span><br><span class=\"line\">    Exit if queue is empty;</span><br><span class=\"line\">    Keep adding to queue</span><br><span class=\"line\">        until a long,</span><br><span class=\"line\">        promising tour appears at the head;</span><br><span class=\"line\">    Path = Delete the tour from the head;</span><br><span class=\"line\">    Tmk_lock_release(queue_lock);</span><br><span class=\"line\">    length = recursively</span><br><span class=\"line\">    try</span><br><span class=\"line\">        all cities not on Path,</span><br><span class=\"line\">            find the shortest tour length</span><br><span class=\"line\">                Tmk_lock_acquire(tour_lock);</span><br><span class=\"line\">    if (length &lt; *Shortest_length)</span><br><span class=\"line\">        *Shortest_length = length;</span><br><span class=\"line\">    Tmk_lock_release(tour_lock);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图4 The TreadMarks TSP 程序</p>\n<p>　　尽管很简单，但DSM的IVY实现可能产生大量通信。而在工作站网络上通信的成本很高。发送消息可能涉及到进入操作系统内核陷阱，中断，上下文切换以及可能经过多层网络协议的处理。因此，必须保持较少的消息的数量。 我们使用图3和图4的示例来说明IVY中的一些通信问题。</p>\n<p>　　第一个问题与IVY的一致性模型有关，通常称为顺序一致性（sequential consistency） [9]。粗略地说，顺序一致性要求对共享内存的写入对于其他处理器“立即”变为可见。这就是为什么IVY在写入共享内存之前发送无效消息的原因。在许多情况下，顺序一致性提供了过强的保证。 例如，思考下图4中TSP中最佳巡回的更新及其长度。在IVY中，这两个共享内存更新将导致无效信息发送到所有其他的缓存包含这些变量的页面的处理器。 但是，只会在有相应锁保护的临界区内访问这些变量，因此仅将无效发送给获取锁的下一个处理器就足够了，并且仅在获取锁时才发送。</p>\n<p>　　第二个问题涉及到潜在的伪共享的问题。当位于同一个页面的两个或两个以上不相关的数据对象由不同的处理器并发写入时，就会导致伪共享，从而导致该页在处理器之间像乒乓球一样来回移动。由于一致性单元很大（虚拟内存页），所以伪共享是一个潜在的严重问题。图6展示了Jacobi中网格数组可能的页面布局。 当两个处理器都更新其网格数组的一部分时，它们正在同时写入同一页面，并导致该页面在处理器间来回移动多次。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/ivh1.png\" alt=\"图５\"></p>\n<p>　　　　　　　　　　　图５　IVH DSM系统操作</p>\n<h1 id=\"4-懒惰更新释放一致性（Lazy-Release-Consistency）\"><a href=\"#4-懒惰更新释放一致性（Lazy-Release-Consistency）\" class=\"headerlink\" title=\"4 懒惰更新释放一致性（Lazy Release Consistency）\"></a>4 懒惰更新释放一致性（Lazy Release Consistency）</h1><h2 id=\"4-1-释放一致性（Release-Consistency）\"><a href=\"#4-1-释放一致性（Release-Consistency）\" class=\"headerlink\" title=\"4.1 释放一致性（Release Consistency）\"></a>4.1 释放一致性（Release Consistency）</h2><p>释放一致性[5]是一个宽松的内存一致性模型。它不能始终保证一致性。 对共享内存更新的传播可能会延迟一段时间。这样，释放一致性实现可以将多个更新消息合并为单个消息，从而减少消息的数量。但是，通过在某些同步操作中强制执行一致性，至少对于正确同步的程序而言，对程序员屏蔽了潜在的不一致性。我们都在直观层面上讨论这些问题。关于更详细的说明，读者可以参考Gharachorloo 等人的论文</p>\n<p>　　释放一致性的直觉如下。并行程序不应出现数据竞争，因为这会导致不确定的结果。因此，必须充分的使用同步来防止数据竞争。更具体地说，在对共享内存的两个冲突性访问之间必须存在同步（如果两个访问相同的内存位置，并且其中至少一个是写操作，则这两个访问是冲突性的）。由于存在这种同步，因此DSM系统可以延迟发送从一个进程到另一个进程的更新，直到发生这样的同步事件为止，因为只有执行了同步操作，第二个进程才会访问数据。对于没有数据竞争的程序，顺序一致性和释放一致性的结果是相同的。</p>\n<p>　　我们将通过第2节中的Jacobi和TSP示例来说明这个原理。在Jacobi中，执行barrier 1 后才进行写共享内存操作，此时将新计算的值从临时数组复制到网格数组中。执行barrier 2时计算阶段才结束。执行barrier 2是为了避免在所有新值被写入网格数组前进程就开始下一次迭代。不管是什么存储模型，都必须需要barrier来确保正确性。但是，它的存在使我们可以推迟网格数组元素新值的传播，直到遇到更低的barrier。</p>\n<p>　　在TSP中，任务队列是主要的共享数据结构。处理器从队列中获取任务并对其进行处理，也会创建新的任务。 这些新创建的任务将插入队列。任务队列结构的更新需要对共享内存进行一系列的写入，例如其大小，位于队列开头的任务等。原子地对任务队列数据结构进行访问是为了保证程序的正常运行。一次仅允许一个处理器访问任务队列数据结构。这些保证通过在操作前加锁，操作后解锁来实现。因此只有获得锁的进程才能访问数据结构，也无须立即将更新传播给其他进程。这些处理器需要首先获得锁。因此在获得锁的时候传播数据结构的更新就可以了。</p>\n<p>　　这两个示例说明了释放一致性的基本原理。在共享内存的并行程序中引入了同步，以防止进程在同步操作完成之前查看某些内存。由此得出结论，在同步操作完成之前，不必传播那些内存操作的值。相反，顺序一致性会立即更新每个远程内存。 释放一致性需要少得多的消息，并导致更少的消息到达延迟。</p>\n<p>　　程序员不必对此太在意。 如果程序没有数据竞争，则它的行为就好像在普通的共享内存系统上执行一样，其条件是：所有同步都必须使用TreadMarks提供的原语来完成。 否则，TreadMarks无法知道何时应该让共享内存保持一致性。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/false_sharing1.png\" alt=\"图6\"></p>\n<p>　　　　　　　　　　　　图６　Jacobi的伪共享例子</p>\n<h2 id=\"4-2-懒惰更新释放一致性（Lazy-Release-Consistency）\"><a href=\"#4-2-懒惰更新释放一致性（Lazy-Release-Consistency）\" class=\"headerlink\" title=\"4.2 懒惰更新释放一致性（Lazy Release Consistency）\"></a>4.2 懒惰更新释放一致性（Lazy Release Consistency）</h2><p>TreadMarks使用懒惰更新释放一致性算法[6]来实现释放一致性。粗略地说，懒惰更新释放一致性在获取锁时确保一致性，相反的，Munin早期实现的释放一致性在释放锁时实施一致性。懒惰更新释放一致性发送的消息更少。在锁释放时，Munin的释放锁的处理器发送缓存了修改数据的所有其他处理器。比较起来，在懒惰更新释放一致性中，一致性消息仅在锁的最后一个释放者和新获取者之间传播。</p>\n<p>　　懒惰更新释放一致性（lazy release consistency）比急迫更新释放一致性（eager release consistency）更复杂一些。在释放后，Munin可以忘记释放的处理器在释放之前所做的所有修改。懒惰更新释放一致性不是这种情况，因为第三个处理器以后可能会获取锁并需要查看修改。在实践中，我们的经验表明，对于工作站网络而言，发送消息的成本很高，减少消息数量所带来的收益超过了更复杂的实现的成本。</p>\n<h1 id=\"5-多写协议（Multiple-Writer-Protocols）\"><a href=\"#5-多写协议（Multiple-Writer-Protocols）\" class=\"headerlink\" title=\"5 多写协议（Multiple-Writer Protocols）\"></a>5 多写协议（Multiple-Writer Protocols）</h1><p>大多数硬件缓存和DSM系统使用单写程序协议。这些协议允许多个读同时访问同一页面，但是在执行任何修改之前，只允许一个写对页面进行修改。单写程序协议易于实现，因为给定页面的所有副本始终都是相同的，并且始终可以通过从当前具有有效副本的任何其他处理器中获取页面的副本来解决缺页错误。不幸的是，这种简单性通常以牺牲消息流量为代价的。 在写页面之前，所有其他副本都必须无效。如果其页面已失效的处理器仍在访问该页面的数据，这些失效则可能导致随后的访问丢失。</p>\n<p>　　伪共享会由于无关访问之间的干扰而导致单写程序协议的性能更差。DSM系统通常比硬件系统遭遇更多的伪共享，因为它们以虚拟内存页面而不是高速缓存行的粒度跟踪数据访问。</p>\n<p>　　顾名思义，多写协议允许多个写同时修改同一页面，并延后发送保证一致性的消息，尤其是直到同步发生为止</p>\n<p>　　TreadMarks使用虚拟内存硬件来检测对共享内存页面的访问和修改。图7显示了如何使用保护故障（protection faults）来创建差异（diffs）。有效页面最初被写保护。 发生写操作时，TreadMarks会创建虚拟内存页的一个副本，或一个twin（双胞胎），并将其保存在系统空间中。当需要将修改发送到另一个处理器时，则将页面的当前副本与twin逐字比较，并将变化的字节保存到diff数据结构中。一旦创建diff后，twin将被丢弃。 除了处理器第一次访问页面外，其页面副本仅通过应用diff进行更新。 不再需要页面的新完整副本。</p>\n<p>　　使用diff的主要好处是它们可用于实现多写协议，由于diff通常比页面小得多，因此它们还可显着降低总体带宽需求。</p>\n<h1 id=\"６-TreadMarks系统（The-TreadMarks-System）\"><a href=\"#６-TreadMarks系统（The-TreadMarks-System）\" class=\"headerlink\" title=\"６ TreadMarks系统（The TreadMarks System）\"></a>６ TreadMarks系统（The TreadMarks System）</h1><p>TreadMarks完全以Unix上用户库的方式实现的。不需要修改Unix内核，因为现代Unix提供了在用户级别实现TreadMarks所需的所有通信和内存管理功能。用C，C++或者FORTRAN编写的程序可以用这些语言标准的编译器来编译和连接TreadMarks库。该系统是相对便携式的。 当前，它可以在SPARC，DECStation，DEC / Alpha，IBM RS-6000，IBM SP-1和SGI平台以及以太网和ATM网络上运行。 在本节中，我们简要描述如何实现TreadMarks的通信和内存管理。</p>\n<p>　　TreadMarks使用Berkeley套接字接口实现了机器间通信。取决于底层的网络硬件，例如以太网或ATM，TreadMarks使用UDP / IP或AAL3 / 4作为消息传输协议。默认情况下，除非计算机通过ATM LAN连接，否则TreadMarks使用UDP / IP。AAL3 / 4是ATM标准规定的面向连接的最大努力交付协议（best-efforts delivery protocol）。 由于UDP / IP和AAL3 / 4都不保证可靠的传递，因此TreadMarks使用轻量，特定操作的用户级协议来确保消息到达。</p>\n<p>　　TreadMarks发送的每个消息要么是请求消息要么是响应消息。TreadMarks发送的消息可能是显式调用TreadMarks库产生的或者是缺页错误产生的。一旦机器发送了请求消息，它将阻塞直到有一个请求消息或者预期的响应消息到达。为了请求处理的延迟最小化，TreadMarks使用SIGIO信号的处理程序来处理请求。消息到达用于接收请求消息的任何套接字都会产生SIGIO信号。由于AAL3 / 4是面向连接的协议，因此与其他每台机器都有一个相对应的套接字。为了确定哪个套接字处理请求，处理程序将执行select系统调用。处理程序收到请求消息后，将执行指定的操作，发送响应消息，然后返回到中断的进程。</p>\n<p>　　为了实现一致性协议，TreadMarks使用mprotect系统调用来控制对共享页面的访问。尝试在共享页面上执行受限访问都会产生SIGSEGV信号。SIGSEGV信号处理程序检查本地数据结构以确定页面的状态。如果本地副本是只读的，则该处理程序从空闲页面池中分配一个页面，并执行bcopy来创建一个twin。最后，处理程序将访问权限升级到原来的页面并返回。如果本地页面无效，则处理程序执行一个过程（procedure）通过从最少的远程计算机集中获取对共享内存的必要更新。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/diff1.png\" alt=\"图7\"></p>\n<p>　　　　　　　　　　　　图７　DiffCreation</p>\n<h1 id=\"7-应用（Applications）\"><a href=\"#7-应用（Applications）\" class=\"headerlink\" title=\"7 应用（Applications）\"></a>7 应用（Applications）</h1><p>使用TreadMarks已实现了许多应用程序，并且一些基准测试的性能已在之前进行了报道[7]。在这里，我们描述最近使用TreadMarks实现的两个大型应用程序的经验。在本文作者的帮助下，顺序执行代码的作者将混合整数编程（mixed integer programming）和遗传连锁分析（genetic linkage analysis）这些应用程序从现有的顺序代码进行了并行处理。虽然很难量化所涉及的工作量，但已经证明为获得有效的并行代码而进行的修改的工作量相对很小，这将在本节的其余部分中演示。</p>\n<h2 id=\"7-1-混合整数编程（Mixed-Integer-Programming）\"><a href=\"#7-1-混合整数编程（Mixed-Integer-Programming）\" class=\"headerlink\" title=\"7.1 混合整数编程（Mixed Integer Programming）\"></a>7.1 混合整数编程（Mixed Integer Programming）</h2><p>混合整数编程（MIP）是线性编程（LP）的一个版本。在LP中，在由一组线性不等式描述的区域中优化了目标函数。在MIP中，部分或全部变量被约束为只能用整数值（有时仅是0或1）。 图8显示了一个精确的数学公式，图9显示了一个简单的二维实例。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip3.png\" alt=\"图8\"></p>\n<p>　　　　　　　　　　　　　　图 8 混合整数编程问题(MIP) </p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip_two1.png\" alt=\"图9\"></p>\n<p>​    　　　　　　　　　　　　　　　图 9 MIP二维实例</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/branch_and_bound_mip2.png\" alt=\"图１０\"></p>\n<p>　　　　　　　　　　　　　　　　　图10 解决MIP问题的分支界定法</p>\n<p>　　Lee等人实现了用于解决MIP问题的TreadMarks代码 [11]。该代码使用分支剪切法。首先将MIP问题简化为相应的LP问题。通常，这个LP问题的解决方案将为某些约束为整数的变量产生非整数值。下一步是选择这些变量中的一个，并分支出两个新的LP问题，一个问题具有 $x_{i} =  \\left \\lfloor x_{i} \\right \\rfloor$ 的附加约束，另一个具有 $x_{i} =  \\left \\lceil x_{i} \\right \\rceil$ 的附加约束（见图10）。慢慢地，该算法会生成此类分支的树。找到解决方案后，此解决方案便会在解决方案上建立界限。分支中的LP问题的解决方案产生的结果低于此边界则无需再进入下一步了。为了加快此过程，该算法使用一种称为<code>plunging</code>的技术，本质上是对树进行深度优先搜索，以找到整数解并尽快建立边界。最后一种感兴趣的改进的算法是<code>cutting planes</code>的使用。 这些是添加到LP问题的附加约束，以加强对整数问题的描述。</p>\n<p>　　该代码用于解决MIPLIB库中的所有51个问题。该库包括航空人员调度，网络流量，工厂位置，机队调度等方面的代表性示例。图11显示了在8台运行Ultrix 4.3且通过100Mbps Fore ATM交换机连接的DecStation-5000 / 240机器的网络上获得的加速，这些问题的顺序运行时间超过2,000秒。对于大多数问题，加速几乎是线性的。 一个问题表现为超线性加速，这是因为并行代码命中了前期运行的解决方案，从而裁剪掉了大多数分枝定界树。对于另一个问题，几乎没有加速，因为在预处理步骤之后不久就找到了解决方案，此时还没有进行并行化。除了MIPLIB库中的问题外，该代码还可用于解决以前无法解决的多商品流问题[2]。 该问题在具有8个处理器的IBM SP-上花费的CPU时间为30天，并且还表现出接近线性的加速。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/miplib2.png\" alt=\"图１１\"></p>\n<p>　　　　　　　　　　　　　图11 MIPLIB库的结果</p>\n<h2 id=\"7-2-遗传连锁（Genetic-Linkage）\"><a href=\"#7-2-遗传连锁（Genetic-Linkage）\" class=\"headerlink\" title=\"7.2 遗传连锁（Genetic Linkage）\"></a>7.2 遗传连锁（Genetic Linkage）</h2><p>遗传连锁分析是一种统计技术，使用家族谱系信息来绘制人类基因图谱并在人类基因组中定位疾病基因。生物学和遗传学的最新进展已提供了大量可用的遗传材料，使计算成为进一步研究的瓶颈。</p>\n<p>　　在Mendelian经典的继承理论中，孩子的染色体接收父母一方每个染色体的一条链。考虑重组时，情况会有所不同。如果发生重组，则孩子的染色体链将包含父母染色体的每一条链中的每一条（见图12）。连锁分析的目的是推导我们寻找的基因与已知位置的基因之间发生重组的概率。 从这些概率可以计算出基因在染色体上的大概位置。</p>\n<p>　　ILINK [4]是广泛使用的遗传连锁分析程序的一个并行版本，它是LINKAGE [10]程序包的一部分。ILINK将称为谱系的家谱作为输入，并增加了有关该家族成员的一些遗传信息。它计算重组概率θ的最大似然估计。从最上层来看，ILINK由一个优化θ的循环组成。在优化循环的每次迭代中，程序遍历整个谱系，一次遍历一个核心家庭，在已知家庭成员的遗传信息的情况下，计算当前θ的可能性。对于核心家庭的每个成员，该算法都会更新一系列条件概率，这些条件概率表示个体具有特定遗传特征的概率，其条件取决于θ和已经遍历的部分家谱。</p>\n<p>　　通过以均衡负载的方式在可用处理器之间分配每个核心家庭的迭代空间，可以并行化上述算法。负载均衡是必不可少的，且依赖于阵列元素中表示的遗传信息的知识。另一个方式是拆分树，它未能产生良好的加速效果，因为大多数计算都发生在树的一小部分上（通常，这些节点靠近树的根部，他们表示已知遗传信息很少的已故者）。另外，无法并行评估不同的θ值，因为优化程序会从一个θ值顺序移至下一个θ值。</p>\n<p>　　图13显示了使用ILINK为各种数据集获得的加速。数据集来自对真实的疾病基因定位的研究。对于运行时间较长的数据集，可以实现良好的加速。 对于最小的数据集BAD，由于通信与计算的比率变大，因此加速要少得多。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/dna1.png\" alt=\"图12\"></p>\n<p>　　　　　　　　　　　　　　图12 DNA重组</p>\n<h1 id=\"8-相关工作（Related-Work）\"><a href=\"#8-相关工作（Related-Work）\" class=\"headerlink\" title=\"8 相关工作（Related Work）\"></a>8 相关工作（Related Work）</h1><p>本节的目标不是进行广泛的并行编程研究，而是以一个独特的示例说明替代性方案，并将最终的系统与TreadMarks进行比较。</p>\n<p>消息传递（PVM）。 当前，消息传递是分布式存储系统的主要编程范例。便携式虚拟机（PVM）[15]是一种流行的消息传递软件。它允许将异构的计算机网络视为单个并发计算引擎。尽管PVM中的编程比底层机器的本机消息传递范例中的编程容易得多，并且可移植性强，但是应用程序程序员仍然需要编写代码来显式交换消息。TreadMarks的目标是减轻程序员的负担。 对于具有复杂数据结构和复杂并行化策略的程序，我们认为这是一个主要优势。</p>\n<p>隐式并行（HPF）。 如HPF [8]中所示，隐式并行性依赖于用户提供的数据分布，编译器随后使用这些数据分布来生成消息传递代码。这种方法适用于数据并行程序，例如Jacobi。 动态并行性的程序，例如TSP，ILINK或MIP，很难在HPF框架中表达。</p>\n<p>面向对象的并行计算（Orca）。Orca [16]和其他面向对象的并行计算系统一样没有为程序员提供共享的存储空间，而是支持对象的共享空间，每个对象都可以通过适当同步的方法进行访问。除了从编程的角度来看的优点之外，这种方法还允许编译器推断出某些优化方法，这些优化方法可用于减少通信量。缺点是，顺序程序中“自然”的对象通常不是正确的并行化对象，需要更多的更改才能获得有效的并行程序</p>\n<p>硬件共享内存实现（DASH）。 另一种方法是在硬件中实现共享内存，对少量处理器使用侦听总线协议，或对大量处理器使用基于目录的协议（例如[12]）。我们使用这种方法来共享编程模型，但是我们的实现避免了昂贵的缓存控制器硬件。 另一方面，硬件实现可以有效地支持具有更细粒度并行性的应用程序。</p>\n<p>条目一致性（Entry Consistency）（中途）。 条目一致性是另一种宽松的内存模型[1]。它要求所有共享数据都与同步对象相关联。当获取同步对象时，只传输与该同步对象关联的修改后的数据，从而进一步减少通信数据量。但是，条目一致性内存模型比释放一致性弱，这可能会使编程更加困难。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/ilink.png\" alt=\"图13\"></p>\n<p>　　　　　　　　　　　　　　　图13 ILINK结果　</p>\n<h1 id=\"9-总结和下一步工作（Conclusions-and-Further-Work）\"><a href=\"#9-总结和下一步工作（Conclusions-and-Further-Work）\" class=\"headerlink\" title=\"9 总结和下一步工作（Conclusions and Further Work）\"></a>9 总结和下一步工作（Conclusions and Further Work）</h1><p>我们的经验表明，使用适当的实现技术，分布式共享内存可以为工作站网络上的并行计算提供有效的平台。多数应用程序移植到TreadMarks分布式共享内存系统上，几乎没有困难，并且性能良好。在下一步的工作中，我们打算尝试其他实际应用，包括地震建模代码。我们还在开发各种工具，以进一步减轻编程负担并提高性能。特别是，我们正在研究使用诸如支持预取的编译器，以及使用性能监视工具来消除不必要的同步。</p>\n<h1 id=\"引用（References）\"><a href=\"#引用（References）\" class=\"headerlink\" title=\"引用（References）\"></a>引用（References）</h1><p>[1] B.N. Bershad, M.J. Zekauskas, and W.A. Sawdon. The Midway distributed shared memory system. In Proceedings of the ‘93 CompCon Conference, pages 528-537, February 1993.<br>[2] D. Bienstock and O. Gumluk. Computational experience with a difficult mixed-integer multi-commodity  flow problem. To appear in Mathematical Programming, 1994.<br>[3] J.B. Carter, J.K. Bennett, and W. Zwaenepoel. Implementation and performance of Munin. In Proceedings of the 13th ACM Symposium on Operating Systems Principles, pages 152-164, October 1991.<br>[4] S. Dwarkadas, A.A. Schäffer, R.W. Cottingham Jr., A.L. Cox, P. Keleher, and W. Zwaenepoel. Parallelization of general linkage analysis problems. Human Heredity, 44:127-141, 1994.<br>[5] K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. Memory consistency and event ordering in scalable shared-memory multiprocessors. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 15-26, May 1990.<br>[6] P. Keleher, A. L. Cox, and W. Zwaenepoel. Lazy release consistency for software distributed shared memory. In Proceedings of the 19th Annual International Symposium on Computer Architecture, pages 13-21, May 1992.<br>[7] P. Keleher, S. Dwarkadas, A. Cox, and W. Zwaenepoel. Treadmarks: Distributed shared memory on standard workstations and operating systems. In Proceedings of the 1994 Winter Usenix Conference, pages 115-131, January 1994.<br>[8] C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. The High Performance Fortran Handbook. The MIT Press, 1994.<br>[9] L. Lamport. How to make a multiprocessor computer that correctly executes multiprocess programs. IEEE Transactions on Computers, C-28(9):690{691, September 1979.<br>[10] G. M. Lathrop, J. M. Lalouel, C. Julier, and J. Ott. Strategies for multilocus linkage analysis in humans. Proc. Natl. Acad. Sci. USA, 81:3443-3446, June 1984.<br>[11] E. Lee, R. Bixby, W. Cook, and A.L. Cox. Parallelism in mixed integer programming. Sub\u0002mitted for publication, 1994.<br>[12] D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. The directory-based cache coherence protocol for the DASH multiprocessor. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 148-159, May 1990.<br>[13] K. Li and P. Hudak. Memory coherence in shared virtual memory systems. ACM Transactions on Computer Systems, 7(4):321-359, November 1989.<br>[14] M. Litzkow, M. Livny, and M. Mutka. Condor - a hunter of idle workstations. In Proceedings of the 8th International Conference on Distributed Computing Systems, pages 104-111, June 1988.<br>[15] V. Sunderam. PVM: A framework for parallel distributed computing. Concurrency:Practice and Experience, 2(4):315-339, December 1990.<br>[16] A.S. Tanenbaum, M.F. Kaashoek, and H.E. Bal. Parallel programming using shared ob jects and broadcasting. IEEE Computer, 25(8):10-20, August 1992.<br>[17] A.S. Tanenbaum, R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, J. Jansen, and G. van Rossum. Experiences with the Amoeba distributed operating system. Communications of the ACM, 33(12):46-63, December 1990.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>TreadMarks: 基于工作站网络的共享内存计算","more":"</p>\n</blockquote>\n<p>　　　　　　论文: TreadMarks: Shared Memory Computing on Networks of Workstations</p>\n<p>　　　　　　　Christiana Amza, Alan L. Cox, Sandhya Dwarkadas, Pete Keleher,<br>　　　　　　　Honghui Lu, Ramakrishnan Ra jamony, Weimin Yu and Willy Zwaenepoel<br>　　　　　　　　　　　　　Department of Computer Science<br>　　　　　　　　　　　　　　　　Rice University    </p>\n<h1 id=\"摘要（Abstract）\"><a href=\"#摘要（Abstract）\" class=\"headerlink\" title=\"摘要（Abstract）\"></a>摘要（Abstract）</h1><p>TreadMarks通过为应用程序提供共享的内存抽象来支持基于工作站网络上的并行计算。共享内存有助于从顺序程序转换成并行程序，因为大多数数据结构都可无需做更改。 只需要添加同步操作。 我们会讨论TreadMarks中用于提供有效的共享内存技术，并讨论了两个主要应用程序的经验，即混合整数编程和遗传连锁分析。</p>\n<h1 id=\"1-介绍（-Introduction）\"><a href=\"#1-介绍（-Introduction）\" class=\"headerlink\" title=\"1 介绍（ Introduction）\"></a>1 介绍（ Introduction）</h1><p>高速网络和快速提高的微处理器性能使工作站的网络成为越来越有吸引力的并行计算工具。通过仅仅依靠廉价硬件和软件，工作站网络可以以相对较低的成本提供并行处理。可以将工作站网络的多处理器实现成处理器组[17]，这是许多专用于提供计算周期的处理器。或者，它也可以由一组动态变化的机器组成，在这些机器上利用空闲周期执行长时间运行的计算[14]。在后一种情况下，（硬件）成本基本上为零，因为许多组织机构已经拥有广泛的工作站网络。在性能方面，处理器速度，网络带宽和延迟的改进使联网的工作站能够为越来越多的应用程序提供接近或超过超级计算机的性能。我们的立场不是让这种松耦合的多处理器设计使更紧密耦合的设计过时。<br>尤其是，更低延迟和更高带宽的这些紧耦合的设计能有效执行对同步和通信要求更加严格的应用程序。但是，我们认为网络技术和处理器性能的进步将极大地扩展可以在工作站网络上有效执行的应用程序的种类。</p>\n<p>　　在论文中，我们会讨论使用TreadMarks分布式共享内存（DSM）系统在工作站网络上进行并行计算的经验。DSM允许进程假定全局共享的虚拟内存，即使它们运行的节点并没有在物理上共享内存[13]。图1举例说明了一个DSM系统，该系统由N个联网的工作站组成，每个工作站都有自己的内存，并通过网络连接起来。DSM软件提供了全局共享内存的抽象，每个处理器都可以访问任何数据项，而程序员不必担心数据在哪里或如何获取。相反，在基于工作站网络的“本地”编程模型中，程序员必须确定处理器何时需要进行通信，与谁进行通信以及要发送什么数据。对于具有复杂数据结构和复杂并行化策略的程序，这可能成为艰巨的任务。在DSM系统上，程序员可以专注于算法开发，而不是管理分区的数据集和数据传输。除了易于编程之外，DSM还提供了与（硬件）共享内存多处理器相同的编程环境，从而允许在两种环境之间进行移植。最后，DSM考虑到在网络环境中无缝集成共享内存的多处理器工作站。本文描述的实际系统TreadMarks [7]，在Unix工作站上以用户级别运行。不需要进行内核修改或使用特权，并且使用标准Unix编译器和链接器。实现DSM系统的挑战在于确保共享内存抽象不会导致大量通信。TreadMarks中使用了多种技术来应对这一挑战，包括lazy release consistency(延迟释放一致性)[6]和多写协议[3]。本文首先会描述TreadMarks提供的应用程序编程接口（第2节），接下来，我们会讨论实现方面的挑战。（第3节）以及用于应对这些挑战的技术（第4和第5节）。我们在第6节中会简要的描述TreadMarks的实现，并通过讨论我们在混合整数编程和遗传连锁分析（第7节）这两个大型应用程序中的经验来证明其效率。最后，我们在第8节中讨论相关工作，并在第9节中提供一些结论和指导，以及进一步的工作。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/arch1.png\" alt=\"图１\"></p>\n<p>　　　　　　　　　　　　　　　　　图１　分布式共享内存</p>\n<h1 id=\"2-共享内存编程（Shared-Memory-Programming）\"><a href=\"#2-共享内存编程（Shared-Memory-Programming）\" class=\"headerlink\" title=\"2 共享内存编程（Shared Memory Programming）\"></a>2 共享内存编程（Shared Memory Programming）</h1><h2 id=\"2-1-应用程序编程接口（Application-Programming-Interface）\"><a href=\"#2-1-应用程序编程接口（Application-Programming-Interface）\" class=\"headerlink\" title=\"2.1 应用程序编程接口（Application Programming Interface）\"></a>2.1 应用程序编程接口（Application Programming Interface）</h2><p>TreadMarks API简洁但功能强大（有关C语言接口，见图2）。它提供了用于进程创建和销毁，同步以及共享内存分配的功能。我们专注于同步原语。 共享内存会引起数据争用。当不同进程以程序员不希望的方式交错对共享变量访问时，就会发生数据竞争。例如，假设一个进程写入共享记录的多个字段，而另一个进程尝试读取这些相同的字段。第二个进程很有可能读取新写入的值，但也有可能在第一个进程写入新值前读取到旧值。通常不希望发生这种情况。 为了避免这种情况，共享内存并行程序包含同步操作。 在这种特殊情况下，将使用锁来允许每个进程对记录的独占访问。</p>\n<p>TreadMarks提供了两种同步原语：barrier(屏障)和exclusive locks(排他锁)。进程通过调用 Tmk barrier() 来等待屏障。屏障是全局的：调用进程会被暂停，直到系统中的所有进程到达同一屏障为止。进程调用Tmk lock来获取锁，然后调用Tmk release来释放锁。当另一个进程持有该锁时，任何进程都无法获取该锁。同步原语的这种特定选择跟TreadMarks的设计没有任何关系；以后可能会增加其他原语。 我们通过两个简单的应用程序演示了这些以及其他TreadMarks原语的用法。</p>\n<h2 id=\"2-2-两个简单的示例（Two-Simple-Illustrations）\"><a href=\"#2-2-两个简单的示例（Two-Simple-Illustrations）\" class=\"headerlink\" title=\"2.2 两个简单的示例（Two Simple Illustrations）\"></a>2.2 两个简单的示例（Two Simple Illustrations）</h2><p>图3和图4说明了TreadMarks API在Jacobi迭代和解决旅行商问题（TSP）中的使用。 我们很清楚这些示例代码的过于简单。 但在这里仅用于演示目的。 实际应用将在第7节中讨论。</p>\n<p>　　Jacobi是一种求解偏微分方程的方法。我们的示例遍历二维数组。在每次迭代期间，每个矩阵元素都会更新为其最近元素的平均值（上方，下方，左侧和右侧）。Jacobi使用临时数组存储每次迭代期间计算的新值，以避免元素的旧值在其被临近元素使用之前覆盖。在并行版本中，为所有处理器分配的数量大致相等的行。 边界上的行由两个相邻进程共享。</p>\n<p>　　图3中的TreadMarks版本使用两个数组：一个网格和一个临时数组。网格的保存在共享内存中，而临时的是每个进程专有的。网格由进程0分配和初始化。Jacobi中的同步是通过屏障实现的。 Tmk barrier(0) 确保在开始计算之前，进程0的初始化对所有进程可见。Tmk barrier(1) 确保所有进程在上一次迭代中完成读取值之前，不会有进程会覆盖网格中的任何值。Tmk barrier(2) 可防止当前迭代计算中的所有网格的值被设置前，没有任何进程可以开始下一次迭代。</p>\n<p>　　旅行商问题（TSP）是查找从指定城市开始，经过地图上所有其他城市恰好一次并返回原始城市的最短路径。使用了一种简单的分支定界算法。每次局部旅行一次就扩展一个城市。如果局部旅行的长度加上路径剩余部分的下限大于当前最短旅行路径的话，则不会在进一步进行局部旅行了，因为他不会导致比当前最短路径更短的路径了。</p>\n<p>　　该程序维护一个局部旅行的列队，保持最短的局部旅行在列队最前面。它不断往列队中添加可能最优的局部旅行，直到从列队的开头开始找到一个比阈值长的路径为止。然后程序将它从列队中移除，并尝试剩余程序的所有排列。最终，它将比较当前路径和包含此路径的最短路径，且如果有必要的话就更新当前最短路径。列队和当前最短路径是共享的，通过锁来保护对他们的访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* the maximum number of parallel processes supported by TreadMarks */</span><br><span class=\"line\">#define TMK_NPROCS</span><br><span class=\"line\">/* the actual number of parallel processes after Tmk_startup */</span><br><span class=\"line\">extern unsigned Tmk_nprocs;</span><br><span class=\"line\">/* the process id, an integer in the range 0 ... Tmk_nprocs - 1 */</span><br><span class=\"line\">extern unsigned Tmk_proc_id;</span><br><span class=\"line\">/* the number of lock synchronization objects provided by TreadMarks */</span><br><span class=\"line\">#define TMK_NLOCKS</span><br><span class=\"line\">/* the number of barrier synchronization objects provided by TreadMarks */</span><br><span class=\"line\">#define TMK_NBARRIERS</span><br><span class=\"line\">/* Initialize TreadMarks and start the remote processes */</span><br><span class=\"line\">void Tmk_startup(argc, argv) int argc; char **argv;</span><br><span class=\"line\">/* Terminate the calling process. Other processes are unaffected. */</span><br><span class=\"line\">void Tmk_exit(status) int status;</span><br><span class=\"line\">/* Block the calling process until every other process arrives at the barrier. */</span><br><span class=\"line\">void Tmk_barrier(id) unsigned id;</span><br><span class=\"line\">/* Block the calling process until it acquires the specified lock. */</span><br><span class=\"line\">void Tmk_lock_acquire(id) unsigned id;</span><br><span class=\"line\">/* Release the specified lock. */</span><br><span class=\"line\">void Tmk_lock_release(id) unsigned id;</span><br><span class=\"line\">/* Allocate the specified number of bytes of shared memory */</span><br><span class=\"line\">char *Tmk_malloc(size) unsigned size;</span><br><span class=\"line\">/* Free shared memory allocated by Tmk_malloc. */</span><br><span class=\"line\">void Tmk_free(ptr) char *ptr;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图 2 TreadMarks C语言接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define M 1024</span><br><span class=\"line\">#define N 1024</span><br><span class=\"line\">float **grid;</span><br><span class=\"line\">float scratch[M][N];</span><br><span class=\"line\"></span><br><span class=\"line\">Tmk_startup();</span><br><span class=\"line\"></span><br><span class=\"line\">if (Tmk_proc_id == 0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grid = Tmk_malloc(M * N * sizeof(float));</span><br><span class=\"line\">    initialize grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tmk_barrier(0);</span><br><span class=\"line\">length = M / Tmk_nprocs;</span><br><span class=\"line\">begin = length * Tmk_proc_id;</span><br><span class=\"line\">end = length * (Tmk_proc_id + 1);</span><br><span class=\"line\">for (number of iterations)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (i = begin; i &lt; end; i++)</span><br><span class=\"line\">        for (j = 0; j &lt; N; j++)</span><br><span class=\"line\">            scratch[i][j] = (grid[i - 1][j] + grid[i + 1][j] +</span><br><span class=\"line\">                             grid[i][j - 1] + grid[i][j + 1]) / 4;</span><br><span class=\"line\">    Tmk_barrier(1);</span><br><span class=\"line\">    for (i = begin; i &lt; end; i++)</span><br><span class=\"line\">        for (j = 0; j &lt; N; j++)</span><br><span class=\"line\">            grid[i][j] = scratch[i][j];</span><br><span class=\"line\">    Tmk_barrier(2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图 3 The TreadMarks Jacobi 程序</p>\n<h1 id=\"实现的挑战（Implementation-Challenges）\"><a href=\"#实现的挑战（Implementation-Challenges）\" class=\"headerlink\" title=\"实现的挑战（Implementation Challenges）\"></a>实现的挑战（Implementation Challenges）</h1><p>提供内存一致性是DSM系统的核心：DSM软件必须以一种提供全局共享内存的方式在处理器之间移动数据。在李的原始IVY系统中[13]，虚拟内存硬件用于维护内存一致性。每个处理器的本地（物理）存储器形成全局虚拟地址空间的高速缓存（请参见图5）。如果一个页面不在本地处理器的内存中，则会产生缺页错误。DSM软件将该页面的最新副本从其远程位置导入本地内存，然后重新启动该过程。例如，图5显示了处理器1发生缺页错误，然后从处理器3的本地内存中复制需要页面的副本。IVY进一步将读取错误与写入错误区分开。发生读取错误时，页面将所有副本以只读方式进行复制，而发生写入错误时，所有现有副本都将无效，并且写的处理器保留唯一副本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue_type *Queue;</span><br><span class=\"line\">int *Shortest_length;</span><br><span class=\"line\">int queue_lock, tour_lock;</span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Tmk_startup();</span><br><span class=\"line\">    queue_lock = 0;</span><br><span class=\"line\">    tour_lock = 1;</span><br><span class=\"line\">    if (Tmk_proc_id == 0)</span><br><span class=\"line\">        Queue = Tmk_malloc(sizeof(queue_type));</span><br><span class=\"line\">    Shortest_length = Tmk_malloc(sizeof(int));</span><br><span class=\"line\">    initialize Heap and Shortest_length</span><br><span class=\"line\">        Tmk_barrier(0);</span><br><span class=\"line\">    Tmk_lock_acquire(queue_lock);</span><br><span class=\"line\">    Exit if queue is empty;</span><br><span class=\"line\">    Keep adding to queue</span><br><span class=\"line\">        until a long,</span><br><span class=\"line\">        promising tour appears at the head;</span><br><span class=\"line\">    Path = Delete the tour from the head;</span><br><span class=\"line\">    Tmk_lock_release(queue_lock);</span><br><span class=\"line\">    length = recursively</span><br><span class=\"line\">    try</span><br><span class=\"line\">        all cities not on Path,</span><br><span class=\"line\">            find the shortest tour length</span><br><span class=\"line\">                Tmk_lock_acquire(tour_lock);</span><br><span class=\"line\">    if (length &lt; *Shortest_length)</span><br><span class=\"line\">        *Shortest_length = length;</span><br><span class=\"line\">    Tmk_lock_release(tour_lock);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　　　　　　　　图4 The TreadMarks TSP 程序</p>\n<p>　　尽管很简单，但DSM的IVY实现可能产生大量通信。而在工作站网络上通信的成本很高。发送消息可能涉及到进入操作系统内核陷阱，中断，上下文切换以及可能经过多层网络协议的处理。因此，必须保持较少的消息的数量。 我们使用图3和图4的示例来说明IVY中的一些通信问题。</p>\n<p>　　第一个问题与IVY的一致性模型有关，通常称为顺序一致性（sequential consistency） [9]。粗略地说，顺序一致性要求对共享内存的写入对于其他处理器“立即”变为可见。这就是为什么IVY在写入共享内存之前发送无效消息的原因。在许多情况下，顺序一致性提供了过强的保证。 例如，思考下图4中TSP中最佳巡回的更新及其长度。在IVY中，这两个共享内存更新将导致无效信息发送到所有其他的缓存包含这些变量的页面的处理器。 但是，只会在有相应锁保护的临界区内访问这些变量，因此仅将无效发送给获取锁的下一个处理器就足够了，并且仅在获取锁时才发送。</p>\n<p>　　第二个问题涉及到潜在的伪共享的问题。当位于同一个页面的两个或两个以上不相关的数据对象由不同的处理器并发写入时，就会导致伪共享，从而导致该页在处理器之间像乒乓球一样来回移动。由于一致性单元很大（虚拟内存页），所以伪共享是一个潜在的严重问题。图6展示了Jacobi中网格数组可能的页面布局。 当两个处理器都更新其网格数组的一部分时，它们正在同时写入同一页面，并导致该页面在处理器间来回移动多次。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/ivh1.png\" alt=\"图５\"></p>\n<p>　　　　　　　　　　　图５　IVH DSM系统操作</p>\n<h1 id=\"4-懒惰更新释放一致性（Lazy-Release-Consistency）\"><a href=\"#4-懒惰更新释放一致性（Lazy-Release-Consistency）\" class=\"headerlink\" title=\"4 懒惰更新释放一致性（Lazy Release Consistency）\"></a>4 懒惰更新释放一致性（Lazy Release Consistency）</h1><h2 id=\"4-1-释放一致性（Release-Consistency）\"><a href=\"#4-1-释放一致性（Release-Consistency）\" class=\"headerlink\" title=\"4.1 释放一致性（Release Consistency）\"></a>4.1 释放一致性（Release Consistency）</h2><p>释放一致性[5]是一个宽松的内存一致性模型。它不能始终保证一致性。 对共享内存更新的传播可能会延迟一段时间。这样，释放一致性实现可以将多个更新消息合并为单个消息，从而减少消息的数量。但是，通过在某些同步操作中强制执行一致性，至少对于正确同步的程序而言，对程序员屏蔽了潜在的不一致性。我们都在直观层面上讨论这些问题。关于更详细的说明，读者可以参考Gharachorloo 等人的论文</p>\n<p>　　释放一致性的直觉如下。并行程序不应出现数据竞争，因为这会导致不确定的结果。因此，必须充分的使用同步来防止数据竞争。更具体地说，在对共享内存的两个冲突性访问之间必须存在同步（如果两个访问相同的内存位置，并且其中至少一个是写操作，则这两个访问是冲突性的）。由于存在这种同步，因此DSM系统可以延迟发送从一个进程到另一个进程的更新，直到发生这样的同步事件为止，因为只有执行了同步操作，第二个进程才会访问数据。对于没有数据竞争的程序，顺序一致性和释放一致性的结果是相同的。</p>\n<p>　　我们将通过第2节中的Jacobi和TSP示例来说明这个原理。在Jacobi中，执行barrier 1 后才进行写共享内存操作，此时将新计算的值从临时数组复制到网格数组中。执行barrier 2时计算阶段才结束。执行barrier 2是为了避免在所有新值被写入网格数组前进程就开始下一次迭代。不管是什么存储模型，都必须需要barrier来确保正确性。但是，它的存在使我们可以推迟网格数组元素新值的传播，直到遇到更低的barrier。</p>\n<p>　　在TSP中，任务队列是主要的共享数据结构。处理器从队列中获取任务并对其进行处理，也会创建新的任务。 这些新创建的任务将插入队列。任务队列结构的更新需要对共享内存进行一系列的写入，例如其大小，位于队列开头的任务等。原子地对任务队列数据结构进行访问是为了保证程序的正常运行。一次仅允许一个处理器访问任务队列数据结构。这些保证通过在操作前加锁，操作后解锁来实现。因此只有获得锁的进程才能访问数据结构，也无须立即将更新传播给其他进程。这些处理器需要首先获得锁。因此在获得锁的时候传播数据结构的更新就可以了。</p>\n<p>　　这两个示例说明了释放一致性的基本原理。在共享内存的并行程序中引入了同步，以防止进程在同步操作完成之前查看某些内存。由此得出结论，在同步操作完成之前，不必传播那些内存操作的值。相反，顺序一致性会立即更新每个远程内存。 释放一致性需要少得多的消息，并导致更少的消息到达延迟。</p>\n<p>　　程序员不必对此太在意。 如果程序没有数据竞争，则它的行为就好像在普通的共享内存系统上执行一样，其条件是：所有同步都必须使用TreadMarks提供的原语来完成。 否则，TreadMarks无法知道何时应该让共享内存保持一致性。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/false_sharing1.png\" alt=\"图6\"></p>\n<p>　　　　　　　　　　　　图６　Jacobi的伪共享例子</p>\n<h2 id=\"4-2-懒惰更新释放一致性（Lazy-Release-Consistency）\"><a href=\"#4-2-懒惰更新释放一致性（Lazy-Release-Consistency）\" class=\"headerlink\" title=\"4.2 懒惰更新释放一致性（Lazy Release Consistency）\"></a>4.2 懒惰更新释放一致性（Lazy Release Consistency）</h2><p>TreadMarks使用懒惰更新释放一致性算法[6]来实现释放一致性。粗略地说，懒惰更新释放一致性在获取锁时确保一致性，相反的，Munin早期实现的释放一致性在释放锁时实施一致性。懒惰更新释放一致性发送的消息更少。在锁释放时，Munin的释放锁的处理器发送缓存了修改数据的所有其他处理器。比较起来，在懒惰更新释放一致性中，一致性消息仅在锁的最后一个释放者和新获取者之间传播。</p>\n<p>　　懒惰更新释放一致性（lazy release consistency）比急迫更新释放一致性（eager release consistency）更复杂一些。在释放后，Munin可以忘记释放的处理器在释放之前所做的所有修改。懒惰更新释放一致性不是这种情况，因为第三个处理器以后可能会获取锁并需要查看修改。在实践中，我们的经验表明，对于工作站网络而言，发送消息的成本很高，减少消息数量所带来的收益超过了更复杂的实现的成本。</p>\n<h1 id=\"5-多写协议（Multiple-Writer-Protocols）\"><a href=\"#5-多写协议（Multiple-Writer-Protocols）\" class=\"headerlink\" title=\"5 多写协议（Multiple-Writer Protocols）\"></a>5 多写协议（Multiple-Writer Protocols）</h1><p>大多数硬件缓存和DSM系统使用单写程序协议。这些协议允许多个读同时访问同一页面，但是在执行任何修改之前，只允许一个写对页面进行修改。单写程序协议易于实现，因为给定页面的所有副本始终都是相同的，并且始终可以通过从当前具有有效副本的任何其他处理器中获取页面的副本来解决缺页错误。不幸的是，这种简单性通常以牺牲消息流量为代价的。 在写页面之前，所有其他副本都必须无效。如果其页面已失效的处理器仍在访问该页面的数据，这些失效则可能导致随后的访问丢失。</p>\n<p>　　伪共享会由于无关访问之间的干扰而导致单写程序协议的性能更差。DSM系统通常比硬件系统遭遇更多的伪共享，因为它们以虚拟内存页面而不是高速缓存行的粒度跟踪数据访问。</p>\n<p>　　顾名思义，多写协议允许多个写同时修改同一页面，并延后发送保证一致性的消息，尤其是直到同步发生为止</p>\n<p>　　TreadMarks使用虚拟内存硬件来检测对共享内存页面的访问和修改。图7显示了如何使用保护故障（protection faults）来创建差异（diffs）。有效页面最初被写保护。 发生写操作时，TreadMarks会创建虚拟内存页的一个副本，或一个twin（双胞胎），并将其保存在系统空间中。当需要将修改发送到另一个处理器时，则将页面的当前副本与twin逐字比较，并将变化的字节保存到diff数据结构中。一旦创建diff后，twin将被丢弃。 除了处理器第一次访问页面外，其页面副本仅通过应用diff进行更新。 不再需要页面的新完整副本。</p>\n<p>　　使用diff的主要好处是它们可用于实现多写协议，由于diff通常比页面小得多，因此它们还可显着降低总体带宽需求。</p>\n<h1 id=\"６-TreadMarks系统（The-TreadMarks-System）\"><a href=\"#６-TreadMarks系统（The-TreadMarks-System）\" class=\"headerlink\" title=\"６ TreadMarks系统（The TreadMarks System）\"></a>６ TreadMarks系统（The TreadMarks System）</h1><p>TreadMarks完全以Unix上用户库的方式实现的。不需要修改Unix内核，因为现代Unix提供了在用户级别实现TreadMarks所需的所有通信和内存管理功能。用C，C++或者FORTRAN编写的程序可以用这些语言标准的编译器来编译和连接TreadMarks库。该系统是相对便携式的。 当前，它可以在SPARC，DECStation，DEC / Alpha，IBM RS-6000，IBM SP-1和SGI平台以及以太网和ATM网络上运行。 在本节中，我们简要描述如何实现TreadMarks的通信和内存管理。</p>\n<p>　　TreadMarks使用Berkeley套接字接口实现了机器间通信。取决于底层的网络硬件，例如以太网或ATM，TreadMarks使用UDP / IP或AAL3 / 4作为消息传输协议。默认情况下，除非计算机通过ATM LAN连接，否则TreadMarks使用UDP / IP。AAL3 / 4是ATM标准规定的面向连接的最大努力交付协议（best-efforts delivery protocol）。 由于UDP / IP和AAL3 / 4都不保证可靠的传递，因此TreadMarks使用轻量，特定操作的用户级协议来确保消息到达。</p>\n<p>　　TreadMarks发送的每个消息要么是请求消息要么是响应消息。TreadMarks发送的消息可能是显式调用TreadMarks库产生的或者是缺页错误产生的。一旦机器发送了请求消息，它将阻塞直到有一个请求消息或者预期的响应消息到达。为了请求处理的延迟最小化，TreadMarks使用SIGIO信号的处理程序来处理请求。消息到达用于接收请求消息的任何套接字都会产生SIGIO信号。由于AAL3 / 4是面向连接的协议，因此与其他每台机器都有一个相对应的套接字。为了确定哪个套接字处理请求，处理程序将执行select系统调用。处理程序收到请求消息后，将执行指定的操作，发送响应消息，然后返回到中断的进程。</p>\n<p>　　为了实现一致性协议，TreadMarks使用mprotect系统调用来控制对共享页面的访问。尝试在共享页面上执行受限访问都会产生SIGSEGV信号。SIGSEGV信号处理程序检查本地数据结构以确定页面的状态。如果本地副本是只读的，则该处理程序从空闲页面池中分配一个页面，并执行bcopy来创建一个twin。最后，处理程序将访问权限升级到原来的页面并返回。如果本地页面无效，则处理程序执行一个过程（procedure）通过从最少的远程计算机集中获取对共享内存的必要更新。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/diff1.png\" alt=\"图7\"></p>\n<p>　　　　　　　　　　　　图７　DiffCreation</p>\n<h1 id=\"7-应用（Applications）\"><a href=\"#7-应用（Applications）\" class=\"headerlink\" title=\"7 应用（Applications）\"></a>7 应用（Applications）</h1><p>使用TreadMarks已实现了许多应用程序，并且一些基准测试的性能已在之前进行了报道[7]。在这里，我们描述最近使用TreadMarks实现的两个大型应用程序的经验。在本文作者的帮助下，顺序执行代码的作者将混合整数编程（mixed integer programming）和遗传连锁分析（genetic linkage analysis）这些应用程序从现有的顺序代码进行了并行处理。虽然很难量化所涉及的工作量，但已经证明为获得有效的并行代码而进行的修改的工作量相对很小，这将在本节的其余部分中演示。</p>\n<h2 id=\"7-1-混合整数编程（Mixed-Integer-Programming）\"><a href=\"#7-1-混合整数编程（Mixed-Integer-Programming）\" class=\"headerlink\" title=\"7.1 混合整数编程（Mixed Integer Programming）\"></a>7.1 混合整数编程（Mixed Integer Programming）</h2><p>混合整数编程（MIP）是线性编程（LP）的一个版本。在LP中，在由一组线性不等式描述的区域中优化了目标函数。在MIP中，部分或全部变量被约束为只能用整数值（有时仅是0或1）。 图8显示了一个精确的数学公式，图9显示了一个简单的二维实例。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip3.png\" alt=\"图8\"></p>\n<p>　　　　　　　　　　　　　　图 8 混合整数编程问题(MIP) </p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/mip_two1.png\" alt=\"图9\"></p>\n<p>​    　　　　　　　　　　　　　　　图 9 MIP二维实例</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/branch_and_bound_mip2.png\" alt=\"图１０\"></p>\n<p>　　　　　　　　　　　　　　　　　图10 解决MIP问题的分支界定法</p>\n<p>　　Lee等人实现了用于解决MIP问题的TreadMarks代码 [11]。该代码使用分支剪切法。首先将MIP问题简化为相应的LP问题。通常，这个LP问题的解决方案将为某些约束为整数的变量产生非整数值。下一步是选择这些变量中的一个，并分支出两个新的LP问题，一个问题具有 $x_{i} =  \\left \\lfloor x_{i} \\right \\rfloor$ 的附加约束，另一个具有 $x_{i} =  \\left \\lceil x_{i} \\right \\rceil$ 的附加约束（见图10）。慢慢地，该算法会生成此类分支的树。找到解决方案后，此解决方案便会在解决方案上建立界限。分支中的LP问题的解决方案产生的结果低于此边界则无需再进入下一步了。为了加快此过程，该算法使用一种称为<code>plunging</code>的技术，本质上是对树进行深度优先搜索，以找到整数解并尽快建立边界。最后一种感兴趣的改进的算法是<code>cutting planes</code>的使用。 这些是添加到LP问题的附加约束，以加强对整数问题的描述。</p>\n<p>　　该代码用于解决MIPLIB库中的所有51个问题。该库包括航空人员调度，网络流量，工厂位置，机队调度等方面的代表性示例。图11显示了在8台运行Ultrix 4.3且通过100Mbps Fore ATM交换机连接的DecStation-5000 / 240机器的网络上获得的加速，这些问题的顺序运行时间超过2,000秒。对于大多数问题，加速几乎是线性的。 一个问题表现为超线性加速，这是因为并行代码命中了前期运行的解决方案，从而裁剪掉了大多数分枝定界树。对于另一个问题，几乎没有加速，因为在预处理步骤之后不久就找到了解决方案，此时还没有进行并行化。除了MIPLIB库中的问题外，该代码还可用于解决以前无法解决的多商品流问题[2]。 该问题在具有8个处理器的IBM SP-上花费的CPU时间为30天，并且还表现出接近线性的加速。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/miplib2.png\" alt=\"图１１\"></p>\n<p>　　　　　　　　　　　　　图11 MIPLIB库的结果</p>\n<h2 id=\"7-2-遗传连锁（Genetic-Linkage）\"><a href=\"#7-2-遗传连锁（Genetic-Linkage）\" class=\"headerlink\" title=\"7.2 遗传连锁（Genetic Linkage）\"></a>7.2 遗传连锁（Genetic Linkage）</h2><p>遗传连锁分析是一种统计技术，使用家族谱系信息来绘制人类基因图谱并在人类基因组中定位疾病基因。生物学和遗传学的最新进展已提供了大量可用的遗传材料，使计算成为进一步研究的瓶颈。</p>\n<p>　　在Mendelian经典的继承理论中，孩子的染色体接收父母一方每个染色体的一条链。考虑重组时，情况会有所不同。如果发生重组，则孩子的染色体链将包含父母染色体的每一条链中的每一条（见图12）。连锁分析的目的是推导我们寻找的基因与已知位置的基因之间发生重组的概率。 从这些概率可以计算出基因在染色体上的大概位置。</p>\n<p>　　ILINK [4]是广泛使用的遗传连锁分析程序的一个并行版本，它是LINKAGE [10]程序包的一部分。ILINK将称为谱系的家谱作为输入，并增加了有关该家族成员的一些遗传信息。它计算重组概率θ的最大似然估计。从最上层来看，ILINK由一个优化θ的循环组成。在优化循环的每次迭代中，程序遍历整个谱系，一次遍历一个核心家庭，在已知家庭成员的遗传信息的情况下，计算当前θ的可能性。对于核心家庭的每个成员，该算法都会更新一系列条件概率，这些条件概率表示个体具有特定遗传特征的概率，其条件取决于θ和已经遍历的部分家谱。</p>\n<p>　　通过以均衡负载的方式在可用处理器之间分配每个核心家庭的迭代空间，可以并行化上述算法。负载均衡是必不可少的，且依赖于阵列元素中表示的遗传信息的知识。另一个方式是拆分树，它未能产生良好的加速效果，因为大多数计算都发生在树的一小部分上（通常，这些节点靠近树的根部，他们表示已知遗传信息很少的已故者）。另外，无法并行评估不同的θ值，因为优化程序会从一个θ值顺序移至下一个θ值。</p>\n<p>　　图13显示了使用ILINK为各种数据集获得的加速。数据集来自对真实的疾病基因定位的研究。对于运行时间较长的数据集，可以实现良好的加速。 对于最小的数据集BAD，由于通信与计算的比率变大，因此加速要少得多。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/dna1.png\" alt=\"图12\"></p>\n<p>　　　　　　　　　　　　　　图12 DNA重组</p>\n<h1 id=\"8-相关工作（Related-Work）\"><a href=\"#8-相关工作（Related-Work）\" class=\"headerlink\" title=\"8 相关工作（Related Work）\"></a>8 相关工作（Related Work）</h1><p>本节的目标不是进行广泛的并行编程研究，而是以一个独特的示例说明替代性方案，并将最终的系统与TreadMarks进行比较。</p>\n<p>消息传递（PVM）。 当前，消息传递是分布式存储系统的主要编程范例。便携式虚拟机（PVM）[15]是一种流行的消息传递软件。它允许将异构的计算机网络视为单个并发计算引擎。尽管PVM中的编程比底层机器的本机消息传递范例中的编程容易得多，并且可移植性强，但是应用程序程序员仍然需要编写代码来显式交换消息。TreadMarks的目标是减轻程序员的负担。 对于具有复杂数据结构和复杂并行化策略的程序，我们认为这是一个主要优势。</p>\n<p>隐式并行（HPF）。 如HPF [8]中所示，隐式并行性依赖于用户提供的数据分布，编译器随后使用这些数据分布来生成消息传递代码。这种方法适用于数据并行程序，例如Jacobi。 动态并行性的程序，例如TSP，ILINK或MIP，很难在HPF框架中表达。</p>\n<p>面向对象的并行计算（Orca）。Orca [16]和其他面向对象的并行计算系统一样没有为程序员提供共享的存储空间，而是支持对象的共享空间，每个对象都可以通过适当同步的方法进行访问。除了从编程的角度来看的优点之外，这种方法还允许编译器推断出某些优化方法，这些优化方法可用于减少通信量。缺点是，顺序程序中“自然”的对象通常不是正确的并行化对象，需要更多的更改才能获得有效的并行程序</p>\n<p>硬件共享内存实现（DASH）。 另一种方法是在硬件中实现共享内存，对少量处理器使用侦听总线协议，或对大量处理器使用基于目录的协议（例如[12]）。我们使用这种方法来共享编程模型，但是我们的实现避免了昂贵的缓存控制器硬件。 另一方面，硬件实现可以有效地支持具有更细粒度并行性的应用程序。</p>\n<p>条目一致性（Entry Consistency）（中途）。 条目一致性是另一种宽松的内存模型[1]。它要求所有共享数据都与同步对象相关联。当获取同步对象时，只传输与该同步对象关联的修改后的数据，从而进一步减少通信数据量。但是，条目一致性内存模型比释放一致性弱，这可能会使编程更加困难。</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/treadmarks/ilink.png\" alt=\"图13\"></p>\n<p>　　　　　　　　　　　　　　　图13 ILINK结果　</p>\n<h1 id=\"9-总结和下一步工作（Conclusions-and-Further-Work）\"><a href=\"#9-总结和下一步工作（Conclusions-and-Further-Work）\" class=\"headerlink\" title=\"9 总结和下一步工作（Conclusions and Further Work）\"></a>9 总结和下一步工作（Conclusions and Further Work）</h1><p>我们的经验表明，使用适当的实现技术，分布式共享内存可以为工作站网络上的并行计算提供有效的平台。多数应用程序移植到TreadMarks分布式共享内存系统上，几乎没有困难，并且性能良好。在下一步的工作中，我们打算尝试其他实际应用，包括地震建模代码。我们还在开发各种工具，以进一步减轻编程负担并提高性能。特别是，我们正在研究使用诸如支持预取的编译器，以及使用性能监视工具来消除不必要的同步。</p>\n<h1 id=\"引用（References）\"><a href=\"#引用（References）\" class=\"headerlink\" title=\"引用（References）\"></a>引用（References）</h1><p>[1] B.N. Bershad, M.J. Zekauskas, and W.A. Sawdon. The Midway distributed shared memory system. In Proceedings of the ‘93 CompCon Conference, pages 528-537, February 1993.<br>[2] D. Bienstock and O. Gumluk. Computational experience with a difficult mixed-integer multi-commodity  flow problem. To appear in Mathematical Programming, 1994.<br>[3] J.B. Carter, J.K. Bennett, and W. Zwaenepoel. Implementation and performance of Munin. In Proceedings of the 13th ACM Symposium on Operating Systems Principles, pages 152-164, October 1991.<br>[4] S. Dwarkadas, A.A. Schäffer, R.W. Cottingham Jr., A.L. Cox, P. Keleher, and W. Zwaenepoel. Parallelization of general linkage analysis problems. Human Heredity, 44:127-141, 1994.<br>[5] K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta, and J. Hennessy. Memory consistency and event ordering in scalable shared-memory multiprocessors. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 15-26, May 1990.<br>[6] P. Keleher, A. L. Cox, and W. Zwaenepoel. Lazy release consistency for software distributed shared memory. In Proceedings of the 19th Annual International Symposium on Computer Architecture, pages 13-21, May 1992.<br>[7] P. Keleher, S. Dwarkadas, A. Cox, and W. Zwaenepoel. Treadmarks: Distributed shared memory on standard workstations and operating systems. In Proceedings of the 1994 Winter Usenix Conference, pages 115-131, January 1994.<br>[8] C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. The High Performance Fortran Handbook. The MIT Press, 1994.<br>[9] L. Lamport. How to make a multiprocessor computer that correctly executes multiprocess programs. IEEE Transactions on Computers, C-28(9):690{691, September 1979.<br>[10] G. M. Lathrop, J. M. Lalouel, C. Julier, and J. Ott. Strategies for multilocus linkage analysis in humans. Proc. Natl. Acad. Sci. USA, 81:3443-3446, June 1984.<br>[11] E. Lee, R. Bixby, W. Cook, and A.L. Cox. Parallelism in mixed integer programming. Sub\u0002mitted for publication, 1994.<br>[12] D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. The directory-based cache coherence protocol for the DASH multiprocessor. In Proceedings of the 17th Annual International Symposium on Computer Architecture, pages 148-159, May 1990.<br>[13] K. Li and P. Hudak. Memory coherence in shared virtual memory systems. ACM Transactions on Computer Systems, 7(4):321-359, November 1989.<br>[14] M. Litzkow, M. Livny, and M. Mutka. Condor - a hunter of idle workstations. In Proceedings of the 8th International Conference on Distributed Computing Systems, pages 104-111, June 1988.<br>[15] V. Sunderam. PVM: A framework for parallel distributed computing. Concurrency:Practice and Experience, 2(4):315-339, December 1990.<br>[16] A.S. Tanenbaum, M.F. Kaashoek, and H.E. Bal. Parallel programming using shared ob jects and broadcasting. IEEE Computer, 25(8):10-20, August 1992.<br>[17] A.S. Tanenbaum, R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, J. Jansen, and G. van Rossum. Experiences with the Amoeba distributed operating system. Communications of the ACM, 33(12):46-63, December 1990.</p>"},{"category":"read","title":"grpc","date":"2018-06-01T16:00:00.000Z","_content":"\n\n> grpc 特性、原理、实践、生态<!-- more -->  \n\n\n\n# gRPC\n\n\n\n# 概述\n\n\ngRPC是一个由google设计开发基于HTTP/2协议和Protobuf序列化协议的的高性能、多语言、通用的开源 RPC 框架。  \n\n\n跨语言、跨平台   \n插件化 ： 负载均衡，tracing，健康检查，认证等等  \n编码压缩 ： 节省带宽 \n多路复用 ： 降低的 TCP 链接次数\n\n\n\n**使用场景**\n\n- 低延迟、高扩展的分布式系统\n- 与云服务通信\n- 设计一个需要准确，高效且与语言无关的新协议\n- 分层设计，以实现扩展，例如：身份验证，负载平衡，日志记录和监控等\n\n\n\n\n# 特性\n\n**基于HTTP/2**\n\nHTTP/2 提供了 链接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制。  \ngRPC 协议使用了HTTP2 现有的语义，请求和响应的数据使用HTTP Body 发送，其他的控制信息则用Header 表示。\n\n\n**IDL使用ProtoBuffer**\n\ngRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON）。   \nProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。  \n压缩和传输效率高，向后兼容，语法简单，表达力强。\n\n\n**多语言支持**\n\ngRPC支持多种语言，并能够基于语言自动生成客户端和服务端。  \n\n目前支持： C#, C++, Dart, Go, Java, Node, Objective-C, PHP, Python, Ruby 等。 \n\n[详见官网](https://grpc.io/docs/quickstart/)\n\n\n# HTTP/2\n\n## HTTP/2\n\nHTTP/1.x 是超文本传输协议第1版，可读性好，但效率不高。  \n而HTTP/2 是超文本传输协议第2版，是一个二进制协议。\n\nHTTP/1 和 HTTP/2 的基本语义并没有改变，如方法语义（GET/PUST/PUT/DELETE），状态码（200/404/500等），Range Request，Cacheing，Authentication、URL路径。\n\n\n**HTTP/2通用术语：**\n- Stream： 流，一个双向流，一条连接可以有多个 streams。\n- Message： 逻辑上面的 request，response。\n- Frame：帧，HTTP/2 数据传输的最小单位。每个 Frame 都属于一个特定的 stream。一个 message 可能由多个 frame 组成。\n\n\n\n**HTTP/2 流、帧**   \n\nHTTP/2连接上传输的每个帧(frame)都关联到一个流，一个连接上可以同时有多个流，\n同一个流的帧按序传输，不同流的帧交错混合传输，\n客户端、服务端双方都可以建立流，流也可以被任意一方关闭。  \n客户端发起的流使用奇数流ID，服务端发起的使用偶数。\n\n\n[Frame结构 : ](https://httpwg.org/specs/rfc7540.html#rfc.section.4.1)\n```\n+-----------------------------------------------+\n|                 Length (24)                   |\n+---------------+---------------+---------------+\n|   Type (8)    |   Flags (8)   |\n+-+-------------+---------------+-------------------------------+\n|R|                 Stream Identifier (31)                      |\n+=+=============================================================+\n|                   Frame Payload (0...)                      ...\n+---------------------------------------------------------------+\n```\n\n- Length ： 也就是 Frame 的长度\n- Type ：Frame 的类型，有 DATA，HEADERS，SETTINGS 等\n- Flags ：帧标志位，8个比特表示可以容纳8个不同的标志：stream是否结束(END_STREAM)，header是否结束(END_HEADERS)，priority等等\n- R：保留位\n- Stream Identifier：标识frame所属的 stream，如果为 0，则表示这个 frame 属于整条连接(如SETTINGS帧)\n- Frame Payload：帧内容\n\n\n\n\n**帧类型**  \n- HEADERS 类似于HTTP/1的 Headers\n- DATA 类似于HTTP/1的 Body\n- CONTINUATION 头部太大，分多个帧传输（一个HEADERS+若干CONTINUATION）\n- SETTINGS 连接设置\n- WINDOW_UPDATE 流量控制\n- PUSH_PROMISE 服务端推送\n- PRIORITY 流优先级更改\n- PING 心跳或计算RTT\n- RST_STREAM 马上中止一个流\n- GOAWAY 关闭连接并且发送错误信息\n\n\n\n## HTTP/2 特性\n\n**新的二进制格式（Binary Format）**\n\nHTTP/1 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同。  \n基于这种考虑HTTP/2的协议解析决定采用二进制格式，实现方便且健壮。\n\n\n\n**多路复用（MultiPlexing）**\n\nHTTP/1 的request是阻塞的，如果想并发发送多个request，必须使用多个 TCP connection。这样会消耗更多资源，且浏览器为了控制资源，会对单个域名有TCP connection请求限制。\n\nHTTP/2 一个TCP connection可以有多个streams(最大数量由参数SETTINGS_MAX_CONCURRENT_STREAMS控制)， 多个streams 并行发送不同的请求的frames。  \n\n\n可以在SETTINGS帧中设置`SETTINGS_MAX_CONCURRENT_STREAMS`。  \n而此值是针对一端而言的，客户端可以告知服务器最大的streams并发数，服务端也可以告知客户端。  \n\n> 如果一条链接上 ID 分配完了， server 则会给 client 发送一个 GOAWAY frame 强制让 client 新建一条连接。\n\n\n\n**header压缩**\n\nHTTP/1 是使用文本协议，而且header每次都要重复发送，浪费了带宽也导致资源加载过慢。\n\nHTTP/2 采取了压缩和缓存来避免重复发送和带宽问题：\n- 对消息头采用HPACK 进行压缩传输来节省消息头占用的网络的流量。\n- 对这些headers采取了压缩策略来减少重复headers的请求数\n  - HTTP/2在客户端和服务器端使用 headlist 来存储之前发送过的 header，对于相同的header，不再通过每次请求和响应发送；\n\n\n[HPACK: Header Compression for HTTP/2](http://http2.github.io/http2-spec/compression.html)\n\n\n**服务端推送**\n\nserver push功能 : 在无需客户端请求资源的情况下，服务端会直接推送客户端可能需要的资源到客户端。  \n\n\n当服务器想用Server Push推送资源时，会先向客户端发送PUSH_PROMISE帧。\n推送的响应必须与客户端的某个请求相关联，因此服务器会在客户端请求的流上发送PUSH_PROMISE帧。\n\n\n\n\n**优先级排序**\n\n设置优先级的目的是为了告诉对端在并发的多个流之间如何分配资源的行为，同时当发送容量有限时，可以使用优先级来选择用于发送帧的流。  \n\n客户端可以通过 HEADERS 帧的 PRIORITY 信息指定一个新建立流的优先级，也可以发送 PRIORITY 帧调整流优先级。\n\n[参考官网](http://http2.github.io/http2-spec/#StreamPriority)\n\n\n**Flow Control**\n\nHTTP/2 支持流控，receiver 端可以对某些stream进行流控也可以针对整个connection流控。  \n而TCP层只能针对整个connection进行流控。  \n\n\n特性 ：\n- Flow control 是由方向的 : Receiver 可以选择给 stream 或者整个连接设置接收端的 window size。\n- Flow control 是基于信任的 : Receiver 只是会给 sender 建议 连接和 stream 的 flow control window size。\n- Flow control 无法禁止 \n- Flow control 是基于WINDOW_UPDATE帧的\n- Flow control 是 hop-by-hop的，而不是 end-to-end 的。例如，用nginx做proxy，则flow control作用于nginx到server和client到nginx这两个connection。\n\n\n> Connection 和 stream 的初始 flow-control window 大小都是 65535。  \nConnection 的初始窗口大小不能改变，但 stream 的可以(所有stream)，通过发送 SETTINGS 帧，携带 `SETTINGS_INITIAL_WINDOW_SIZE`，这个值即为新的 stream flow-control window 初始大小。\n\n\n\n> 增加flow control window size能加快数据传输，但同时会消耗更多资源。\n\n\n\n**主动重置链接**\n\nHTTP/1 的body的length的被送给客户端后，服务端就无法中断请求了，只能断开整个TCP connection，但这样导致的代价就是需要重新通过三次握手建立一个新的TCP连接。\n\nHTTP/2 引入了一个 RST_STREAM frame 来让客户端在已有的连接中发送重置请求，从而中断或者放弃响应。当浏览器进行页面跳转或者用户取消下载时，它可以防止建立新连接，避免浪费所有带宽。\n\n\n## HTTP/2 站点demo\n\nHTTP/1 和 HTTP/2 加载速度比较：   \nhttps://http2.akamai.com/demo\n\n访问http2站点 ：  \nhttps://http2.golang.org/\n\n\n\n# ProtoBuf \n\n## ProtoBuf \n\n**Google Protocol Buffer**  \n\n是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\n\n- 描述简单，对开发人员友好\n- 跨平台、跨语言，不依赖于具体运行平台和编程语言\n- 高效自动化解析和生成\n- 压缩比例高\n- 可扩展、兼容性好\n\n\n**gRPC与protobuf**\n\ngRPC使用 protobuf 作为IDL来定义数据结构和服务。 可以定义数据结构，也可以定义rpc 接口。\n然后用proto编译器生成对应语言的框架代码。\n\n- 定义数据结构 ： 生成对象的 序列化 代码\n- 定义rpc接口 ： 生成 gRPC服务端、客户端响应的代码\n\n\n\n\n\n## protobuf 基本数据类型\n\nhttps://developers.google.com/protocol-buffers/docs/proto#scalar\n\n\n## 数据结构定义\n\nuser.proto\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/any.proto\";\n\n//package user;\noption go_package = \"protos_golang/user\";\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  uint32 age = 3;\n  enum Flag {\n    NORMAL = 0;\n    VIP = 1;\n    SVIP = 2;\n  }\n  repeated int32 friends_ids = 5;\n  reserved 6, 7, 8;\n  message Command {\n      int32 id = 1;\n      oneof cmd_value {\n         string name = 2;\n         int32 age = 3;\n      }\n  }\n  Command cmd = 9;\n  map<int32, string> tags = 10;\n  google.protobuf.Any details = 11;\n}\n```\n\n**package**\n\npackage声明符，用来防止不同的消息类型有命名冲突。\n生成的代码将会包含再package(go等语言)或者命名空间(c++, java等)中。\n\n`option go_package = \"protos_golang/user\";`   \n`$LANGUAGE_package` 是指定生成的代码的import path和package。\n\n\n**import**\n\n要导入其他.proto文件的定义，在文件中添加一个导入声明。  \n使用导入proto的类型 `package名字.结构名` 来使用导入proto的类型。  \n如上面`common.Flag` \n\n**分配字段编号**\n\n每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的。  \n为了保证向后兼容，一旦开始使用就不要再改变。 \n\n\n\n**文件版本申明**\n\n`syntax = \"proto2\"; ` 指定使用proto2语法  \n`syntax = \"proto3\"; ` 指定为proto3语法  \n\n\n**标识符修饰符**\n\nrequired 和 optional 是proto2的语法，proto3已经不支持。  \nproto3中所有的字段都是optional的。[具体原因见](https://github.com/protocolbuffers/protobuf/issues/2497) \n\n- required : 必须字段。\n- optional ：可选字段。\n- repeated ：数组类型字段。\n- reserved ：保留字段。指出这些字段编号已经删除，不要再重用这些编号了。因为如果这些编号被重新定义成其他类型，那么对于旧版本的protobuf数据，会导致解码错误。\n\n\n**枚举**\n\n与数据结构中 enum 类似。字段编号从0开始。\n\n\n**oneof**\n\noneof与数据结构联合体(UNION)类似，一次最多只有一个字段有效。\n\n**map**\n\nmap 类型则可以用来表示键值对。  \nkey_type 可以是任何 int 或者 string 类型，float、double 和 bytes除外\n\n**any**\n\nAny类型包括:\n- bytes : 被序列化为bytes类型的任意消息\n- URL : 全局标识符\n\n使用`import google/protobuf/any.proto`来导入any类型\n\nany可以用来替换proto2中的extension\n\n\n\n**嵌套类型**\n\n可以在消息类型中定义其他消息类型\n\n\n## 服务定义\n\n```\nsyntax = \"proto2\";\n\nimport \"user.proto\";\n\nservice UserService {\n// rpc interface\n    rpc GetUserInfo(UserRequest) returns (UserResponse) {}\n}\n\nmessage UserRequest {\n    uint32 id = 1;\n}\n\nmessage UserResponse {\n    user.User user = 1;\n}\n```\n\n如果在 .proto 文件中定义了 RPC 服务接口， 编译器将使用生成服务接口代码和 stubs。\n\n`import \"user.proto\";` 导入user结构定义的proto文件。\n\n\n\n## 插件\n\nprotoc编译器通过插件机制实现对不同语言的支持。  \nprotoc会先查找是否有内置的语言插件，如果没有，则会去查找系统中是否存在`protoc-gen-$LANGUAGE` 的插件。  \n例如：\n如果指定`--go_out`参数，那么protoc会查询是否有内置的`go`插件，如果没有则继续查询系统中是否存在`protoc-gen-go`的可执行程序，再通过插件来生成相关的语言代码。\n\n\n\n**插件运行流程：**\n- protoc 启动 protoc-gen-xx\n- 将`CodeGeneratorRequest`的protobuf二进制传入到 protoc-gen-xx的标准输入\n  - protoc-gen-xx读取标准输入再反序列化成`CodeGeneratorRequest`\n  - 遍历`CodeGeneratorRequest`的`FileDescriptorProto`数组，其描述了proto文件的语法树\n  - 将`FileDescriptorProto`编译成语言源码\n  - 生成`CodeGeneratorResponse`对象输出到标准输出\n- protoc根据protoc-gen-xx的标准输出再生成源码文件\n\n\n\n[plugin.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto)定义了`CodeGeneratorRequest` 和 `CodeGeneratorResponse`，是protoc与插件交互的对象。  \n\n[descriptor.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto)描述的是一个`.proto`文件的语法树\n\n\n**插件的plugins**\n\n插件本身的也是支持以内部plugins形式进行扩展的。\n\n例如：生成go grpc的命令中：\n```\nprotoc --go_out=plugins=grpc:. pb/user.proto\n```\ngrpc就是 proto-gen-go的plugin。  \n\n[代码](https://github.com/golang/protobuf/blob/master/protoc-gen-go/grpc/grpc.go#L72) \n\n`Name()`返回grpc命名就是plugin的名字，就是上面`plugins=grpc`\n```\n// Name returns the name of this plugin, \"grpc\".\nfunc (g *grpc) Name() string {\n\treturn \"grpc\"\n}\n```\n\n\n\n\n\n\n# gRPC 原理\n\n## 概念\n\n\n![image](https://grpc.io/img/landing-2.svg)\n\n\ngRPC 定义服务，服务包含远程调用的方法。  \n在服务器端，服务器实现rpc接口并运行一个gRPC服务器来处理客户端请求。   \n在客户端，客户端有一个\"存根stub\"，提供与服务器相同签名的方法，来处理客户端请求的编码、解码等，再将请求转发到服务器端，这样客户端调用rpc方法就像调用本地函数一样。  \n\n\n\n\n## 实现\n\n\ngRPC把HTTP2的steam identifier当作请求ID，每一次请求都发起一个新的stream。\n\n请求的方法、响应的状态码等都放在HEADER frame中。  \n而请求内容和响应内容由protobuf序列化后使用DATA frame中。\n\n\n### 请求\n\nRequest主要由 Request-Headers 和 Data 以及 EOS (END_STREAM)组成。  \n\n如下图：\n\n![image](https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_request_stream_decoded_wireshark.png)\n\n\n**Request-Headers**  \n\nRequest-Headers 由 HEADERS 和 CONTINUATION frames 组成。  \n如果Flags有设置标志位`END_HEADERS`则代表Request-Headers结束。  \n\n\nRequest-Headers 主要有 `Call-Definition` 以及 `Custom-Metadata` :\n- Call-Definition : 包括 Method, Scheme, Path, TE, Authority, Timeout, Content-Type ,Message-Type, Message-Encoding, Message-Accept-Encoding, User-Agent\n- Custom-Metadata : 应用层自定义的任意 key-value，key 不要使用gRPC保留的key前缀字符 `grpc-` 。\n\n\n**Data**\n\n请求体，由一个或多个 Data frame组成。  \n如果Flags有设置标志位`END_STREAM`则代表Data结束，请求结束。 \n\n\n**request格式大致如下**\n\n```\n# request-headers \n\nHEADERS (flags = END_HEADERS)\n:method = POST\n:scheme = http\n:path = /user.UserService/GetUserInfo\n:authority = localhost:50000\ngrpc-timeout = 999127u\ncontent-type = grpc-go/1.20.0-dev\n\n## 自定义metadata\nservice : test_client\ntraceid : xxxx\n\n# data\nDATA (flags = END_STREAM)\n<Length-Prefixed Message>\n```\n\n\n\n### 响应\n\nResponse 主要由 Response-Headers 和 Data 以及 Trailers 组成。  \n如果遇到了错误，也可以直接返回 Trailers-Only。\n\n\n如下图：\n\n![image](https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_response_stream_decoded_wireshark.png)\n\n\n**Response-Headers**\n\nResponse-Headers 包含 : HTTP-Status, Message-Encoding, Message-Accept-Encoding, Content-Type, Custom-Metadata等。\n\n**Data**\n\n响应体，由一个或多个 Data frame组成。  \n如果Flags有设置标志位`END_STREAM`则代表Data结束。 \n\n**Trailers**\n\nTrailers-Only 包含 HTTP-Status, Content-Type, Trailers等。\n\nTrailers 包含 Status, Status-Message, Custom-Metadata等。\n\nTrailers作用主要是给响应包含一些额外的动态生成的信息。  \n如：消息body发送后，再发送一些信息 如数字签名，后处理状态等\n\n\n格式大致如下：\n```\n# response-headers\n\nHEADERS (flags = END_HEADERS)\n:status = status: 200 \ncontent-type = application/grpc\n\n## 自定义metadata\nservice: server_test\nspanid: xxxx\n\n\n# data\nDATA\n<Length-Prefixed Message>\n\n# headers\nHEADERS (flags = END_STREAM, END_HEADERS)\ngrpc-status: 0\n\n## trailers 自定义metadata\ntimestamp: 1560656283730441829\n\n```\n\n\n**Status code**\n\n[HTTP状态码对应的gRPC状态码](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md)\n\n\n\n\n## gRPC通信方式\n\ngRPC有四种通信方式: \n\n1、 unary RPC \n\n一般的rpc调用，客户端发送一个请求对象，然后等待服务端返回一个响应对象 \n\n```\n# 获取用户信息\n# proto\nrpc GetUserInfo (UserRequest) returns (UserResponse) {}\n```\n\n\n2、 Server-side streaming RPC \n\n服务端流式rpc \n\n客户端发起一个请求到服务端，服务端返回一段连续的数据流响应。\n\n```\n# 获取一个用户的所有地理位置历史记录\n# proto\nrpc UserLocationsStream(UserRequest) returns (stream LocationsResponse) {}\n```\n\n\n\n3、 Client-side streaming RPC \n\n客户端流式rpc \n\n客户端将一段连续的数据流发送到服务端，服务端返回一个响应。\n\n```\n# 客户端将所有数据备份到服务端\n# proto\nrpc BackupStream(stream BackupRequest) returns (BackupResponse) {}\n```\n\n4、 Bidirectional streaming RPC \n\n双向流式rpc \n\n客户端将连续的数据流发送到服务端，服务端返回交互的数据流。\n\n```\n# 在线聊天\n# proto\nrpc LiveChat(stream Message) returns (stream Message) {}\n```\n\n\n\n## 配置\n\n\n**waitForReady**\n\n发送请求时，如果connection没有ready，则会一直等待connection ready 或直到超时(达到deadline)。 \n也常称为`fail fast`。\n\n\n**timeout**\n\n请求超时时间。  \n如果超时，则会中止请求且返回DEADLINE_EXCEEDED 错误。\n\n\n**maxRequestMessageBytes**\n\n请求体的最大payload size(没有压缩的)。  \n如果客户端请求大于此值的请求会返回RESOURCE_EXHAUSTED错误。 \n\n\n**maxResponseMessageBytes**\n\n响应体的最大payload size(没有压缩的)。  \n如果服务端响应大于此值，响应将发送失败。且客户端会得到RESOURCE_EXHAUSTED错误。 \n\n\n\n---\n\n\n# gRPC 实践\n\n实践部分以go语言进行demo\n\n\n## 环境\n\n**安装protoc**\n\nmac\n```\nbrew install protobuf\n```\n\nlinux\n```\nPROTOC_ZIP=protoc-3.5.1-linux-x86_64.zip\ncurl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/$PROTOC_ZIP\n\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nsudo unzip -o $PROTOC_ZIP -d /usr/local include/*\nrm -f $PROTOC_ZIP\n```\n\n**golang的protobuffers插件**\n```\ngo get -u github.com/golang/protobuf/{protoc-gen-go,proto}\n\n```\n\n## Coding\n\n### 定义proto文件\n\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/any.proto\";\n\n//package user;\noption go_package = \"protos_golang/user\";\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  uint32 age = 3;\n  enum Flag {\n    NORMAL = 0;\n    VIP = 1;\n    SVIP = 2;\n  }\n  repeated int32 friends_ids = 5;\n  reserved 6, 7, 8;\n  message Command {\n      int32 id = 1;\n      oneof cmd_value {\n         string name = 2;\n         int32 age = 3;\n      }\n  }\n  Command cmd = 9;\n  map<int32, string> tags = 10;\n  google.protobuf.Any details = 11;\n}\n\nservice UserService {\n// rpc interface\n    rpc GetUserInfo(UserRequest) returns (UserResponse) {}\n}\n\nmessage UserRequest {\n    uint32 id = 1;\n}\n\nmessage UserResponse {\n    User user = 1;\n}\n```\n\n### 生成代码\n\n**生成代码的导入路径和包名**\n```\n## protos_golang ： 生成代码的路径\n## user : golang package 名\noption go_package = \"protos_golang/user\";\n```\n\n\n**目标代码**\n\n- 如果包含rpc接口：则需要指定插件`plugins=grpc`\n- `--go_out=.` ： 生成的代码在`当前目录`; 也可以指定其他目录，如:`--go_out=/tmp`\n- 代码路径 ： \n  - 如果.pb中指定了`go_package` : 代码路径是 `./$go_package/user.pb.go`\n  - 如果.pb中没有指定`go_package` : 则代码路径是 `./pb/user.pb.go`\n\n```\nprotoc --go_out=plugins=grpc:. pb/user.proto\n\n# 如果没有rpc定义\nprotoc --go_out=. pb/user.proto\n```\n\n\n\n### 服务端\n\n\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/reflection\"\n    \n\tpb \"testgrpc/protos_golang/user\"\n)\n\nconst (\n\tport = \":50000\"\n)\n\n// grpc server\ntype server struct{}\n\n// 实现gRPC接口\nfunc (s *server) GetUserInfo(ctx context.Context, in *pb.UserRequest) (*pb.UserResponse, error) {\n\n\treturn &pb.UserResponse{\n\t\tUser: &pb.User{\n\t\t\tName: \"test_user\",\n\t\t},\n\t}, nil\n}\n\n// 拦截器，简单打印下日志\nfunc LogUnaryInterceptorMiddleware() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (r interface{}, err error) {\n\t\tr, err = handler(ctx, req)\n\n\t\tfmt.Printf(\"fullMethod(%s), errCode(%v)\\n\", info.FullMethod, err)\n\t\treturn r, err\n\t}\n}\n\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n    // 拦截器\n    options := grpc.UnaryInterceptor(LogUnaryInterceptorMiddleware())\n\ts := grpc.NewServer(options)\n\t\n\t// 注册服务器实现\n\tpb.RegisterUserServiceServer(s, &server{})\n\t\n\t// 注册服务端反射\n\treflection.Register(s)\n\t\n\t// 启动服务器\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n\n```\n\n\n\n\n### 客户端\n```\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"testgrpc/protos_golang/user\"\n)\n\nconst (\n\taddress = \"localhost:50000\"\n)\n\nfunc main() {\n\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewUserServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tr, err := c.GetUserInfo(ctx, &pb.UserRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"fatal: %v\", err)\n\t}\n\n\tlog.Printf(\"response: %s\", r)\n}\n\n```\n\n\n\n### 调试\n\n为了方便调试服务端，所以服务端需要支持reflection功能。  \n```\nreflection.Register(grpcServer)\n```\n\n\n两款比较著名的调试工具：\n- [grpc_cli](https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md : 官方的\n- [grpcurl](https://github.com/fullstorydev/grpcurl) : go的，安装简单\n\n\n\n**列出服务端注册的service**\n\n如果没有配置好公钥和私钥文件，也没有忽略证书的验证过程，则需要加`-plaintext`\n```\n$ grpcurl -plaintext localhost:50000 list \ngrpc.reflection.v1alpha.ServerReflection\nuser.UserService\n```\n\n**列出服务的接口**\n\n```\n$ grpcurl -plaintext localhost:50000 list  user.UserService\nuser.UserService.GetUserInfo\n```\n\n**获取接口的签名**\n\n```\n$ grpcurl -plaintext localhost:50000 describe user.UserService.GetUserInfo\nuser.UserService.GetUserInfo is a method:\nrpc GetUserInfo ( .user.UserRequest ) returns ( .user.UserResponse );\n```\n\n**获取类型信息**\n\n```\n$ grpcurl -plaintext localhost:50000 describe .user.UserRequest\nuser.UserRequest is a message:\nmessage UserRequest {\n  uint32 id = 1;\n}\n\n```\n\n**调试接口**\n\n请求体以json的形式描述类型。 \n\n```\n$ grpcurl -plaintext -d '{\"id\":1}'   localhost:50000  user.UserService.GetUserInfo\n{\n  \"user\": {\n    \"name\": \"test_user\"\n  }\n}\n```\n\n\n\n\n## go gRPC 生态\n\n### 服务组件\n\n\n**上下文信息传递**\n\nrpc客户端将上下文信息传递给服务端。  \n链路调用信息，服务信息，认证信息等等。\n\n[官方实现](https://godoc.org/google.golang.org/grpc/metadata)\n\n\n**服务器反射**\n\n服务端反射协议， 可以用途于:\n- 服务端调试 : grpcurl 工具就是用reflection协议来进行服务端调试的。可以list出服务端的接口定义，以及命令行构造请求进行调试。\n- 运行时构造gRPC请求 ：客户端可以运行时根据反射的接口定义构造请求。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/reflection)\n\n\n\n\n**负载均衡**\n\n客户端负载均衡器\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/balancer)\n\n\n**认证**  \n\ngRPC主要的两种认证方式：\n- 基于SSL/TLS认证方式\n- Token认证方式\n\n两种方式可以同时应用\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/credentials)  实现了几种认证方式：\n- alts  \n- google \n- oauth\n- 自定义认证方式\n\n\n[go-grpc-middleware的实现](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/auth)\n\n\n\n**健康检查**\n\n\n服务端提供一个`Check`接口返回其状态信息。  \n客户端调用此接口获取到服务健康状态，是否可以继续提供服务。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/health)\n\n\n**keepalive**\n\n定期发送HTTP/2.0 pings帧来检测 connection 是否存活，如果断开则进行重新连接。  \n与健康检查区别在于keepalive是检查connection而健康检查是检查服务是否可用。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/keepalive)\n\n\n**naming**\n\n命名解析。  \n通过服务命名来获取服务相关的信息来达到服务发现目的。  \n\n与balancer结合使用来实现进程内负载均衡与服务发现。  \n\n[官方实现](https://godoc.org/google.golang.org/grpc/naming)\n\n\n\n**限流**\n\n限制流量来保护服务端以防止服务过载。  \n\n可以在客户端，balancer，服务端 进行限流。\n\n[go-grpc-middleware实现服务端限流](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/ratelimit)\n\n\n\n\n**recovery**\n\n将服务内部的错误转换成gRPC错误码。  \n\n[go-grpc-middleware实现](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/recovery) ： recover go的panic， 并转换成gRPC错误。\n\n\n\n\n**重试**\n\n客户端对于返回某些gRPC错误码的请求进行重试。\n\n[go-grpc-middleware](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/retry)\n\n\n\n\n**tracing**\n\n在链路上下文携带tracing信息，以及将信息以opentracing的规范发送给`分布式链路分析服务`。\n\ntracing信息包含traceid,spanid,请求时间,错误信息,日志等等。  \n如：通过设置客户端spanid为服务端spanid的parent_spanid，这样就能知道是客户端调用了服务端rpc请求。\n\n\n[go-grpc-middleware实现opentracing的middleware](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing)\n\n[open-tracing](https://opentracing.io/docs/)\n\n\n\n\n### 微服务框架、组件\n\n[go-kit](https://github.com/go-kit) : 微服务组件  \n[micro](https://github.com/micro) : 微服务框架  \n[go-chassis](https://github.com/go-chassis/go-chassis) : 华为开发的go微服务框架  \n[go-grpc-middleware](https://github.com/grpc-ecosystem/go-grpc-middleware) : 服务端和客户端的一些中间件，认证、日志、分布式追踪跟重试等  \n[grpc-gateway](https://github.com/grpc-ecosystem/grpc-gateway) ：一个 protoc 的插件，可以将 gRPC 接口转换为对外暴露 RESTful API 的工具，同时还能生成 swagger 文档  \n\n\n\n\n\n### gRPC 与 负载均衡\n\n**进程内LB(Balancing-aware Client)**\n\n\n需要实现：\n- 服务注册\n- 健康检查\n- 服务发现\n- 负载均衡\n\n缺点：\n- 开发成本：要实现上述功能\n- 维护成本：不同语言栈的sdk维护与升级\n\n\n\n[官方](https://godoc.org/google.golang.org/grpc/balancer)已经提供接口来实现进程内的负载均衡。同时结合服务发现，健康检查一起使用。\n\n\n\n\n**集中式LB(Proxy Model)**\n\nproxy 实现服务发现，健康检查，负载均衡等等。  \n还方便做限流等控制和其他统一控制策略。\n\n缺点：\n- 单点问题\n- 多一层性能开销\n- 不方便调试\n\n\n***Nginx***\n\n> Nginx(1.13.10已经支持gRPC) \n\n\n\n\n```\nupstream grpcservers {\n    server localhost:50000;\n    server localhost:50001;\n}\n\nserver {\n    listen 9000 http2;\n\n    # router\n    location /user.UserService {\n        grpc_pass grpc://grpcservers;\n        error_page 502 = /error502grpc;\n    }\n    \n    # 将默认错误页面更改成gRPC状态码\n    location = /error502grpc {\n        internal;\n        default_type application/grpc;\n        add_header grpc-status 14;\n        add_header grpc-message \"unavailable\";\n        return 204;\n    }\n}\n```\n\n[nginx gRPC module](https://nginx.org/en/docs/http/ngx_http_grpc_module.html)\n\n\n\n\n**独立LB进程(External Load Balancing Service)**\n\n在主机上部署独立的LB进程，来实现服务发现，健康检查，负载均衡等功能。  \n不用对于不同语言维护不同sdk版本；  \n常常用于微服务service mesh。\n\n缺点：\n- 单点问题：但是只影响本机\n- 不方便调试\n\n常用的组件：  \n- [Istio](https://istio.io/)  \n- [Envoy](https://github.com/lyft/envoy)\n\n\n\n\n\n\n\n---\n\n# gRPC 生态环境\n\n## 组件\n\n grpc 只是实现了 RPC 核心功能，缺少很多微服务的特性（服务注册发现、监控、治理、管理等），而基于 HTTP/2 相对来说比较容易进行扩展。\n \n[grpc-ecosystem](https://github.com/grpc-ecosystem) 上有一些比较优秀的外围组件来完善gRPC的生态体系  \n\n\n[awesome-grpc](https://github.com/grpc-ecosystem/awesome-grpc) 收集了一些优秀的gRPC项目   \n\n\n\n\n## grpc 文档与交流\n\n**文档**\n\n- 官网文档 : https://grpc.io/docs/ \n- github 上 grpc 仓库下的 doc ： https://github.com/grpc/grpc/tree/master/doc\n- 博客 : https://grpc.io/blog/\n\n**交流**\n\nhttps://grpc.io/community/ 交流的方式有：\n- 邮件列表\n- Gitter\n- Reddit\n- Meetup Group \n\n\n\n\n\n\n\n\n\n\n# 参考\n\n[grpc.io](https://grpc.io/docs/guides)\n\n[developers.google.com](https://developers.google.com/protocol-buffers/docs)\n\n[gRPC github doc](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#Requests)\n\n[http2 specs](https://tools.ietf.org/html/rfc7540)    \nor   \n[github http2 spec](http://http2.github.io/http2-spec/#StreamPriority)\n","source":"_posts/grpc.md","raw":"---\ncategory: \"read\"\ntitle:  \"grpc\"\ncategories: \n- 2018\ntags:\n- rpc\n- grpc\ndate: 2018-06-02\n---\n\n\n> grpc 特性、原理、实践、生态<!-- more -->  \n\n\n\n# gRPC\n\n\n\n# 概述\n\n\ngRPC是一个由google设计开发基于HTTP/2协议和Protobuf序列化协议的的高性能、多语言、通用的开源 RPC 框架。  \n\n\n跨语言、跨平台   \n插件化 ： 负载均衡，tracing，健康检查，认证等等  \n编码压缩 ： 节省带宽 \n多路复用 ： 降低的 TCP 链接次数\n\n\n\n**使用场景**\n\n- 低延迟、高扩展的分布式系统\n- 与云服务通信\n- 设计一个需要准确，高效且与语言无关的新协议\n- 分层设计，以实现扩展，例如：身份验证，负载平衡，日志记录和监控等\n\n\n\n\n# 特性\n\n**基于HTTP/2**\n\nHTTP/2 提供了 链接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制。  \ngRPC 协议使用了HTTP2 现有的语义，请求和响应的数据使用HTTP Body 发送，其他的控制信息则用Header 表示。\n\n\n**IDL使用ProtoBuffer**\n\ngRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON）。   \nProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。  \n压缩和传输效率高，向后兼容，语法简单，表达力强。\n\n\n**多语言支持**\n\ngRPC支持多种语言，并能够基于语言自动生成客户端和服务端。  \n\n目前支持： C#, C++, Dart, Go, Java, Node, Objective-C, PHP, Python, Ruby 等。 \n\n[详见官网](https://grpc.io/docs/quickstart/)\n\n\n# HTTP/2\n\n## HTTP/2\n\nHTTP/1.x 是超文本传输协议第1版，可读性好，但效率不高。  \n而HTTP/2 是超文本传输协议第2版，是一个二进制协议。\n\nHTTP/1 和 HTTP/2 的基本语义并没有改变，如方法语义（GET/PUST/PUT/DELETE），状态码（200/404/500等），Range Request，Cacheing，Authentication、URL路径。\n\n\n**HTTP/2通用术语：**\n- Stream： 流，一个双向流，一条连接可以有多个 streams。\n- Message： 逻辑上面的 request，response。\n- Frame：帧，HTTP/2 数据传输的最小单位。每个 Frame 都属于一个特定的 stream。一个 message 可能由多个 frame 组成。\n\n\n\n**HTTP/2 流、帧**   \n\nHTTP/2连接上传输的每个帧(frame)都关联到一个流，一个连接上可以同时有多个流，\n同一个流的帧按序传输，不同流的帧交错混合传输，\n客户端、服务端双方都可以建立流，流也可以被任意一方关闭。  \n客户端发起的流使用奇数流ID，服务端发起的使用偶数。\n\n\n[Frame结构 : ](https://httpwg.org/specs/rfc7540.html#rfc.section.4.1)\n```\n+-----------------------------------------------+\n|                 Length (24)                   |\n+---------------+---------------+---------------+\n|   Type (8)    |   Flags (8)   |\n+-+-------------+---------------+-------------------------------+\n|R|                 Stream Identifier (31)                      |\n+=+=============================================================+\n|                   Frame Payload (0...)                      ...\n+---------------------------------------------------------------+\n```\n\n- Length ： 也就是 Frame 的长度\n- Type ：Frame 的类型，有 DATA，HEADERS，SETTINGS 等\n- Flags ：帧标志位，8个比特表示可以容纳8个不同的标志：stream是否结束(END_STREAM)，header是否结束(END_HEADERS)，priority等等\n- R：保留位\n- Stream Identifier：标识frame所属的 stream，如果为 0，则表示这个 frame 属于整条连接(如SETTINGS帧)\n- Frame Payload：帧内容\n\n\n\n\n**帧类型**  \n- HEADERS 类似于HTTP/1的 Headers\n- DATA 类似于HTTP/1的 Body\n- CONTINUATION 头部太大，分多个帧传输（一个HEADERS+若干CONTINUATION）\n- SETTINGS 连接设置\n- WINDOW_UPDATE 流量控制\n- PUSH_PROMISE 服务端推送\n- PRIORITY 流优先级更改\n- PING 心跳或计算RTT\n- RST_STREAM 马上中止一个流\n- GOAWAY 关闭连接并且发送错误信息\n\n\n\n## HTTP/2 特性\n\n**新的二进制格式（Binary Format）**\n\nHTTP/1 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同。  \n基于这种考虑HTTP/2的协议解析决定采用二进制格式，实现方便且健壮。\n\n\n\n**多路复用（MultiPlexing）**\n\nHTTP/1 的request是阻塞的，如果想并发发送多个request，必须使用多个 TCP connection。这样会消耗更多资源，且浏览器为了控制资源，会对单个域名有TCP connection请求限制。\n\nHTTP/2 一个TCP connection可以有多个streams(最大数量由参数SETTINGS_MAX_CONCURRENT_STREAMS控制)， 多个streams 并行发送不同的请求的frames。  \n\n\n可以在SETTINGS帧中设置`SETTINGS_MAX_CONCURRENT_STREAMS`。  \n而此值是针对一端而言的，客户端可以告知服务器最大的streams并发数，服务端也可以告知客户端。  \n\n> 如果一条链接上 ID 分配完了， server 则会给 client 发送一个 GOAWAY frame 强制让 client 新建一条连接。\n\n\n\n**header压缩**\n\nHTTP/1 是使用文本协议，而且header每次都要重复发送，浪费了带宽也导致资源加载过慢。\n\nHTTP/2 采取了压缩和缓存来避免重复发送和带宽问题：\n- 对消息头采用HPACK 进行压缩传输来节省消息头占用的网络的流量。\n- 对这些headers采取了压缩策略来减少重复headers的请求数\n  - HTTP/2在客户端和服务器端使用 headlist 来存储之前发送过的 header，对于相同的header，不再通过每次请求和响应发送；\n\n\n[HPACK: Header Compression for HTTP/2](http://http2.github.io/http2-spec/compression.html)\n\n\n**服务端推送**\n\nserver push功能 : 在无需客户端请求资源的情况下，服务端会直接推送客户端可能需要的资源到客户端。  \n\n\n当服务器想用Server Push推送资源时，会先向客户端发送PUSH_PROMISE帧。\n推送的响应必须与客户端的某个请求相关联，因此服务器会在客户端请求的流上发送PUSH_PROMISE帧。\n\n\n\n\n**优先级排序**\n\n设置优先级的目的是为了告诉对端在并发的多个流之间如何分配资源的行为，同时当发送容量有限时，可以使用优先级来选择用于发送帧的流。  \n\n客户端可以通过 HEADERS 帧的 PRIORITY 信息指定一个新建立流的优先级，也可以发送 PRIORITY 帧调整流优先级。\n\n[参考官网](http://http2.github.io/http2-spec/#StreamPriority)\n\n\n**Flow Control**\n\nHTTP/2 支持流控，receiver 端可以对某些stream进行流控也可以针对整个connection流控。  \n而TCP层只能针对整个connection进行流控。  \n\n\n特性 ：\n- Flow control 是由方向的 : Receiver 可以选择给 stream 或者整个连接设置接收端的 window size。\n- Flow control 是基于信任的 : Receiver 只是会给 sender 建议 连接和 stream 的 flow control window size。\n- Flow control 无法禁止 \n- Flow control 是基于WINDOW_UPDATE帧的\n- Flow control 是 hop-by-hop的，而不是 end-to-end 的。例如，用nginx做proxy，则flow control作用于nginx到server和client到nginx这两个connection。\n\n\n> Connection 和 stream 的初始 flow-control window 大小都是 65535。  \nConnection 的初始窗口大小不能改变，但 stream 的可以(所有stream)，通过发送 SETTINGS 帧，携带 `SETTINGS_INITIAL_WINDOW_SIZE`，这个值即为新的 stream flow-control window 初始大小。\n\n\n\n> 增加flow control window size能加快数据传输，但同时会消耗更多资源。\n\n\n\n**主动重置链接**\n\nHTTP/1 的body的length的被送给客户端后，服务端就无法中断请求了，只能断开整个TCP connection，但这样导致的代价就是需要重新通过三次握手建立一个新的TCP连接。\n\nHTTP/2 引入了一个 RST_STREAM frame 来让客户端在已有的连接中发送重置请求，从而中断或者放弃响应。当浏览器进行页面跳转或者用户取消下载时，它可以防止建立新连接，避免浪费所有带宽。\n\n\n## HTTP/2 站点demo\n\nHTTP/1 和 HTTP/2 加载速度比较：   \nhttps://http2.akamai.com/demo\n\n访问http2站点 ：  \nhttps://http2.golang.org/\n\n\n\n# ProtoBuf \n\n## ProtoBuf \n\n**Google Protocol Buffer**  \n\n是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\n\n- 描述简单，对开发人员友好\n- 跨平台、跨语言，不依赖于具体运行平台和编程语言\n- 高效自动化解析和生成\n- 压缩比例高\n- 可扩展、兼容性好\n\n\n**gRPC与protobuf**\n\ngRPC使用 protobuf 作为IDL来定义数据结构和服务。 可以定义数据结构，也可以定义rpc 接口。\n然后用proto编译器生成对应语言的框架代码。\n\n- 定义数据结构 ： 生成对象的 序列化 代码\n- 定义rpc接口 ： 生成 gRPC服务端、客户端响应的代码\n\n\n\n\n\n## protobuf 基本数据类型\n\nhttps://developers.google.com/protocol-buffers/docs/proto#scalar\n\n\n## 数据结构定义\n\nuser.proto\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/any.proto\";\n\n//package user;\noption go_package = \"protos_golang/user\";\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  uint32 age = 3;\n  enum Flag {\n    NORMAL = 0;\n    VIP = 1;\n    SVIP = 2;\n  }\n  repeated int32 friends_ids = 5;\n  reserved 6, 7, 8;\n  message Command {\n      int32 id = 1;\n      oneof cmd_value {\n         string name = 2;\n         int32 age = 3;\n      }\n  }\n  Command cmd = 9;\n  map<int32, string> tags = 10;\n  google.protobuf.Any details = 11;\n}\n```\n\n**package**\n\npackage声明符，用来防止不同的消息类型有命名冲突。\n生成的代码将会包含再package(go等语言)或者命名空间(c++, java等)中。\n\n`option go_package = \"protos_golang/user\";`   \n`$LANGUAGE_package` 是指定生成的代码的import path和package。\n\n\n**import**\n\n要导入其他.proto文件的定义，在文件中添加一个导入声明。  \n使用导入proto的类型 `package名字.结构名` 来使用导入proto的类型。  \n如上面`common.Flag` \n\n**分配字段编号**\n\n每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的。  \n为了保证向后兼容，一旦开始使用就不要再改变。 \n\n\n\n**文件版本申明**\n\n`syntax = \"proto2\"; ` 指定使用proto2语法  \n`syntax = \"proto3\"; ` 指定为proto3语法  \n\n\n**标识符修饰符**\n\nrequired 和 optional 是proto2的语法，proto3已经不支持。  \nproto3中所有的字段都是optional的。[具体原因见](https://github.com/protocolbuffers/protobuf/issues/2497) \n\n- required : 必须字段。\n- optional ：可选字段。\n- repeated ：数组类型字段。\n- reserved ：保留字段。指出这些字段编号已经删除，不要再重用这些编号了。因为如果这些编号被重新定义成其他类型，那么对于旧版本的protobuf数据，会导致解码错误。\n\n\n**枚举**\n\n与数据结构中 enum 类似。字段编号从0开始。\n\n\n**oneof**\n\noneof与数据结构联合体(UNION)类似，一次最多只有一个字段有效。\n\n**map**\n\nmap 类型则可以用来表示键值对。  \nkey_type 可以是任何 int 或者 string 类型，float、double 和 bytes除外\n\n**any**\n\nAny类型包括:\n- bytes : 被序列化为bytes类型的任意消息\n- URL : 全局标识符\n\n使用`import google/protobuf/any.proto`来导入any类型\n\nany可以用来替换proto2中的extension\n\n\n\n**嵌套类型**\n\n可以在消息类型中定义其他消息类型\n\n\n## 服务定义\n\n```\nsyntax = \"proto2\";\n\nimport \"user.proto\";\n\nservice UserService {\n// rpc interface\n    rpc GetUserInfo(UserRequest) returns (UserResponse) {}\n}\n\nmessage UserRequest {\n    uint32 id = 1;\n}\n\nmessage UserResponse {\n    user.User user = 1;\n}\n```\n\n如果在 .proto 文件中定义了 RPC 服务接口， 编译器将使用生成服务接口代码和 stubs。\n\n`import \"user.proto\";` 导入user结构定义的proto文件。\n\n\n\n## 插件\n\nprotoc编译器通过插件机制实现对不同语言的支持。  \nprotoc会先查找是否有内置的语言插件，如果没有，则会去查找系统中是否存在`protoc-gen-$LANGUAGE` 的插件。  \n例如：\n如果指定`--go_out`参数，那么protoc会查询是否有内置的`go`插件，如果没有则继续查询系统中是否存在`protoc-gen-go`的可执行程序，再通过插件来生成相关的语言代码。\n\n\n\n**插件运行流程：**\n- protoc 启动 protoc-gen-xx\n- 将`CodeGeneratorRequest`的protobuf二进制传入到 protoc-gen-xx的标准输入\n  - protoc-gen-xx读取标准输入再反序列化成`CodeGeneratorRequest`\n  - 遍历`CodeGeneratorRequest`的`FileDescriptorProto`数组，其描述了proto文件的语法树\n  - 将`FileDescriptorProto`编译成语言源码\n  - 生成`CodeGeneratorResponse`对象输出到标准输出\n- protoc根据protoc-gen-xx的标准输出再生成源码文件\n\n\n\n[plugin.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto)定义了`CodeGeneratorRequest` 和 `CodeGeneratorResponse`，是protoc与插件交互的对象。  \n\n[descriptor.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto)描述的是一个`.proto`文件的语法树\n\n\n**插件的plugins**\n\n插件本身的也是支持以内部plugins形式进行扩展的。\n\n例如：生成go grpc的命令中：\n```\nprotoc --go_out=plugins=grpc:. pb/user.proto\n```\ngrpc就是 proto-gen-go的plugin。  \n\n[代码](https://github.com/golang/protobuf/blob/master/protoc-gen-go/grpc/grpc.go#L72) \n\n`Name()`返回grpc命名就是plugin的名字，就是上面`plugins=grpc`\n```\n// Name returns the name of this plugin, \"grpc\".\nfunc (g *grpc) Name() string {\n\treturn \"grpc\"\n}\n```\n\n\n\n\n\n\n# gRPC 原理\n\n## 概念\n\n\n![image](https://grpc.io/img/landing-2.svg)\n\n\ngRPC 定义服务，服务包含远程调用的方法。  \n在服务器端，服务器实现rpc接口并运行一个gRPC服务器来处理客户端请求。   \n在客户端，客户端有一个\"存根stub\"，提供与服务器相同签名的方法，来处理客户端请求的编码、解码等，再将请求转发到服务器端，这样客户端调用rpc方法就像调用本地函数一样。  \n\n\n\n\n## 实现\n\n\ngRPC把HTTP2的steam identifier当作请求ID，每一次请求都发起一个新的stream。\n\n请求的方法、响应的状态码等都放在HEADER frame中。  \n而请求内容和响应内容由protobuf序列化后使用DATA frame中。\n\n\n### 请求\n\nRequest主要由 Request-Headers 和 Data 以及 EOS (END_STREAM)组成。  \n\n如下图：\n\n![image](https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_request_stream_decoded_wireshark.png)\n\n\n**Request-Headers**  \n\nRequest-Headers 由 HEADERS 和 CONTINUATION frames 组成。  \n如果Flags有设置标志位`END_HEADERS`则代表Request-Headers结束。  \n\n\nRequest-Headers 主要有 `Call-Definition` 以及 `Custom-Metadata` :\n- Call-Definition : 包括 Method, Scheme, Path, TE, Authority, Timeout, Content-Type ,Message-Type, Message-Encoding, Message-Accept-Encoding, User-Agent\n- Custom-Metadata : 应用层自定义的任意 key-value，key 不要使用gRPC保留的key前缀字符 `grpc-` 。\n\n\n**Data**\n\n请求体，由一个或多个 Data frame组成。  \n如果Flags有设置标志位`END_STREAM`则代表Data结束，请求结束。 \n\n\n**request格式大致如下**\n\n```\n# request-headers \n\nHEADERS (flags = END_HEADERS)\n:method = POST\n:scheme = http\n:path = /user.UserService/GetUserInfo\n:authority = localhost:50000\ngrpc-timeout = 999127u\ncontent-type = grpc-go/1.20.0-dev\n\n## 自定义metadata\nservice : test_client\ntraceid : xxxx\n\n# data\nDATA (flags = END_STREAM)\n<Length-Prefixed Message>\n```\n\n\n\n### 响应\n\nResponse 主要由 Response-Headers 和 Data 以及 Trailers 组成。  \n如果遇到了错误，也可以直接返回 Trailers-Only。\n\n\n如下图：\n\n![image](https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_response_stream_decoded_wireshark.png)\n\n\n**Response-Headers**\n\nResponse-Headers 包含 : HTTP-Status, Message-Encoding, Message-Accept-Encoding, Content-Type, Custom-Metadata等。\n\n**Data**\n\n响应体，由一个或多个 Data frame组成。  \n如果Flags有设置标志位`END_STREAM`则代表Data结束。 \n\n**Trailers**\n\nTrailers-Only 包含 HTTP-Status, Content-Type, Trailers等。\n\nTrailers 包含 Status, Status-Message, Custom-Metadata等。\n\nTrailers作用主要是给响应包含一些额外的动态生成的信息。  \n如：消息body发送后，再发送一些信息 如数字签名，后处理状态等\n\n\n格式大致如下：\n```\n# response-headers\n\nHEADERS (flags = END_HEADERS)\n:status = status: 200 \ncontent-type = application/grpc\n\n## 自定义metadata\nservice: server_test\nspanid: xxxx\n\n\n# data\nDATA\n<Length-Prefixed Message>\n\n# headers\nHEADERS (flags = END_STREAM, END_HEADERS)\ngrpc-status: 0\n\n## trailers 自定义metadata\ntimestamp: 1560656283730441829\n\n```\n\n\n**Status code**\n\n[HTTP状态码对应的gRPC状态码](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md)\n\n\n\n\n## gRPC通信方式\n\ngRPC有四种通信方式: \n\n1、 unary RPC \n\n一般的rpc调用，客户端发送一个请求对象，然后等待服务端返回一个响应对象 \n\n```\n# 获取用户信息\n# proto\nrpc GetUserInfo (UserRequest) returns (UserResponse) {}\n```\n\n\n2、 Server-side streaming RPC \n\n服务端流式rpc \n\n客户端发起一个请求到服务端，服务端返回一段连续的数据流响应。\n\n```\n# 获取一个用户的所有地理位置历史记录\n# proto\nrpc UserLocationsStream(UserRequest) returns (stream LocationsResponse) {}\n```\n\n\n\n3、 Client-side streaming RPC \n\n客户端流式rpc \n\n客户端将一段连续的数据流发送到服务端，服务端返回一个响应。\n\n```\n# 客户端将所有数据备份到服务端\n# proto\nrpc BackupStream(stream BackupRequest) returns (BackupResponse) {}\n```\n\n4、 Bidirectional streaming RPC \n\n双向流式rpc \n\n客户端将连续的数据流发送到服务端，服务端返回交互的数据流。\n\n```\n# 在线聊天\n# proto\nrpc LiveChat(stream Message) returns (stream Message) {}\n```\n\n\n\n## 配置\n\n\n**waitForReady**\n\n发送请求时，如果connection没有ready，则会一直等待connection ready 或直到超时(达到deadline)。 \n也常称为`fail fast`。\n\n\n**timeout**\n\n请求超时时间。  \n如果超时，则会中止请求且返回DEADLINE_EXCEEDED 错误。\n\n\n**maxRequestMessageBytes**\n\n请求体的最大payload size(没有压缩的)。  \n如果客户端请求大于此值的请求会返回RESOURCE_EXHAUSTED错误。 \n\n\n**maxResponseMessageBytes**\n\n响应体的最大payload size(没有压缩的)。  \n如果服务端响应大于此值，响应将发送失败。且客户端会得到RESOURCE_EXHAUSTED错误。 \n\n\n\n---\n\n\n# gRPC 实践\n\n实践部分以go语言进行demo\n\n\n## 环境\n\n**安装protoc**\n\nmac\n```\nbrew install protobuf\n```\n\nlinux\n```\nPROTOC_ZIP=protoc-3.5.1-linux-x86_64.zip\ncurl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/$PROTOC_ZIP\n\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nsudo unzip -o $PROTOC_ZIP -d /usr/local include/*\nrm -f $PROTOC_ZIP\n```\n\n**golang的protobuffers插件**\n```\ngo get -u github.com/golang/protobuf/{protoc-gen-go,proto}\n\n```\n\n## Coding\n\n### 定义proto文件\n\n```\nsyntax = \"proto3\";\n\nimport \"google/protobuf/any.proto\";\n\n//package user;\noption go_package = \"protos_golang/user\";\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  uint32 age = 3;\n  enum Flag {\n    NORMAL = 0;\n    VIP = 1;\n    SVIP = 2;\n  }\n  repeated int32 friends_ids = 5;\n  reserved 6, 7, 8;\n  message Command {\n      int32 id = 1;\n      oneof cmd_value {\n         string name = 2;\n         int32 age = 3;\n      }\n  }\n  Command cmd = 9;\n  map<int32, string> tags = 10;\n  google.protobuf.Any details = 11;\n}\n\nservice UserService {\n// rpc interface\n    rpc GetUserInfo(UserRequest) returns (UserResponse) {}\n}\n\nmessage UserRequest {\n    uint32 id = 1;\n}\n\nmessage UserResponse {\n    User user = 1;\n}\n```\n\n### 生成代码\n\n**生成代码的导入路径和包名**\n```\n## protos_golang ： 生成代码的路径\n## user : golang package 名\noption go_package = \"protos_golang/user\";\n```\n\n\n**目标代码**\n\n- 如果包含rpc接口：则需要指定插件`plugins=grpc`\n- `--go_out=.` ： 生成的代码在`当前目录`; 也可以指定其他目录，如:`--go_out=/tmp`\n- 代码路径 ： \n  - 如果.pb中指定了`go_package` : 代码路径是 `./$go_package/user.pb.go`\n  - 如果.pb中没有指定`go_package` : 则代码路径是 `./pb/user.pb.go`\n\n```\nprotoc --go_out=plugins=grpc:. pb/user.proto\n\n# 如果没有rpc定义\nprotoc --go_out=. pb/user.proto\n```\n\n\n\n### 服务端\n\n\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/reflection\"\n    \n\tpb \"testgrpc/protos_golang/user\"\n)\n\nconst (\n\tport = \":50000\"\n)\n\n// grpc server\ntype server struct{}\n\n// 实现gRPC接口\nfunc (s *server) GetUserInfo(ctx context.Context, in *pb.UserRequest) (*pb.UserResponse, error) {\n\n\treturn &pb.UserResponse{\n\t\tUser: &pb.User{\n\t\t\tName: \"test_user\",\n\t\t},\n\t}, nil\n}\n\n// 拦截器，简单打印下日志\nfunc LogUnaryInterceptorMiddleware() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (r interface{}, err error) {\n\t\tr, err = handler(ctx, req)\n\n\t\tfmt.Printf(\"fullMethod(%s), errCode(%v)\\n\", info.FullMethod, err)\n\t\treturn r, err\n\t}\n}\n\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n    // 拦截器\n    options := grpc.UnaryInterceptor(LogUnaryInterceptorMiddleware())\n\ts := grpc.NewServer(options)\n\t\n\t// 注册服务器实现\n\tpb.RegisterUserServiceServer(s, &server{})\n\t\n\t// 注册服务端反射\n\treflection.Register(s)\n\t\n\t// 启动服务器\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n\n```\n\n\n\n\n### 客户端\n```\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"testgrpc/protos_golang/user\"\n)\n\nconst (\n\taddress = \"localhost:50000\"\n)\n\nfunc main() {\n\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewUserServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tr, err := c.GetUserInfo(ctx, &pb.UserRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"fatal: %v\", err)\n\t}\n\n\tlog.Printf(\"response: %s\", r)\n}\n\n```\n\n\n\n### 调试\n\n为了方便调试服务端，所以服务端需要支持reflection功能。  \n```\nreflection.Register(grpcServer)\n```\n\n\n两款比较著名的调试工具：\n- [grpc_cli](https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md : 官方的\n- [grpcurl](https://github.com/fullstorydev/grpcurl) : go的，安装简单\n\n\n\n**列出服务端注册的service**\n\n如果没有配置好公钥和私钥文件，也没有忽略证书的验证过程，则需要加`-plaintext`\n```\n$ grpcurl -plaintext localhost:50000 list \ngrpc.reflection.v1alpha.ServerReflection\nuser.UserService\n```\n\n**列出服务的接口**\n\n```\n$ grpcurl -plaintext localhost:50000 list  user.UserService\nuser.UserService.GetUserInfo\n```\n\n**获取接口的签名**\n\n```\n$ grpcurl -plaintext localhost:50000 describe user.UserService.GetUserInfo\nuser.UserService.GetUserInfo is a method:\nrpc GetUserInfo ( .user.UserRequest ) returns ( .user.UserResponse );\n```\n\n**获取类型信息**\n\n```\n$ grpcurl -plaintext localhost:50000 describe .user.UserRequest\nuser.UserRequest is a message:\nmessage UserRequest {\n  uint32 id = 1;\n}\n\n```\n\n**调试接口**\n\n请求体以json的形式描述类型。 \n\n```\n$ grpcurl -plaintext -d '{\"id\":1}'   localhost:50000  user.UserService.GetUserInfo\n{\n  \"user\": {\n    \"name\": \"test_user\"\n  }\n}\n```\n\n\n\n\n## go gRPC 生态\n\n### 服务组件\n\n\n**上下文信息传递**\n\nrpc客户端将上下文信息传递给服务端。  \n链路调用信息，服务信息，认证信息等等。\n\n[官方实现](https://godoc.org/google.golang.org/grpc/metadata)\n\n\n**服务器反射**\n\n服务端反射协议， 可以用途于:\n- 服务端调试 : grpcurl 工具就是用reflection协议来进行服务端调试的。可以list出服务端的接口定义，以及命令行构造请求进行调试。\n- 运行时构造gRPC请求 ：客户端可以运行时根据反射的接口定义构造请求。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/reflection)\n\n\n\n\n**负载均衡**\n\n客户端负载均衡器\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/balancer)\n\n\n**认证**  \n\ngRPC主要的两种认证方式：\n- 基于SSL/TLS认证方式\n- Token认证方式\n\n两种方式可以同时应用\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/credentials)  实现了几种认证方式：\n- alts  \n- google \n- oauth\n- 自定义认证方式\n\n\n[go-grpc-middleware的实现](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/auth)\n\n\n\n**健康检查**\n\n\n服务端提供一个`Check`接口返回其状态信息。  \n客户端调用此接口获取到服务健康状态，是否可以继续提供服务。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/health)\n\n\n**keepalive**\n\n定期发送HTTP/2.0 pings帧来检测 connection 是否存活，如果断开则进行重新连接。  \n与健康检查区别在于keepalive是检查connection而健康检查是检查服务是否可用。\n\n\n[官方实现](https://godoc.org/google.golang.org/grpc/keepalive)\n\n\n**naming**\n\n命名解析。  \n通过服务命名来获取服务相关的信息来达到服务发现目的。  \n\n与balancer结合使用来实现进程内负载均衡与服务发现。  \n\n[官方实现](https://godoc.org/google.golang.org/grpc/naming)\n\n\n\n**限流**\n\n限制流量来保护服务端以防止服务过载。  \n\n可以在客户端，balancer，服务端 进行限流。\n\n[go-grpc-middleware实现服务端限流](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/ratelimit)\n\n\n\n\n**recovery**\n\n将服务内部的错误转换成gRPC错误码。  \n\n[go-grpc-middleware实现](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/recovery) ： recover go的panic， 并转换成gRPC错误。\n\n\n\n\n**重试**\n\n客户端对于返回某些gRPC错误码的请求进行重试。\n\n[go-grpc-middleware](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/retry)\n\n\n\n\n**tracing**\n\n在链路上下文携带tracing信息，以及将信息以opentracing的规范发送给`分布式链路分析服务`。\n\ntracing信息包含traceid,spanid,请求时间,错误信息,日志等等。  \n如：通过设置客户端spanid为服务端spanid的parent_spanid，这样就能知道是客户端调用了服务端rpc请求。\n\n\n[go-grpc-middleware实现opentracing的middleware](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing)\n\n[open-tracing](https://opentracing.io/docs/)\n\n\n\n\n### 微服务框架、组件\n\n[go-kit](https://github.com/go-kit) : 微服务组件  \n[micro](https://github.com/micro) : 微服务框架  \n[go-chassis](https://github.com/go-chassis/go-chassis) : 华为开发的go微服务框架  \n[go-grpc-middleware](https://github.com/grpc-ecosystem/go-grpc-middleware) : 服务端和客户端的一些中间件，认证、日志、分布式追踪跟重试等  \n[grpc-gateway](https://github.com/grpc-ecosystem/grpc-gateway) ：一个 protoc 的插件，可以将 gRPC 接口转换为对外暴露 RESTful API 的工具，同时还能生成 swagger 文档  \n\n\n\n\n\n### gRPC 与 负载均衡\n\n**进程内LB(Balancing-aware Client)**\n\n\n需要实现：\n- 服务注册\n- 健康检查\n- 服务发现\n- 负载均衡\n\n缺点：\n- 开发成本：要实现上述功能\n- 维护成本：不同语言栈的sdk维护与升级\n\n\n\n[官方](https://godoc.org/google.golang.org/grpc/balancer)已经提供接口来实现进程内的负载均衡。同时结合服务发现，健康检查一起使用。\n\n\n\n\n**集中式LB(Proxy Model)**\n\nproxy 实现服务发现，健康检查，负载均衡等等。  \n还方便做限流等控制和其他统一控制策略。\n\n缺点：\n- 单点问题\n- 多一层性能开销\n- 不方便调试\n\n\n***Nginx***\n\n> Nginx(1.13.10已经支持gRPC) \n\n\n\n\n```\nupstream grpcservers {\n    server localhost:50000;\n    server localhost:50001;\n}\n\nserver {\n    listen 9000 http2;\n\n    # router\n    location /user.UserService {\n        grpc_pass grpc://grpcservers;\n        error_page 502 = /error502grpc;\n    }\n    \n    # 将默认错误页面更改成gRPC状态码\n    location = /error502grpc {\n        internal;\n        default_type application/grpc;\n        add_header grpc-status 14;\n        add_header grpc-message \"unavailable\";\n        return 204;\n    }\n}\n```\n\n[nginx gRPC module](https://nginx.org/en/docs/http/ngx_http_grpc_module.html)\n\n\n\n\n**独立LB进程(External Load Balancing Service)**\n\n在主机上部署独立的LB进程，来实现服务发现，健康检查，负载均衡等功能。  \n不用对于不同语言维护不同sdk版本；  \n常常用于微服务service mesh。\n\n缺点：\n- 单点问题：但是只影响本机\n- 不方便调试\n\n常用的组件：  \n- [Istio](https://istio.io/)  \n- [Envoy](https://github.com/lyft/envoy)\n\n\n\n\n\n\n\n---\n\n# gRPC 生态环境\n\n## 组件\n\n grpc 只是实现了 RPC 核心功能，缺少很多微服务的特性（服务注册发现、监控、治理、管理等），而基于 HTTP/2 相对来说比较容易进行扩展。\n \n[grpc-ecosystem](https://github.com/grpc-ecosystem) 上有一些比较优秀的外围组件来完善gRPC的生态体系  \n\n\n[awesome-grpc](https://github.com/grpc-ecosystem/awesome-grpc) 收集了一些优秀的gRPC项目   \n\n\n\n\n## grpc 文档与交流\n\n**文档**\n\n- 官网文档 : https://grpc.io/docs/ \n- github 上 grpc 仓库下的 doc ： https://github.com/grpc/grpc/tree/master/doc\n- 博客 : https://grpc.io/blog/\n\n**交流**\n\nhttps://grpc.io/community/ 交流的方式有：\n- 邮件列表\n- Gitter\n- Reddit\n- Meetup Group \n\n\n\n\n\n\n\n\n\n\n# 参考\n\n[grpc.io](https://grpc.io/docs/guides)\n\n[developers.google.com](https://developers.google.com/protocol-buffers/docs)\n\n[gRPC github doc](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#Requests)\n\n[http2 specs](https://tools.ietf.org/html/rfc7540)    \nor   \n[github http2 spec](http://http2.github.io/http2-spec/#StreamPriority)\n","slug":"grpc","published":1,"updated":"2020-04-15T04:22:01.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9115hpk0002ppfcvrvp01pb","content":"<blockquote>\n<p>grpc 特性、原理、实践、生态<a id=\"more\"></a>  </p>\n</blockquote>\n<h1 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h1><h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>gRPC是一个由google设计开发基于HTTP/2协议和Protobuf序列化协议的的高性能、多语言、通用的开源 RPC 框架。  </p>\n<p>跨语言、跨平台<br>插件化 ： 负载均衡，tracing，健康检查，认证等等<br>编码压缩 ： 节省带宽<br>多路复用 ： 降低的 TCP 链接次数</p>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>低延迟、高扩展的分布式系统</li>\n<li>与云服务通信</li>\n<li>设计一个需要准确，高效且与语言无关的新协议</li>\n<li>分层设计，以实现扩展，例如：身份验证，负载平衡，日志记录和监控等</li>\n</ul>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><p><strong>基于HTTP/2</strong></p>\n<p>HTTP/2 提供了 链接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制。<br>gRPC 协议使用了HTTP2 现有的语义，请求和响应的数据使用HTTP Body 发送，其他的控制信息则用Header 表示。</p>\n<p><strong>IDL使用ProtoBuffer</strong></p>\n<p>gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON）。<br>ProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。<br>压缩和传输效率高，向后兼容，语法简单，表达力强。</p>\n<p><strong>多语言支持</strong></p>\n<p>gRPC支持多种语言，并能够基于语言自动生成客户端和服务端。  </p>\n<p>目前支持： C#, C++, Dart, Go, Java, Node, Objective-C, PHP, Python, Ruby 等。 </p>\n<p><a href=\"https://grpc.io/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">详见官网</a></p>\n<h1 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h1><h2 id=\"HTTP-2-1\"><a href=\"#HTTP-2-1\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p>HTTP/1.x 是超文本传输协议第1版，可读性好，但效率不高。<br>而HTTP/2 是超文本传输协议第2版，是一个二进制协议。</p>\n<p>HTTP/1 和 HTTP/2 的基本语义并没有改变，如方法语义（GET/PUST/PUT/DELETE），状态码（200/404/500等），Range Request，Cacheing，Authentication、URL路径。</p>\n<p><strong>HTTP/2通用术语：</strong></p>\n<ul>\n<li>Stream： 流，一个双向流，一条连接可以有多个 streams。</li>\n<li>Message： 逻辑上面的 request，response。</li>\n<li>Frame：帧，HTTP/2 数据传输的最小单位。每个 Frame 都属于一个特定的 stream。一个 message 可能由多个 frame 组成。</li>\n</ul>\n<p><strong>HTTP/2 流、帧</strong>   </p>\n<p>HTTP/2连接上传输的每个帧(frame)都关联到一个流，一个连接上可以同时有多个流，<br>同一个流的帧按序传输，不同流的帧交错混合传输，<br>客户端、服务端双方都可以建立流，流也可以被任意一方关闭。<br>客户端发起的流使用奇数流ID，服务端发起的使用偶数。</p>\n<p><a href=\"https://httpwg.org/specs/rfc7540.html#rfc.section.4.1\" target=\"_blank\" rel=\"noopener\">Frame结构 : </a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------------+</span><br><span class=\"line\">|                 Length (24)                   |</span><br><span class=\"line\">+---------------+---------------+---------------+</span><br><span class=\"line\">|   Type (8)    |   Flags (8)   |</span><br><span class=\"line\">+-+-------------+---------------+-------------------------------+</span><br><span class=\"line\">|R|                 Stream Identifier (31)                      |</span><br><span class=\"line\">+=+=============================================================+</span><br><span class=\"line\">|                   Frame Payload (0...)                      ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Length ： 也就是 Frame 的长度</li>\n<li>Type ：Frame 的类型，有 DATA，HEADERS，SETTINGS 等</li>\n<li>Flags ：帧标志位，8个比特表示可以容纳8个不同的标志：stream是否结束(END_STREAM)，header是否结束(END_HEADERS)，priority等等</li>\n<li>R：保留位</li>\n<li>Stream Identifier：标识frame所属的 stream，如果为 0，则表示这个 frame 属于整条连接(如SETTINGS帧)</li>\n<li>Frame Payload：帧内容</li>\n</ul>\n<p><strong>帧类型</strong>  </p>\n<ul>\n<li>HEADERS 类似于HTTP/1的 Headers</li>\n<li>DATA 类似于HTTP/1的 Body</li>\n<li>CONTINUATION 头部太大，分多个帧传输（一个HEADERS+若干CONTINUATION）</li>\n<li>SETTINGS 连接设置</li>\n<li>WINDOW_UPDATE 流量控制</li>\n<li>PUSH_PROMISE 服务端推送</li>\n<li>PRIORITY 流优先级更改</li>\n<li>PING 心跳或计算RTT</li>\n<li>RST_STREAM 马上中止一个流</li>\n<li>GOAWAY 关闭连接并且发送错误信息</li>\n</ul>\n<h2 id=\"HTTP-2-特性\"><a href=\"#HTTP-2-特性\" class=\"headerlink\" title=\"HTTP/2 特性\"></a>HTTP/2 特性</h2><p><strong>新的二进制格式（Binary Format）</strong></p>\n<p>HTTP/1 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同。<br>基于这种考虑HTTP/2的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p><strong>多路复用（MultiPlexing）</strong></p>\n<p>HTTP/1 的request是阻塞的，如果想并发发送多个request，必须使用多个 TCP connection。这样会消耗更多资源，且浏览器为了控制资源，会对单个域名有TCP connection请求限制。</p>\n<p>HTTP/2 一个TCP connection可以有多个streams(最大数量由参数SETTINGS_MAX_CONCURRENT_STREAMS控制)， 多个streams 并行发送不同的请求的frames。  </p>\n<p>可以在SETTINGS帧中设置<code>SETTINGS_MAX_CONCURRENT_STREAMS</code>。<br>而此值是针对一端而言的，客户端可以告知服务器最大的streams并发数，服务端也可以告知客户端。  </p>\n<blockquote>\n<p>如果一条链接上 ID 分配完了， server 则会给 client 发送一个 GOAWAY frame 强制让 client 新建一条连接。</p>\n</blockquote>\n<p><strong>header压缩</strong></p>\n<p>HTTP/1 是使用文本协议，而且header每次都要重复发送，浪费了带宽也导致资源加载过慢。</p>\n<p>HTTP/2 采取了压缩和缓存来避免重复发送和带宽问题：</p>\n<ul>\n<li>对消息头采用HPACK 进行压缩传输来节省消息头占用的网络的流量。</li>\n<li>对这些headers采取了压缩策略来减少重复headers的请求数<ul>\n<li>HTTP/2在客户端和服务器端使用 headlist 来存储之前发送过的 header，对于相同的header，不再通过每次请求和响应发送；</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"noopener\">HPACK: Header Compression for HTTP/2</a></p>\n<p><strong>服务端推送</strong></p>\n<p>server push功能 : 在无需客户端请求资源的情况下，服务端会直接推送客户端可能需要的资源到客户端。  </p>\n<p>当服务器想用Server Push推送资源时，会先向客户端发送PUSH_PROMISE帧。<br>推送的响应必须与客户端的某个请求相关联，因此服务器会在客户端请求的流上发送PUSH_PROMISE帧。</p>\n<p><strong>优先级排序</strong></p>\n<p>设置优先级的目的是为了告诉对端在并发的多个流之间如何分配资源的行为，同时当发送容量有限时，可以使用优先级来选择用于发送帧的流。  </p>\n<p>客户端可以通过 HEADERS 帧的 PRIORITY 信息指定一个新建立流的优先级，也可以发送 PRIORITY 帧调整流优先级。</p>\n<p><a href=\"http://http2.github.io/http2-spec/#StreamPriority\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\n<p><strong>Flow Control</strong></p>\n<p>HTTP/2 支持流控，receiver 端可以对某些stream进行流控也可以针对整个connection流控。<br>而TCP层只能针对整个connection进行流控。  </p>\n<p>特性 ：</p>\n<ul>\n<li>Flow control 是由方向的 : Receiver 可以选择给 stream 或者整个连接设置接收端的 window size。</li>\n<li>Flow control 是基于信任的 : Receiver 只是会给 sender 建议 连接和 stream 的 flow control window size。</li>\n<li>Flow control 无法禁止 </li>\n<li>Flow control 是基于WINDOW_UPDATE帧的</li>\n<li>Flow control 是 hop-by-hop的，而不是 end-to-end 的。例如，用nginx做proxy，则flow control作用于nginx到server和client到nginx这两个connection。</li>\n</ul>\n<blockquote>\n<p>Connection 和 stream 的初始 flow-control window 大小都是 65535。<br>Connection 的初始窗口大小不能改变，但 stream 的可以(所有stream)，通过发送 SETTINGS 帧，携带 <code>SETTINGS_INITIAL_WINDOW_SIZE</code>，这个值即为新的 stream flow-control window 初始大小。</p>\n</blockquote>\n<blockquote>\n<p>增加flow control window size能加快数据传输，但同时会消耗更多资源。</p>\n</blockquote>\n<p><strong>主动重置链接</strong></p>\n<p>HTTP/1 的body的length的被送给客户端后，服务端就无法中断请求了，只能断开整个TCP connection，但这样导致的代价就是需要重新通过三次握手建立一个新的TCP连接。</p>\n<p>HTTP/2 引入了一个 RST_STREAM frame 来让客户端在已有的连接中发送重置请求，从而中断或者放弃响应。当浏览器进行页面跳转或者用户取消下载时，它可以防止建立新连接，避免浪费所有带宽。</p>\n<h2 id=\"HTTP-2-站点demo\"><a href=\"#HTTP-2-站点demo\" class=\"headerlink\" title=\"HTTP/2 站点demo\"></a>HTTP/2 站点demo</h2><p>HTTP/1 和 HTTP/2 加载速度比较：<br><a href=\"https://http2.akamai.com/demo\" target=\"_blank\" rel=\"noopener\">https://http2.akamai.com/demo</a></p>\n<p>访问http2站点 ：<br><a href=\"https://http2.golang.org/\" target=\"_blank\" rel=\"noopener\">https://http2.golang.org/</a></p>\n<h1 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h1><h2 id=\"ProtoBuf-1\"><a href=\"#ProtoBuf-1\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p><strong>Google Protocol Buffer</strong>  </p>\n<p>是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<ul>\n<li>描述简单，对开发人员友好</li>\n<li>跨平台、跨语言，不依赖于具体运行平台和编程语言</li>\n<li>高效自动化解析和生成</li>\n<li>压缩比例高</li>\n<li>可扩展、兼容性好</li>\n</ul>\n<p><strong>gRPC与protobuf</strong></p>\n<p>gRPC使用 protobuf 作为IDL来定义数据结构和服务。 可以定义数据结构，也可以定义rpc 接口。<br>然后用proto编译器生成对应语言的框架代码。</p>\n<ul>\n<li>定义数据结构 ： 生成对象的 序列化 代码</li>\n<li>定义rpc接口 ： 生成 gRPC服务端、客户端响应的代码</li>\n</ul>\n<h2 id=\"protobuf-基本数据类型\"><a href=\"#protobuf-基本数据类型\" class=\"headerlink\" title=\"protobuf 基本数据类型\"></a>protobuf 基本数据类型</h2><p><a href=\"https://developers.google.com/protocol-buffers/docs/proto#scalar\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/protocol-buffers/docs/proto#scalar</a></p>\n<h2 id=\"数据结构定义\"><a href=\"#数据结构定义\" class=\"headerlink\" title=\"数据结构定义\"></a>数据结构定义</h2><p>user.proto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;google/protobuf/any.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//package user;</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message User &#123;</span><br><span class=\"line\">  int32 id = 1;</span><br><span class=\"line\">  string name = 2;</span><br><span class=\"line\">  uint32 age = 3;</span><br><span class=\"line\">  enum Flag &#123;</span><br><span class=\"line\">    NORMAL = 0;</span><br><span class=\"line\">    VIP = 1;</span><br><span class=\"line\">    SVIP = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  repeated int32 friends_ids = 5;</span><br><span class=\"line\">  reserved 6, 7, 8;</span><br><span class=\"line\">  message Command &#123;</span><br><span class=\"line\">      int32 id = 1;</span><br><span class=\"line\">      oneof cmd_value &#123;</span><br><span class=\"line\">         string name = 2;</span><br><span class=\"line\">         int32 age = 3;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Command cmd = 9;</span><br><span class=\"line\">  map&lt;int32, string&gt; tags = 10;</span><br><span class=\"line\">  google.protobuf.Any details = 11;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>package</strong></p>\n<p>package声明符，用来防止不同的消息类型有命名冲突。<br>生成的代码将会包含再package(go等语言)或者命名空间(c++, java等)中。</p>\n<p><code>option go_package = &quot;protos_golang/user&quot;;</code><br><code>$LANGUAGE_package</code> 是指定生成的代码的import path和package。</p>\n<p><strong>import</strong></p>\n<p>要导入其他.proto文件的定义，在文件中添加一个导入声明。<br>使用导入proto的类型 <code>package名字.结构名</code> 来使用导入proto的类型。<br>如上面<code>common.Flag</code> </p>\n<p><strong>分配字段编号</strong></p>\n<p>每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的。<br>为了保证向后兼容，一旦开始使用就不要再改变。 </p>\n<p><strong>文件版本申明</strong></p>\n<p><code>syntax = &quot;proto2&quot;;</code> 指定使用proto2语法<br><code>syntax = &quot;proto3&quot;;</code> 指定为proto3语法  </p>\n<p><strong>标识符修饰符</strong></p>\n<p>required 和 optional 是proto2的语法，proto3已经不支持。<br>proto3中所有的字段都是optional的。<a href=\"https://github.com/protocolbuffers/protobuf/issues/2497\" target=\"_blank\" rel=\"noopener\">具体原因见</a> </p>\n<ul>\n<li>required : 必须字段。</li>\n<li>optional ：可选字段。</li>\n<li>repeated ：数组类型字段。</li>\n<li>reserved ：保留字段。指出这些字段编号已经删除，不要再重用这些编号了。因为如果这些编号被重新定义成其他类型，那么对于旧版本的protobuf数据，会导致解码错误。</li>\n</ul>\n<p><strong>枚举</strong></p>\n<p>与数据结构中 enum 类似。字段编号从0开始。</p>\n<p><strong>oneof</strong></p>\n<p>oneof与数据结构联合体(UNION)类似，一次最多只有一个字段有效。</p>\n<p><strong>map</strong></p>\n<p>map 类型则可以用来表示键值对。<br>key_type 可以是任何 int 或者 string 类型，float、double 和 bytes除外</p>\n<p><strong>any</strong></p>\n<p>Any类型包括:</p>\n<ul>\n<li>bytes : 被序列化为bytes类型的任意消息</li>\n<li>URL : 全局标识符</li>\n</ul>\n<p>使用<code>import google/protobuf/any.proto</code>来导入any类型</p>\n<p>any可以用来替换proto2中的extension</p>\n<p><strong>嵌套类型</strong></p>\n<p>可以在消息类型中定义其他消息类型</p>\n<h2 id=\"服务定义\"><a href=\"#服务定义\" class=\"headerlink\" title=\"服务定义\"></a>服务定义</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto2&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;user.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service UserService &#123;</span><br><span class=\"line\">// rpc interface</span><br><span class=\"line\">    rpc GetUserInfo(UserRequest) returns (UserResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">    uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserResponse &#123;</span><br><span class=\"line\">    user.User user = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在 .proto 文件中定义了 RPC 服务接口， 编译器将使用生成服务接口代码和 stubs。</p>\n<p><code>import &quot;user.proto&quot;;</code> 导入user结构定义的proto文件。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>protoc编译器通过插件机制实现对不同语言的支持。<br>protoc会先查找是否有内置的语言插件，如果没有，则会去查找系统中是否存在<code>protoc-gen-$LANGUAGE</code> 的插件。<br>例如：<br>如果指定<code>--go_out</code>参数，那么protoc会查询是否有内置的<code>go</code>插件，如果没有则继续查询系统中是否存在<code>protoc-gen-go</code>的可执行程序，再通过插件来生成相关的语言代码。</p>\n<p><strong>插件运行流程：</strong></p>\n<ul>\n<li>protoc 启动 protoc-gen-xx</li>\n<li>将<code>CodeGeneratorRequest</code>的protobuf二进制传入到 protoc-gen-xx的标准输入<ul>\n<li>protoc-gen-xx读取标准输入再反序列化成<code>CodeGeneratorRequest</code></li>\n<li>遍历<code>CodeGeneratorRequest</code>的<code>FileDescriptorProto</code>数组，其描述了proto文件的语法树</li>\n<li>将<code>FileDescriptorProto</code>编译成语言源码</li>\n<li>生成<code>CodeGeneratorResponse</code>对象输出到标准输出</li>\n</ul>\n</li>\n<li>protoc根据protoc-gen-xx的标准输出再生成源码文件</li>\n</ul>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto\" target=\"_blank\" rel=\"noopener\">plugin.proto</a>定义了<code>CodeGeneratorRequest</code> 和 <code>CodeGeneratorResponse</code>，是protoc与插件交互的对象。  </p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto\" target=\"_blank\" rel=\"noopener\">descriptor.proto</a>描述的是一个<code>.proto</code>文件的语法树</p>\n<p><strong>插件的plugins</strong></p>\n<p>插件本身的也是支持以内部plugins形式进行扩展的。</p>\n<p>例如：生成go grpc的命令中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=plugins=grpc:. pb/user.proto</span><br></pre></td></tr></table></figure>\n\n<p>grpc就是 proto-gen-go的plugin。  </p>\n<p><a href=\"https://github.com/golang/protobuf/blob/master/protoc-gen-go/grpc/grpc.go#L72\" target=\"_blank\" rel=\"noopener\">代码</a> </p>\n<p><code>Name()</code>返回grpc命名就是plugin的名字，就是上面<code>plugins=grpc</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Name returns the name of this plugin, &quot;grpc&quot;.</span><br><span class=\"line\">func (g *grpc) Name() string &#123;</span><br><span class=\"line\">\treturn &quot;grpc&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"gRPC-原理\"><a href=\"#gRPC-原理\" class=\"headerlink\" title=\"gRPC 原理\"></a>gRPC 原理</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"https://grpc.io/img/landing-2.svg\" alt=\"image\"></p>\n<p>gRPC 定义服务，服务包含远程调用的方法。<br>在服务器端，服务器实现rpc接口并运行一个gRPC服务器来处理客户端请求。<br>在客户端，客户端有一个”存根stub”，提供与服务器相同签名的方法，来处理客户端请求的编码、解码等，再将请求转发到服务器端，这样客户端调用rpc方法就像调用本地函数一样。  </p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>gRPC把HTTP2的steam identifier当作请求ID，每一次请求都发起一个新的stream。</p>\n<p>请求的方法、响应的状态码等都放在HEADER frame中。<br>而请求内容和响应内容由protobuf序列化后使用DATA frame中。</p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>Request主要由 Request-Headers 和 Data 以及 EOS (END_STREAM)组成。  </p>\n<p>如下图：</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_request_stream_decoded_wireshark.png\" alt=\"image\"></p>\n<p><strong>Request-Headers</strong>  </p>\n<p>Request-Headers 由 HEADERS 和 CONTINUATION frames 组成。<br>如果Flags有设置标志位<code>END_HEADERS</code>则代表Request-Headers结束。  </p>\n<p>Request-Headers 主要有 <code>Call-Definition</code> 以及 <code>Custom-Metadata</code> :</p>\n<ul>\n<li>Call-Definition : 包括 Method, Scheme, Path, TE, Authority, Timeout, Content-Type ,Message-Type, Message-Encoding, Message-Accept-Encoding, User-Agent</li>\n<li>Custom-Metadata : 应用层自定义的任意 key-value，key 不要使用gRPC保留的key前缀字符 <code>grpc-</code> 。</li>\n</ul>\n<p><strong>Data</strong></p>\n<p>请求体，由一个或多个 Data frame组成。<br>如果Flags有设置标志位<code>END_STREAM</code>则代表Data结束，请求结束。 </p>\n<p><strong>request格式大致如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># request-headers </span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS (flags = END_HEADERS)</span><br><span class=\"line\">:method = POST</span><br><span class=\"line\">:scheme = http</span><br><span class=\"line\">:path = /user.UserService/GetUserInfo</span><br><span class=\"line\">:authority = localhost:50000</span><br><span class=\"line\">grpc-timeout = 999127u</span><br><span class=\"line\">content-type = grpc-go/1.20.0-dev</span><br><span class=\"line\"></span><br><span class=\"line\">## 自定义metadata</span><br><span class=\"line\">service : test_client</span><br><span class=\"line\">traceid : xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"># data</span><br><span class=\"line\">DATA (flags = END_STREAM)</span><br><span class=\"line\">&lt;Length-Prefixed Message&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><p>Response 主要由 Response-Headers 和 Data 以及 Trailers 组成。<br>如果遇到了错误，也可以直接返回 Trailers-Only。</p>\n<p>如下图：</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_response_stream_decoded_wireshark.png\" alt=\"image\"></p>\n<p><strong>Response-Headers</strong></p>\n<p>Response-Headers 包含 : HTTP-Status, Message-Encoding, Message-Accept-Encoding, Content-Type, Custom-Metadata等。</p>\n<p><strong>Data</strong></p>\n<p>响应体，由一个或多个 Data frame组成。<br>如果Flags有设置标志位<code>END_STREAM</code>则代表Data结束。 </p>\n<p><strong>Trailers</strong></p>\n<p>Trailers-Only 包含 HTTP-Status, Content-Type, Trailers等。</p>\n<p>Trailers 包含 Status, Status-Message, Custom-Metadata等。</p>\n<p>Trailers作用主要是给响应包含一些额外的动态生成的信息。<br>如：消息body发送后，再发送一些信息 如数字签名，后处理状态等</p>\n<p>格式大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># response-headers</span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS (flags = END_HEADERS)</span><br><span class=\"line\">:status = status: 200 </span><br><span class=\"line\">content-type = application/grpc</span><br><span class=\"line\"></span><br><span class=\"line\">## 自定义metadata</span><br><span class=\"line\">service: server_test</span><br><span class=\"line\">spanid: xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># data</span><br><span class=\"line\">DATA</span><br><span class=\"line\">&lt;Length-Prefixed Message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># headers</span><br><span class=\"line\">HEADERS (flags = END_STREAM, END_HEADERS)</span><br><span class=\"line\">grpc-status: 0</span><br><span class=\"line\"></span><br><span class=\"line\">## trailers 自定义metadata</span><br><span class=\"line\">timestamp: 1560656283730441829</span><br></pre></td></tr></table></figure>\n\n<p><strong>Status code</strong></p>\n<p><a href=\"https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\" target=\"_blank\" rel=\"noopener\">HTTP状态码对应的gRPC状态码</a></p>\n<h2 id=\"gRPC通信方式\"><a href=\"#gRPC通信方式\" class=\"headerlink\" title=\"gRPC通信方式\"></a>gRPC通信方式</h2><p>gRPC有四种通信方式: </p>\n<p>1、 unary RPC </p>\n<p>一般的rpc调用，客户端发送一个请求对象，然后等待服务端返回一个响应对象 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取用户信息</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc GetUserInfo (UserRequest) returns (UserResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、 Server-side streaming RPC </p>\n<p>服务端流式rpc </p>\n<p>客户端发起一个请求到服务端，服务端返回一段连续的数据流响应。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个用户的所有地理位置历史记录</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc UserLocationsStream(UserRequest) returns (stream LocationsResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、 Client-side streaming RPC </p>\n<p>客户端流式rpc </p>\n<p>客户端将一段连续的数据流发送到服务端，服务端返回一个响应。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端将所有数据备份到服务端</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc BackupStream(stream BackupRequest) returns (BackupResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、 Bidirectional streaming RPC </p>\n<p>双向流式rpc </p>\n<p>客户端将连续的数据流发送到服务端，服务端返回交互的数据流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在线聊天</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc LiveChat(stream Message) returns (stream Message) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><strong>waitForReady</strong></p>\n<p>发送请求时，如果connection没有ready，则会一直等待connection ready 或直到超时(达到deadline)。<br>也常称为<code>fail fast</code>。</p>\n<p><strong>timeout</strong></p>\n<p>请求超时时间。<br>如果超时，则会中止请求且返回DEADLINE_EXCEEDED 错误。</p>\n<p><strong>maxRequestMessageBytes</strong></p>\n<p>请求体的最大payload size(没有压缩的)。<br>如果客户端请求大于此值的请求会返回RESOURCE_EXHAUSTED错误。 </p>\n<p><strong>maxResponseMessageBytes</strong></p>\n<p>响应体的最大payload size(没有压缩的)。<br>如果服务端响应大于此值，响应将发送失败。且客户端会得到RESOURCE_EXHAUSTED错误。 </p>\n<hr>\n<h1 id=\"gRPC-实践\"><a href=\"#gRPC-实践\" class=\"headerlink\" title=\"gRPC 实践\"></a>gRPC 实践</h1><p>实践部分以go语言进行demo</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p><strong>安装protoc</strong></p>\n<p>mac</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<p>linux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROTOC_ZIP=protoc-3.5.1-linux-x86_64.zip</span><br><span class=\"line\">curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/$PROTOC_ZIP</span><br><span class=\"line\"></span><br><span class=\"line\">sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc</span><br><span class=\"line\">sudo unzip -o $PROTOC_ZIP -d /usr/local include/*</span><br><span class=\"line\">rm -f $PROTOC_ZIP</span><br></pre></td></tr></table></figure>\n\n<p><strong>golang的protobuffers插件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/&#123;protoc-gen-go,proto&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><h3 id=\"定义proto文件\"><a href=\"#定义proto文件\" class=\"headerlink\" title=\"定义proto文件\"></a>定义proto文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;google/protobuf/any.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//package user;</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message User &#123;</span><br><span class=\"line\">  int32 id = 1;</span><br><span class=\"line\">  string name = 2;</span><br><span class=\"line\">  uint32 age = 3;</span><br><span class=\"line\">  enum Flag &#123;</span><br><span class=\"line\">    NORMAL = 0;</span><br><span class=\"line\">    VIP = 1;</span><br><span class=\"line\">    SVIP = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  repeated int32 friends_ids = 5;</span><br><span class=\"line\">  reserved 6, 7, 8;</span><br><span class=\"line\">  message Command &#123;</span><br><span class=\"line\">      int32 id = 1;</span><br><span class=\"line\">      oneof cmd_value &#123;</span><br><span class=\"line\">         string name = 2;</span><br><span class=\"line\">         int32 age = 3;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Command cmd = 9;</span><br><span class=\"line\">  map&lt;int32, string&gt; tags = 10;</span><br><span class=\"line\">  google.protobuf.Any details = 11;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">service UserService &#123;</span><br><span class=\"line\">// rpc interface</span><br><span class=\"line\">    rpc GetUserInfo(UserRequest) returns (UserResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">    uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserResponse &#123;</span><br><span class=\"line\">    User user = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><p><strong>生成代码的导入路径和包名</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## protos_golang ： 生成代码的路径</span><br><span class=\"line\">## user : golang package 名</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>目标代码</strong></p>\n<ul>\n<li>如果包含rpc接口：则需要指定插件<code>plugins=grpc</code></li>\n<li><code>--go_out=.</code> ： 生成的代码在<code>当前目录</code>; 也可以指定其他目录，如:<code>--go_out=/tmp</code></li>\n<li>代码路径 ： <ul>\n<li>如果.pb中指定了<code>go_package</code> : 代码路径是 <code>./$go_package/user.pb.go</code></li>\n<li>如果.pb中没有指定<code>go_package</code> : 则代码路径是 <code>./pb/user.pb.go</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=plugins=grpc:. pb/user.proto</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果没有rpc定义</span><br><span class=\"line\">protoc --go_out=. pb/user.proto</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">    &quot;google.golang.org/grpc/reflection&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tpb &quot;testgrpc/protos_golang/user&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\tport = &quot;:50000&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// grpc server</span><br><span class=\"line\">type server struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实现gRPC接口</span><br><span class=\"line\">func (s *server) GetUserInfo(ctx context.Context, in *pb.UserRequest) (*pb.UserResponse, error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn &amp;pb.UserResponse&#123;</span><br><span class=\"line\">\t\tUser: &amp;pb.User&#123;</span><br><span class=\"line\">\t\t\tName: &quot;test_user&quot;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 拦截器，简单打印下日志</span><br><span class=\"line\">func LogUnaryInterceptorMiddleware() grpc.UnaryServerInterceptor &#123;</span><br><span class=\"line\">\treturn func(ctx context.Context, req interface&#123;&#125;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (r interface&#123;&#125;, err error) &#123;</span><br><span class=\"line\">\t\tr, err = handler(ctx, req)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Printf(&quot;fullMethod(%s), errCode(%v)\\n&quot;, info.FullMethod, err)</span><br><span class=\"line\">\t\treturn r, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, port)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;failed to listen: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 拦截器</span><br><span class=\"line\">    options := grpc.UnaryInterceptor(LogUnaryInterceptorMiddleware())</span><br><span class=\"line\">\ts := grpc.NewServer(options)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 注册服务器实现</span><br><span class=\"line\">\tpb.RegisterUserServiceServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 注册服务端反射</span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 启动服务器</span><br><span class=\"line\">\tif err := s.Serve(lis); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;failed to serve: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpb &quot;testgrpc/protos_golang/user&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\taddress = &quot;localhost:50000&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;did not connect: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer conn.Close()</span><br><span class=\"line\">\tc := pb.NewUserServiceClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr, err := c.GetUserInfo(ctx, &amp;pb.UserRequest&#123;&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;fatal: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(&quot;response: %s&quot;, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>为了方便调试服务端，所以服务端需要支持reflection功能。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reflection.Register(grpcServer)</span><br></pre></td></tr></table></figure>\n\n<p>两款比较著名的调试工具：</p>\n<ul>\n<li>[grpc_cli](<a href=\"https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md\" target=\"_blank\" rel=\"noopener\">https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md</a> : 官方的</li>\n<li><a href=\"https://github.com/fullstorydev/grpcurl\" target=\"_blank\" rel=\"noopener\">grpcurl</a> : go的，安装简单</li>\n</ul>\n<p><strong>列出服务端注册的service</strong></p>\n<p>如果没有配置好公钥和私钥文件，也没有忽略证书的验证过程，则需要加<code>-plaintext</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 list </span><br><span class=\"line\">grpc.reflection.v1alpha.ServerReflection</span><br><span class=\"line\">user.UserService</span><br></pre></td></tr></table></figure>\n\n<p><strong>列出服务的接口</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 list  user.UserService</span><br><span class=\"line\">user.UserService.GetUserInfo</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取接口的签名</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 describe user.UserService.GetUserInfo</span><br><span class=\"line\">user.UserService.GetUserInfo is a method:</span><br><span class=\"line\">rpc GetUserInfo ( .user.UserRequest ) returns ( .user.UserResponse );</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取类型信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 describe .user.UserRequest</span><br><span class=\"line\">user.UserRequest is a message:</span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">  uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>调试接口</strong></p>\n<p>请求体以json的形式描述类型。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext -d &apos;&#123;&quot;id&quot;:1&#125;&apos;   localhost:50000  user.UserService.GetUserInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;test_user&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"go-gRPC-生态\"><a href=\"#go-gRPC-生态\" class=\"headerlink\" title=\"go gRPC 生态\"></a>go gRPC 生态</h2><h3 id=\"服务组件\"><a href=\"#服务组件\" class=\"headerlink\" title=\"服务组件\"></a>服务组件</h3><p><strong>上下文信息传递</strong></p>\n<p>rpc客户端将上下文信息传递给服务端。<br>链路调用信息，服务信息，认证信息等等。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/metadata\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>服务器反射</strong></p>\n<p>服务端反射协议， 可以用途于:</p>\n<ul>\n<li>服务端调试 : grpcurl 工具就是用reflection协议来进行服务端调试的。可以list出服务端的接口定义，以及命令行构造请求进行调试。</li>\n<li>运行时构造gRPC请求 ：客户端可以运行时根据反射的接口定义构造请求。</li>\n</ul>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/reflection\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>负载均衡</strong></p>\n<p>客户端负载均衡器</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/balancer\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>认证</strong>  </p>\n<p>gRPC主要的两种认证方式：</p>\n<ul>\n<li>基于SSL/TLS认证方式</li>\n<li>Token认证方式</li>\n</ul>\n<p>两种方式可以同时应用</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/credentials\" target=\"_blank\" rel=\"noopener\">官方实现</a>  实现了几种认证方式：</p>\n<ul>\n<li>alts  </li>\n<li>google </li>\n<li>oauth</li>\n<li>自定义认证方式</li>\n</ul>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/auth\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware的实现</a></p>\n<p><strong>健康检查</strong></p>\n<p>服务端提供一个<code>Check</code>接口返回其状态信息。<br>客户端调用此接口获取到服务健康状态，是否可以继续提供服务。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/health\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>keepalive</strong></p>\n<p>定期发送HTTP/2.0 pings帧来检测 connection 是否存活，如果断开则进行重新连接。<br>与健康检查区别在于keepalive是检查connection而健康检查是检查服务是否可用。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/keepalive\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>naming</strong></p>\n<p>命名解析。<br>通过服务命名来获取服务相关的信息来达到服务发现目的。  </p>\n<p>与balancer结合使用来实现进程内负载均衡与服务发现。  </p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/naming\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>限流</strong></p>\n<p>限制流量来保护服务端以防止服务过载。  </p>\n<p>可以在客户端，balancer，服务端 进行限流。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/ratelimit\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现服务端限流</a></p>\n<p><strong>recovery</strong></p>\n<p>将服务内部的错误转换成gRPC错误码。  </p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/recovery\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现</a> ： recover go的panic， 并转换成gRPC错误。</p>\n<p><strong>重试</strong></p>\n<p>客户端对于返回某些gRPC错误码的请求进行重试。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/retry\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware</a></p>\n<p><strong>tracing</strong></p>\n<p>在链路上下文携带tracing信息，以及将信息以opentracing的规范发送给<code>分布式链路分析服务</code>。</p>\n<p>tracing信息包含traceid,spanid,请求时间,错误信息,日志等等。<br>如：通过设置客户端spanid为服务端spanid的parent_spanid，这样就能知道是客户端调用了服务端rpc请求。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现opentracing的middleware</a></p>\n<p><a href=\"https://opentracing.io/docs/\" target=\"_blank\" rel=\"noopener\">open-tracing</a></p>\n<h3 id=\"微服务框架、组件\"><a href=\"#微服务框架、组件\" class=\"headerlink\" title=\"微服务框架、组件\"></a>微服务框架、组件</h3><p><a href=\"https://github.com/go-kit\" target=\"_blank\" rel=\"noopener\">go-kit</a> : 微服务组件<br><a href=\"https://github.com/micro\" target=\"_blank\" rel=\"noopener\">micro</a> : 微服务框架<br><a href=\"https://github.com/go-chassis/go-chassis\" target=\"_blank\" rel=\"noopener\">go-chassis</a> : 华为开发的go微服务框架<br><a href=\"https://github.com/grpc-ecosystem/go-grpc-middleware\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware</a> : 服务端和客户端的一些中间件，认证、日志、分布式追踪跟重试等<br><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"noopener\">grpc-gateway</a> ：一个 protoc 的插件，可以将 gRPC 接口转换为对外暴露 RESTful API 的工具，同时还能生成 swagger 文档  </p>\n<h3 id=\"gRPC-与-负载均衡\"><a href=\"#gRPC-与-负载均衡\" class=\"headerlink\" title=\"gRPC 与 负载均衡\"></a>gRPC 与 负载均衡</h3><p><strong>进程内LB(Balancing-aware Client)</strong></p>\n<p>需要实现：</p>\n<ul>\n<li>服务注册</li>\n<li>健康检查</li>\n<li>服务发现</li>\n<li>负载均衡</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>开发成本：要实现上述功能</li>\n<li>维护成本：不同语言栈的sdk维护与升级</li>\n</ul>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/balancer\" target=\"_blank\" rel=\"noopener\">官方</a>已经提供接口来实现进程内的负载均衡。同时结合服务发现，健康检查一起使用。</p>\n<p><strong>集中式LB(Proxy Model)</strong></p>\n<p>proxy 实现服务发现，健康检查，负载均衡等等。<br>还方便做限流等控制和其他统一控制策略。</p>\n<p>缺点：</p>\n<ul>\n<li>单点问题</li>\n<li>多一层性能开销</li>\n<li>不方便调试</li>\n</ul>\n<p><strong><em>Nginx</em></strong></p>\n<blockquote>\n<p>Nginx(1.13.10已经支持gRPC) </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream grpcservers &#123;</span><br><span class=\"line\">    server localhost:50000;</span><br><span class=\"line\">    server localhost:50001;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 9000 http2;</span><br><span class=\"line\"></span><br><span class=\"line\">    # router</span><br><span class=\"line\">    location /user.UserService &#123;</span><br><span class=\"line\">        grpc_pass grpc://grpcservers;</span><br><span class=\"line\">        error_page 502 = /error502grpc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 将默认错误页面更改成gRPC状态码</span><br><span class=\"line\">    location = /error502grpc &#123;</span><br><span class=\"line\">        internal;</span><br><span class=\"line\">        default_type application/grpc;</span><br><span class=\"line\">        add_header grpc-status 14;</span><br><span class=\"line\">        add_header grpc-message &quot;unavailable&quot;;</span><br><span class=\"line\">        return 204;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://nginx.org/en/docs/http/ngx_http_grpc_module.html\" target=\"_blank\" rel=\"noopener\">nginx gRPC module</a></p>\n<p><strong>独立LB进程(External Load Balancing Service)</strong></p>\n<p>在主机上部署独立的LB进程，来实现服务发现，健康检查，负载均衡等功能。<br>不用对于不同语言维护不同sdk版本；<br>常常用于微服务service mesh。</p>\n<p>缺点：</p>\n<ul>\n<li>单点问题：但是只影响本机</li>\n<li>不方便调试</li>\n</ul>\n<p>常用的组件：  </p>\n<ul>\n<li><a href=\"https://istio.io/\" target=\"_blank\" rel=\"noopener\">Istio</a>  </li>\n<li><a href=\"https://github.com/lyft/envoy\" target=\"_blank\" rel=\"noopener\">Envoy</a></li>\n</ul>\n<hr>\n<h1 id=\"gRPC-生态环境\"><a href=\"#gRPC-生态环境\" class=\"headerlink\" title=\"gRPC 生态环境\"></a>gRPC 生态环境</h1><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p> grpc 只是实现了 RPC 核心功能，缺少很多微服务的特性（服务注册发现、监控、治理、管理等），而基于 HTTP/2 相对来说比较容易进行扩展。</p>\n<p><a href=\"https://github.com/grpc-ecosystem\" target=\"_blank\" rel=\"noopener\">grpc-ecosystem</a> 上有一些比较优秀的外围组件来完善gRPC的生态体系  </p>\n<p><a href=\"https://github.com/grpc-ecosystem/awesome-grpc\" target=\"_blank\" rel=\"noopener\">awesome-grpc</a> 收集了一些优秀的gRPC项目   </p>\n<h2 id=\"grpc-文档与交流\"><a href=\"#grpc-文档与交流\" class=\"headerlink\" title=\"grpc 文档与交流\"></a>grpc 文档与交流</h2><p><strong>文档</strong></p>\n<ul>\n<li>官网文档 : <a href=\"https://grpc.io/docs/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/docs/</a> </li>\n<li>github 上 grpc 仓库下的 doc ： <a href=\"https://github.com/grpc/grpc/tree/master/doc\" target=\"_blank\" rel=\"noopener\">https://github.com/grpc/grpc/tree/master/doc</a></li>\n<li>博客 : <a href=\"https://grpc.io/blog/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/blog/</a></li>\n</ul>\n<p><strong>交流</strong></p>\n<p><a href=\"https://grpc.io/community/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/community/</a> 交流的方式有：</p>\n<ul>\n<li>邮件列表</li>\n<li>Gitter</li>\n<li>Reddit</li>\n<li>Meetup Group </li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://grpc.io/docs/guides\" target=\"_blank\" rel=\"noopener\">grpc.io</a></p>\n<p><a href=\"https://developers.google.com/protocol-buffers/docs\" target=\"_blank\" rel=\"noopener\">developers.google.com</a></p>\n<p><a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#Requests\" target=\"_blank\" rel=\"noopener\">gRPC github doc</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc7540\" target=\"_blank\" rel=\"noopener\">http2 specs</a><br>or<br><a href=\"http://http2.github.io/http2-spec/#StreamPriority\" target=\"_blank\" rel=\"noopener\">github http2 spec</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>grpc 特性、原理、实践、生态","more":"</p>\n</blockquote>\n<h1 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h1><h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>gRPC是一个由google设计开发基于HTTP/2协议和Protobuf序列化协议的的高性能、多语言、通用的开源 RPC 框架。  </p>\n<p>跨语言、跨平台<br>插件化 ： 负载均衡，tracing，健康检查，认证等等<br>编码压缩 ： 节省带宽<br>多路复用 ： 降低的 TCP 链接次数</p>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>低延迟、高扩展的分布式系统</li>\n<li>与云服务通信</li>\n<li>设计一个需要准确，高效且与语言无关的新协议</li>\n<li>分层设计，以实现扩展，例如：身份验证，负载平衡，日志记录和监控等</li>\n</ul>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><p><strong>基于HTTP/2</strong></p>\n<p>HTTP/2 提供了 链接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制。<br>gRPC 协议使用了HTTP2 现有的语义，请求和响应的数据使用HTTP Body 发送，其他的控制信息则用Header 表示。</p>\n<p><strong>IDL使用ProtoBuffer</strong></p>\n<p>gRPC使用ProtoBuf来定义服务，ProtoBuf是由Google开发的一种数据序列化协议（类似于XML、JSON）。<br>ProtoBuf能够将数据进行序列化，并广泛应用在数据存储、通信协议等方面。<br>压缩和传输效率高，向后兼容，语法简单，表达力强。</p>\n<p><strong>多语言支持</strong></p>\n<p>gRPC支持多种语言，并能够基于语言自动生成客户端和服务端。  </p>\n<p>目前支持： C#, C++, Dart, Go, Java, Node, Objective-C, PHP, Python, Ruby 等。 </p>\n<p><a href=\"https://grpc.io/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">详见官网</a></p>\n<h1 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h1><h2 id=\"HTTP-2-1\"><a href=\"#HTTP-2-1\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p>HTTP/1.x 是超文本传输协议第1版，可读性好，但效率不高。<br>而HTTP/2 是超文本传输协议第2版，是一个二进制协议。</p>\n<p>HTTP/1 和 HTTP/2 的基本语义并没有改变，如方法语义（GET/PUST/PUT/DELETE），状态码（200/404/500等），Range Request，Cacheing，Authentication、URL路径。</p>\n<p><strong>HTTP/2通用术语：</strong></p>\n<ul>\n<li>Stream： 流，一个双向流，一条连接可以有多个 streams。</li>\n<li>Message： 逻辑上面的 request，response。</li>\n<li>Frame：帧，HTTP/2 数据传输的最小单位。每个 Frame 都属于一个特定的 stream。一个 message 可能由多个 frame 组成。</li>\n</ul>\n<p><strong>HTTP/2 流、帧</strong>   </p>\n<p>HTTP/2连接上传输的每个帧(frame)都关联到一个流，一个连接上可以同时有多个流，<br>同一个流的帧按序传输，不同流的帧交错混合传输，<br>客户端、服务端双方都可以建立流，流也可以被任意一方关闭。<br>客户端发起的流使用奇数流ID，服务端发起的使用偶数。</p>\n<p><a href=\"https://httpwg.org/specs/rfc7540.html#rfc.section.4.1\" target=\"_blank\" rel=\"noopener\">Frame结构 : </a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------------+</span><br><span class=\"line\">|                 Length (24)                   |</span><br><span class=\"line\">+---------------+---------------+---------------+</span><br><span class=\"line\">|   Type (8)    |   Flags (8)   |</span><br><span class=\"line\">+-+-------------+---------------+-------------------------------+</span><br><span class=\"line\">|R|                 Stream Identifier (31)                      |</span><br><span class=\"line\">+=+=============================================================+</span><br><span class=\"line\">|                   Frame Payload (0...)                      ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Length ： 也就是 Frame 的长度</li>\n<li>Type ：Frame 的类型，有 DATA，HEADERS，SETTINGS 等</li>\n<li>Flags ：帧标志位，8个比特表示可以容纳8个不同的标志：stream是否结束(END_STREAM)，header是否结束(END_HEADERS)，priority等等</li>\n<li>R：保留位</li>\n<li>Stream Identifier：标识frame所属的 stream，如果为 0，则表示这个 frame 属于整条连接(如SETTINGS帧)</li>\n<li>Frame Payload：帧内容</li>\n</ul>\n<p><strong>帧类型</strong>  </p>\n<ul>\n<li>HEADERS 类似于HTTP/1的 Headers</li>\n<li>DATA 类似于HTTP/1的 Body</li>\n<li>CONTINUATION 头部太大，分多个帧传输（一个HEADERS+若干CONTINUATION）</li>\n<li>SETTINGS 连接设置</li>\n<li>WINDOW_UPDATE 流量控制</li>\n<li>PUSH_PROMISE 服务端推送</li>\n<li>PRIORITY 流优先级更改</li>\n<li>PING 心跳或计算RTT</li>\n<li>RST_STREAM 马上中止一个流</li>\n<li>GOAWAY 关闭连接并且发送错误信息</li>\n</ul>\n<h2 id=\"HTTP-2-特性\"><a href=\"#HTTP-2-特性\" class=\"headerlink\" title=\"HTTP/2 特性\"></a>HTTP/2 特性</h2><p><strong>新的二进制格式（Binary Format）</strong></p>\n<p>HTTP/1 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同。<br>基于这种考虑HTTP/2的协议解析决定采用二进制格式，实现方便且健壮。</p>\n<p><strong>多路复用（MultiPlexing）</strong></p>\n<p>HTTP/1 的request是阻塞的，如果想并发发送多个request，必须使用多个 TCP connection。这样会消耗更多资源，且浏览器为了控制资源，会对单个域名有TCP connection请求限制。</p>\n<p>HTTP/2 一个TCP connection可以有多个streams(最大数量由参数SETTINGS_MAX_CONCURRENT_STREAMS控制)， 多个streams 并行发送不同的请求的frames。  </p>\n<p>可以在SETTINGS帧中设置<code>SETTINGS_MAX_CONCURRENT_STREAMS</code>。<br>而此值是针对一端而言的，客户端可以告知服务器最大的streams并发数，服务端也可以告知客户端。  </p>\n<blockquote>\n<p>如果一条链接上 ID 分配完了， server 则会给 client 发送一个 GOAWAY frame 强制让 client 新建一条连接。</p>\n</blockquote>\n<p><strong>header压缩</strong></p>\n<p>HTTP/1 是使用文本协议，而且header每次都要重复发送，浪费了带宽也导致资源加载过慢。</p>\n<p>HTTP/2 采取了压缩和缓存来避免重复发送和带宽问题：</p>\n<ul>\n<li>对消息头采用HPACK 进行压缩传输来节省消息头占用的网络的流量。</li>\n<li>对这些headers采取了压缩策略来减少重复headers的请求数<ul>\n<li>HTTP/2在客户端和服务器端使用 headlist 来存储之前发送过的 header，对于相同的header，不再通过每次请求和响应发送；</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"noopener\">HPACK: Header Compression for HTTP/2</a></p>\n<p><strong>服务端推送</strong></p>\n<p>server push功能 : 在无需客户端请求资源的情况下，服务端会直接推送客户端可能需要的资源到客户端。  </p>\n<p>当服务器想用Server Push推送资源时，会先向客户端发送PUSH_PROMISE帧。<br>推送的响应必须与客户端的某个请求相关联，因此服务器会在客户端请求的流上发送PUSH_PROMISE帧。</p>\n<p><strong>优先级排序</strong></p>\n<p>设置优先级的目的是为了告诉对端在并发的多个流之间如何分配资源的行为，同时当发送容量有限时，可以使用优先级来选择用于发送帧的流。  </p>\n<p>客户端可以通过 HEADERS 帧的 PRIORITY 信息指定一个新建立流的优先级，也可以发送 PRIORITY 帧调整流优先级。</p>\n<p><a href=\"http://http2.github.io/http2-spec/#StreamPriority\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\n<p><strong>Flow Control</strong></p>\n<p>HTTP/2 支持流控，receiver 端可以对某些stream进行流控也可以针对整个connection流控。<br>而TCP层只能针对整个connection进行流控。  </p>\n<p>特性 ：</p>\n<ul>\n<li>Flow control 是由方向的 : Receiver 可以选择给 stream 或者整个连接设置接收端的 window size。</li>\n<li>Flow control 是基于信任的 : Receiver 只是会给 sender 建议 连接和 stream 的 flow control window size。</li>\n<li>Flow control 无法禁止 </li>\n<li>Flow control 是基于WINDOW_UPDATE帧的</li>\n<li>Flow control 是 hop-by-hop的，而不是 end-to-end 的。例如，用nginx做proxy，则flow control作用于nginx到server和client到nginx这两个connection。</li>\n</ul>\n<blockquote>\n<p>Connection 和 stream 的初始 flow-control window 大小都是 65535。<br>Connection 的初始窗口大小不能改变，但 stream 的可以(所有stream)，通过发送 SETTINGS 帧，携带 <code>SETTINGS_INITIAL_WINDOW_SIZE</code>，这个值即为新的 stream flow-control window 初始大小。</p>\n</blockquote>\n<blockquote>\n<p>增加flow control window size能加快数据传输，但同时会消耗更多资源。</p>\n</blockquote>\n<p><strong>主动重置链接</strong></p>\n<p>HTTP/1 的body的length的被送给客户端后，服务端就无法中断请求了，只能断开整个TCP connection，但这样导致的代价就是需要重新通过三次握手建立一个新的TCP连接。</p>\n<p>HTTP/2 引入了一个 RST_STREAM frame 来让客户端在已有的连接中发送重置请求，从而中断或者放弃响应。当浏览器进行页面跳转或者用户取消下载时，它可以防止建立新连接，避免浪费所有带宽。</p>\n<h2 id=\"HTTP-2-站点demo\"><a href=\"#HTTP-2-站点demo\" class=\"headerlink\" title=\"HTTP/2 站点demo\"></a>HTTP/2 站点demo</h2><p>HTTP/1 和 HTTP/2 加载速度比较：<br><a href=\"https://http2.akamai.com/demo\" target=\"_blank\" rel=\"noopener\">https://http2.akamai.com/demo</a></p>\n<p>访问http2站点 ：<br><a href=\"https://http2.golang.org/\" target=\"_blank\" rel=\"noopener\">https://http2.golang.org/</a></p>\n<h1 id=\"ProtoBuf\"><a href=\"#ProtoBuf\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h1><h2 id=\"ProtoBuf-1\"><a href=\"#ProtoBuf-1\" class=\"headerlink\" title=\"ProtoBuf\"></a>ProtoBuf</h2><p><strong>Google Protocol Buffer</strong>  </p>\n<p>是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<ul>\n<li>描述简单，对开发人员友好</li>\n<li>跨平台、跨语言，不依赖于具体运行平台和编程语言</li>\n<li>高效自动化解析和生成</li>\n<li>压缩比例高</li>\n<li>可扩展、兼容性好</li>\n</ul>\n<p><strong>gRPC与protobuf</strong></p>\n<p>gRPC使用 protobuf 作为IDL来定义数据结构和服务。 可以定义数据结构，也可以定义rpc 接口。<br>然后用proto编译器生成对应语言的框架代码。</p>\n<ul>\n<li>定义数据结构 ： 生成对象的 序列化 代码</li>\n<li>定义rpc接口 ： 生成 gRPC服务端、客户端响应的代码</li>\n</ul>\n<h2 id=\"protobuf-基本数据类型\"><a href=\"#protobuf-基本数据类型\" class=\"headerlink\" title=\"protobuf 基本数据类型\"></a>protobuf 基本数据类型</h2><p><a href=\"https://developers.google.com/protocol-buffers/docs/proto#scalar\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/protocol-buffers/docs/proto#scalar</a></p>\n<h2 id=\"数据结构定义\"><a href=\"#数据结构定义\" class=\"headerlink\" title=\"数据结构定义\"></a>数据结构定义</h2><p>user.proto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;google/protobuf/any.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//package user;</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message User &#123;</span><br><span class=\"line\">  int32 id = 1;</span><br><span class=\"line\">  string name = 2;</span><br><span class=\"line\">  uint32 age = 3;</span><br><span class=\"line\">  enum Flag &#123;</span><br><span class=\"line\">    NORMAL = 0;</span><br><span class=\"line\">    VIP = 1;</span><br><span class=\"line\">    SVIP = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  repeated int32 friends_ids = 5;</span><br><span class=\"line\">  reserved 6, 7, 8;</span><br><span class=\"line\">  message Command &#123;</span><br><span class=\"line\">      int32 id = 1;</span><br><span class=\"line\">      oneof cmd_value &#123;</span><br><span class=\"line\">         string name = 2;</span><br><span class=\"line\">         int32 age = 3;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Command cmd = 9;</span><br><span class=\"line\">  map&lt;int32, string&gt; tags = 10;</span><br><span class=\"line\">  google.protobuf.Any details = 11;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>package</strong></p>\n<p>package声明符，用来防止不同的消息类型有命名冲突。<br>生成的代码将会包含再package(go等语言)或者命名空间(c++, java等)中。</p>\n<p><code>option go_package = &quot;protos_golang/user&quot;;</code><br><code>$LANGUAGE_package</code> 是指定生成的代码的import path和package。</p>\n<p><strong>import</strong></p>\n<p>要导入其他.proto文件的定义，在文件中添加一个导入声明。<br>使用导入proto的类型 <code>package名字.结构名</code> 来使用导入proto的类型。<br>如上面<code>common.Flag</code> </p>\n<p><strong>分配字段编号</strong></p>\n<p>每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的。<br>为了保证向后兼容，一旦开始使用就不要再改变。 </p>\n<p><strong>文件版本申明</strong></p>\n<p><code>syntax = &quot;proto2&quot;;</code> 指定使用proto2语法<br><code>syntax = &quot;proto3&quot;;</code> 指定为proto3语法  </p>\n<p><strong>标识符修饰符</strong></p>\n<p>required 和 optional 是proto2的语法，proto3已经不支持。<br>proto3中所有的字段都是optional的。<a href=\"https://github.com/protocolbuffers/protobuf/issues/2497\" target=\"_blank\" rel=\"noopener\">具体原因见</a> </p>\n<ul>\n<li>required : 必须字段。</li>\n<li>optional ：可选字段。</li>\n<li>repeated ：数组类型字段。</li>\n<li>reserved ：保留字段。指出这些字段编号已经删除，不要再重用这些编号了。因为如果这些编号被重新定义成其他类型，那么对于旧版本的protobuf数据，会导致解码错误。</li>\n</ul>\n<p><strong>枚举</strong></p>\n<p>与数据结构中 enum 类似。字段编号从0开始。</p>\n<p><strong>oneof</strong></p>\n<p>oneof与数据结构联合体(UNION)类似，一次最多只有一个字段有效。</p>\n<p><strong>map</strong></p>\n<p>map 类型则可以用来表示键值对。<br>key_type 可以是任何 int 或者 string 类型，float、double 和 bytes除外</p>\n<p><strong>any</strong></p>\n<p>Any类型包括:</p>\n<ul>\n<li>bytes : 被序列化为bytes类型的任意消息</li>\n<li>URL : 全局标识符</li>\n</ul>\n<p>使用<code>import google/protobuf/any.proto</code>来导入any类型</p>\n<p>any可以用来替换proto2中的extension</p>\n<p><strong>嵌套类型</strong></p>\n<p>可以在消息类型中定义其他消息类型</p>\n<h2 id=\"服务定义\"><a href=\"#服务定义\" class=\"headerlink\" title=\"服务定义\"></a>服务定义</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto2&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;user.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service UserService &#123;</span><br><span class=\"line\">// rpc interface</span><br><span class=\"line\">    rpc GetUserInfo(UserRequest) returns (UserResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">    uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserResponse &#123;</span><br><span class=\"line\">    user.User user = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在 .proto 文件中定义了 RPC 服务接口， 编译器将使用生成服务接口代码和 stubs。</p>\n<p><code>import &quot;user.proto&quot;;</code> 导入user结构定义的proto文件。</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>protoc编译器通过插件机制实现对不同语言的支持。<br>protoc会先查找是否有内置的语言插件，如果没有，则会去查找系统中是否存在<code>protoc-gen-$LANGUAGE</code> 的插件。<br>例如：<br>如果指定<code>--go_out</code>参数，那么protoc会查询是否有内置的<code>go</code>插件，如果没有则继续查询系统中是否存在<code>protoc-gen-go</code>的可执行程序，再通过插件来生成相关的语言代码。</p>\n<p><strong>插件运行流程：</strong></p>\n<ul>\n<li>protoc 启动 protoc-gen-xx</li>\n<li>将<code>CodeGeneratorRequest</code>的protobuf二进制传入到 protoc-gen-xx的标准输入<ul>\n<li>protoc-gen-xx读取标准输入再反序列化成<code>CodeGeneratorRequest</code></li>\n<li>遍历<code>CodeGeneratorRequest</code>的<code>FileDescriptorProto</code>数组，其描述了proto文件的语法树</li>\n<li>将<code>FileDescriptorProto</code>编译成语言源码</li>\n<li>生成<code>CodeGeneratorResponse</code>对象输出到标准输出</li>\n</ul>\n</li>\n<li>protoc根据protoc-gen-xx的标准输出再生成源码文件</li>\n</ul>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto\" target=\"_blank\" rel=\"noopener\">plugin.proto</a>定义了<code>CodeGeneratorRequest</code> 和 <code>CodeGeneratorResponse</code>，是protoc与插件交互的对象。  </p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto\" target=\"_blank\" rel=\"noopener\">descriptor.proto</a>描述的是一个<code>.proto</code>文件的语法树</p>\n<p><strong>插件的plugins</strong></p>\n<p>插件本身的也是支持以内部plugins形式进行扩展的。</p>\n<p>例如：生成go grpc的命令中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=plugins=grpc:. pb/user.proto</span><br></pre></td></tr></table></figure>\n\n<p>grpc就是 proto-gen-go的plugin。  </p>\n<p><a href=\"https://github.com/golang/protobuf/blob/master/protoc-gen-go/grpc/grpc.go#L72\" target=\"_blank\" rel=\"noopener\">代码</a> </p>\n<p><code>Name()</code>返回grpc命名就是plugin的名字，就是上面<code>plugins=grpc</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Name returns the name of this plugin, &quot;grpc&quot;.</span><br><span class=\"line\">func (g *grpc) Name() string &#123;</span><br><span class=\"line\">\treturn &quot;grpc&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"gRPC-原理\"><a href=\"#gRPC-原理\" class=\"headerlink\" title=\"gRPC 原理\"></a>gRPC 原理</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"https://grpc.io/img/landing-2.svg\" alt=\"image\"></p>\n<p>gRPC 定义服务，服务包含远程调用的方法。<br>在服务器端，服务器实现rpc接口并运行一个gRPC服务器来处理客户端请求。<br>在客户端，客户端有一个”存根stub”，提供与服务器相同签名的方法，来处理客户端请求的编码、解码等，再将请求转发到服务器端，这样客户端调用rpc方法就像调用本地函数一样。  </p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>gRPC把HTTP2的steam identifier当作请求ID，每一次请求都发起一个新的stream。</p>\n<p>请求的方法、响应的状态码等都放在HEADER frame中。<br>而请求内容和响应内容由protobuf序列化后使用DATA frame中。</p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>Request主要由 Request-Headers 和 Data 以及 EOS (END_STREAM)组成。  </p>\n<p>如下图：</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_request_stream_decoded_wireshark.png\" alt=\"image\"></p>\n<p><strong>Request-Headers</strong>  </p>\n<p>Request-Headers 由 HEADERS 和 CONTINUATION frames 组成。<br>如果Flags有设置标志位<code>END_HEADERS</code>则代表Request-Headers结束。  </p>\n<p>Request-Headers 主要有 <code>Call-Definition</code> 以及 <code>Custom-Metadata</code> :</p>\n<ul>\n<li>Call-Definition : 包括 Method, Scheme, Path, TE, Authority, Timeout, Content-Type ,Message-Type, Message-Encoding, Message-Accept-Encoding, User-Agent</li>\n<li>Custom-Metadata : 应用层自定义的任意 key-value，key 不要使用gRPC保留的key前缀字符 <code>grpc-</code> 。</li>\n</ul>\n<p><strong>Data</strong></p>\n<p>请求体，由一个或多个 Data frame组成。<br>如果Flags有设置标志位<code>END_STREAM</code>则代表Data结束，请求结束。 </p>\n<p><strong>request格式大致如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># request-headers </span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS (flags = END_HEADERS)</span><br><span class=\"line\">:method = POST</span><br><span class=\"line\">:scheme = http</span><br><span class=\"line\">:path = /user.UserService/GetUserInfo</span><br><span class=\"line\">:authority = localhost:50000</span><br><span class=\"line\">grpc-timeout = 999127u</span><br><span class=\"line\">content-type = grpc-go/1.20.0-dev</span><br><span class=\"line\"></span><br><span class=\"line\">## 自定义metadata</span><br><span class=\"line\">service : test_client</span><br><span class=\"line\">traceid : xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"># data</span><br><span class=\"line\">DATA (flags = END_STREAM)</span><br><span class=\"line\">&lt;Length-Prefixed Message&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><p>Response 主要由 Response-Headers 和 Data 以及 Trailers 组成。<br>如果遇到了错误，也可以直接返回 Trailers-Only。</p>\n<p>如下图：</p>\n<p><img src=\"https://github.com/ikenchina/img1/raw/master/1/network/rpc/grpc/debug/wireshark/grpc_response_stream_decoded_wireshark.png\" alt=\"image\"></p>\n<p><strong>Response-Headers</strong></p>\n<p>Response-Headers 包含 : HTTP-Status, Message-Encoding, Message-Accept-Encoding, Content-Type, Custom-Metadata等。</p>\n<p><strong>Data</strong></p>\n<p>响应体，由一个或多个 Data frame组成。<br>如果Flags有设置标志位<code>END_STREAM</code>则代表Data结束。 </p>\n<p><strong>Trailers</strong></p>\n<p>Trailers-Only 包含 HTTP-Status, Content-Type, Trailers等。</p>\n<p>Trailers 包含 Status, Status-Message, Custom-Metadata等。</p>\n<p>Trailers作用主要是给响应包含一些额外的动态生成的信息。<br>如：消息body发送后，再发送一些信息 如数字签名，后处理状态等</p>\n<p>格式大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># response-headers</span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS (flags = END_HEADERS)</span><br><span class=\"line\">:status = status: 200 </span><br><span class=\"line\">content-type = application/grpc</span><br><span class=\"line\"></span><br><span class=\"line\">## 自定义metadata</span><br><span class=\"line\">service: server_test</span><br><span class=\"line\">spanid: xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># data</span><br><span class=\"line\">DATA</span><br><span class=\"line\">&lt;Length-Prefixed Message&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># headers</span><br><span class=\"line\">HEADERS (flags = END_STREAM, END_HEADERS)</span><br><span class=\"line\">grpc-status: 0</span><br><span class=\"line\"></span><br><span class=\"line\">## trailers 自定义metadata</span><br><span class=\"line\">timestamp: 1560656283730441829</span><br></pre></td></tr></table></figure>\n\n<p><strong>Status code</strong></p>\n<p><a href=\"https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\" target=\"_blank\" rel=\"noopener\">HTTP状态码对应的gRPC状态码</a></p>\n<h2 id=\"gRPC通信方式\"><a href=\"#gRPC通信方式\" class=\"headerlink\" title=\"gRPC通信方式\"></a>gRPC通信方式</h2><p>gRPC有四种通信方式: </p>\n<p>1、 unary RPC </p>\n<p>一般的rpc调用，客户端发送一个请求对象，然后等待服务端返回一个响应对象 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取用户信息</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc GetUserInfo (UserRequest) returns (UserResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、 Server-side streaming RPC </p>\n<p>服务端流式rpc </p>\n<p>客户端发起一个请求到服务端，服务端返回一段连续的数据流响应。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个用户的所有地理位置历史记录</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc UserLocationsStream(UserRequest) returns (stream LocationsResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、 Client-side streaming RPC </p>\n<p>客户端流式rpc </p>\n<p>客户端将一段连续的数据流发送到服务端，服务端返回一个响应。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端将所有数据备份到服务端</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc BackupStream(stream BackupRequest) returns (BackupResponse) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、 Bidirectional streaming RPC </p>\n<p>双向流式rpc </p>\n<p>客户端将连续的数据流发送到服务端，服务端返回交互的数据流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在线聊天</span><br><span class=\"line\"># proto</span><br><span class=\"line\">rpc LiveChat(stream Message) returns (stream Message) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><strong>waitForReady</strong></p>\n<p>发送请求时，如果connection没有ready，则会一直等待connection ready 或直到超时(达到deadline)。<br>也常称为<code>fail fast</code>。</p>\n<p><strong>timeout</strong></p>\n<p>请求超时时间。<br>如果超时，则会中止请求且返回DEADLINE_EXCEEDED 错误。</p>\n<p><strong>maxRequestMessageBytes</strong></p>\n<p>请求体的最大payload size(没有压缩的)。<br>如果客户端请求大于此值的请求会返回RESOURCE_EXHAUSTED错误。 </p>\n<p><strong>maxResponseMessageBytes</strong></p>\n<p>响应体的最大payload size(没有压缩的)。<br>如果服务端响应大于此值，响应将发送失败。且客户端会得到RESOURCE_EXHAUSTED错误。 </p>\n<hr>\n<h1 id=\"gRPC-实践\"><a href=\"#gRPC-实践\" class=\"headerlink\" title=\"gRPC 实践\"></a>gRPC 实践</h1><p>实践部分以go语言进行demo</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p><strong>安装protoc</strong></p>\n<p>mac</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<p>linux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROTOC_ZIP=protoc-3.5.1-linux-x86_64.zip</span><br><span class=\"line\">curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/$PROTOC_ZIP</span><br><span class=\"line\"></span><br><span class=\"line\">sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc</span><br><span class=\"line\">sudo unzip -o $PROTOC_ZIP -d /usr/local include/*</span><br><span class=\"line\">rm -f $PROTOC_ZIP</span><br></pre></td></tr></table></figure>\n\n<p><strong>golang的protobuffers插件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/&#123;protoc-gen-go,proto&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><h3 id=\"定义proto文件\"><a href=\"#定义proto文件\" class=\"headerlink\" title=\"定义proto文件\"></a>定义proto文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;google/protobuf/any.proto&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//package user;</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message User &#123;</span><br><span class=\"line\">  int32 id = 1;</span><br><span class=\"line\">  string name = 2;</span><br><span class=\"line\">  uint32 age = 3;</span><br><span class=\"line\">  enum Flag &#123;</span><br><span class=\"line\">    NORMAL = 0;</span><br><span class=\"line\">    VIP = 1;</span><br><span class=\"line\">    SVIP = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  repeated int32 friends_ids = 5;</span><br><span class=\"line\">  reserved 6, 7, 8;</span><br><span class=\"line\">  message Command &#123;</span><br><span class=\"line\">      int32 id = 1;</span><br><span class=\"line\">      oneof cmd_value &#123;</span><br><span class=\"line\">         string name = 2;</span><br><span class=\"line\">         int32 age = 3;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Command cmd = 9;</span><br><span class=\"line\">  map&lt;int32, string&gt; tags = 10;</span><br><span class=\"line\">  google.protobuf.Any details = 11;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">service UserService &#123;</span><br><span class=\"line\">// rpc interface</span><br><span class=\"line\">    rpc GetUserInfo(UserRequest) returns (UserResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">    uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message UserResponse &#123;</span><br><span class=\"line\">    User user = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><p><strong>生成代码的导入路径和包名</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## protos_golang ： 生成代码的路径</span><br><span class=\"line\">## user : golang package 名</span><br><span class=\"line\">option go_package = &quot;protos_golang/user&quot;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>目标代码</strong></p>\n<ul>\n<li>如果包含rpc接口：则需要指定插件<code>plugins=grpc</code></li>\n<li><code>--go_out=.</code> ： 生成的代码在<code>当前目录</code>; 也可以指定其他目录，如:<code>--go_out=/tmp</code></li>\n<li>代码路径 ： <ul>\n<li>如果.pb中指定了<code>go_package</code> : 代码路径是 <code>./$go_package/user.pb.go</code></li>\n<li>如果.pb中没有指定<code>go_package</code> : 则代码路径是 <code>./pb/user.pb.go</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=plugins=grpc:. pb/user.proto</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果没有rpc定义</span><br><span class=\"line\">protoc --go_out=. pb/user.proto</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">    &quot;google.golang.org/grpc/reflection&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tpb &quot;testgrpc/protos_golang/user&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\tport = &quot;:50000&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// grpc server</span><br><span class=\"line\">type server struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实现gRPC接口</span><br><span class=\"line\">func (s *server) GetUserInfo(ctx context.Context, in *pb.UserRequest) (*pb.UserResponse, error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn &amp;pb.UserResponse&#123;</span><br><span class=\"line\">\t\tUser: &amp;pb.User&#123;</span><br><span class=\"line\">\t\t\tName: &quot;test_user&quot;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 拦截器，简单打印下日志</span><br><span class=\"line\">func LogUnaryInterceptorMiddleware() grpc.UnaryServerInterceptor &#123;</span><br><span class=\"line\">\treturn func(ctx context.Context, req interface&#123;&#125;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (r interface&#123;&#125;, err error) &#123;</span><br><span class=\"line\">\t\tr, err = handler(ctx, req)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Printf(&quot;fullMethod(%s), errCode(%v)\\n&quot;, info.FullMethod, err)</span><br><span class=\"line\">\t\treturn r, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, port)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;failed to listen: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 拦截器</span><br><span class=\"line\">    options := grpc.UnaryInterceptor(LogUnaryInterceptorMiddleware())</span><br><span class=\"line\">\ts := grpc.NewServer(options)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 注册服务器实现</span><br><span class=\"line\">\tpb.RegisterUserServiceServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 注册服务端反射</span><br><span class=\"line\">\treflection.Register(s)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 启动服务器</span><br><span class=\"line\">\tif err := s.Serve(lis); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;failed to serve: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpb &quot;testgrpc/protos_golang/user&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\taddress = &quot;localhost:50000&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;did not connect: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer conn.Close()</span><br><span class=\"line\">\tc := pb.NewUserServiceClient(conn)</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class=\"line\">\tdefer cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">\tr, err := c.GetUserInfo(ctx, &amp;pb.UserRequest&#123;&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;fatal: %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(&quot;response: %s&quot;, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>为了方便调试服务端，所以服务端需要支持reflection功能。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reflection.Register(grpcServer)</span><br></pre></td></tr></table></figure>\n\n<p>两款比较著名的调试工具：</p>\n<ul>\n<li>[grpc_cli](<a href=\"https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md\" target=\"_blank\" rel=\"noopener\">https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md</a> : 官方的</li>\n<li><a href=\"https://github.com/fullstorydev/grpcurl\" target=\"_blank\" rel=\"noopener\">grpcurl</a> : go的，安装简单</li>\n</ul>\n<p><strong>列出服务端注册的service</strong></p>\n<p>如果没有配置好公钥和私钥文件，也没有忽略证书的验证过程，则需要加<code>-plaintext</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 list </span><br><span class=\"line\">grpc.reflection.v1alpha.ServerReflection</span><br><span class=\"line\">user.UserService</span><br></pre></td></tr></table></figure>\n\n<p><strong>列出服务的接口</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 list  user.UserService</span><br><span class=\"line\">user.UserService.GetUserInfo</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取接口的签名</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 describe user.UserService.GetUserInfo</span><br><span class=\"line\">user.UserService.GetUserInfo is a method:</span><br><span class=\"line\">rpc GetUserInfo ( .user.UserRequest ) returns ( .user.UserResponse );</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取类型信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext localhost:50000 describe .user.UserRequest</span><br><span class=\"line\">user.UserRequest is a message:</span><br><span class=\"line\">message UserRequest &#123;</span><br><span class=\"line\">  uint32 id = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>调试接口</strong></p>\n<p>请求体以json的形式描述类型。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ grpcurl -plaintext -d &apos;&#123;&quot;id&quot;:1&#125;&apos;   localhost:50000  user.UserService.GetUserInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;user&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;test_user&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"go-gRPC-生态\"><a href=\"#go-gRPC-生态\" class=\"headerlink\" title=\"go gRPC 生态\"></a>go gRPC 生态</h2><h3 id=\"服务组件\"><a href=\"#服务组件\" class=\"headerlink\" title=\"服务组件\"></a>服务组件</h3><p><strong>上下文信息传递</strong></p>\n<p>rpc客户端将上下文信息传递给服务端。<br>链路调用信息，服务信息，认证信息等等。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/metadata\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>服务器反射</strong></p>\n<p>服务端反射协议， 可以用途于:</p>\n<ul>\n<li>服务端调试 : grpcurl 工具就是用reflection协议来进行服务端调试的。可以list出服务端的接口定义，以及命令行构造请求进行调试。</li>\n<li>运行时构造gRPC请求 ：客户端可以运行时根据反射的接口定义构造请求。</li>\n</ul>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/reflection\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>负载均衡</strong></p>\n<p>客户端负载均衡器</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/balancer\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>认证</strong>  </p>\n<p>gRPC主要的两种认证方式：</p>\n<ul>\n<li>基于SSL/TLS认证方式</li>\n<li>Token认证方式</li>\n</ul>\n<p>两种方式可以同时应用</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/credentials\" target=\"_blank\" rel=\"noopener\">官方实现</a>  实现了几种认证方式：</p>\n<ul>\n<li>alts  </li>\n<li>google </li>\n<li>oauth</li>\n<li>自定义认证方式</li>\n</ul>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/auth\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware的实现</a></p>\n<p><strong>健康检查</strong></p>\n<p>服务端提供一个<code>Check</code>接口返回其状态信息。<br>客户端调用此接口获取到服务健康状态，是否可以继续提供服务。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/health\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>keepalive</strong></p>\n<p>定期发送HTTP/2.0 pings帧来检测 connection 是否存活，如果断开则进行重新连接。<br>与健康检查区别在于keepalive是检查connection而健康检查是检查服务是否可用。</p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/keepalive\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>naming</strong></p>\n<p>命名解析。<br>通过服务命名来获取服务相关的信息来达到服务发现目的。  </p>\n<p>与balancer结合使用来实现进程内负载均衡与服务发现。  </p>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/naming\" target=\"_blank\" rel=\"noopener\">官方实现</a></p>\n<p><strong>限流</strong></p>\n<p>限制流量来保护服务端以防止服务过载。  </p>\n<p>可以在客户端，balancer，服务端 进行限流。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/ratelimit\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现服务端限流</a></p>\n<p><strong>recovery</strong></p>\n<p>将服务内部的错误转换成gRPC错误码。  </p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/recovery\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现</a> ： recover go的panic， 并转换成gRPC错误。</p>\n<p><strong>重试</strong></p>\n<p>客户端对于返回某些gRPC错误码的请求进行重试。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/retry\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware</a></p>\n<p><strong>tracing</strong></p>\n<p>在链路上下文携带tracing信息，以及将信息以opentracing的规范发送给<code>分布式链路分析服务</code>。</p>\n<p>tracing信息包含traceid,spanid,请求时间,错误信息,日志等等。<br>如：通过设置客户端spanid为服务端spanid的parent_spanid，这样就能知道是客户端调用了服务端rpc请求。</p>\n<p><a href=\"https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware实现opentracing的middleware</a></p>\n<p><a href=\"https://opentracing.io/docs/\" target=\"_blank\" rel=\"noopener\">open-tracing</a></p>\n<h3 id=\"微服务框架、组件\"><a href=\"#微服务框架、组件\" class=\"headerlink\" title=\"微服务框架、组件\"></a>微服务框架、组件</h3><p><a href=\"https://github.com/go-kit\" target=\"_blank\" rel=\"noopener\">go-kit</a> : 微服务组件<br><a href=\"https://github.com/micro\" target=\"_blank\" rel=\"noopener\">micro</a> : 微服务框架<br><a href=\"https://github.com/go-chassis/go-chassis\" target=\"_blank\" rel=\"noopener\">go-chassis</a> : 华为开发的go微服务框架<br><a href=\"https://github.com/grpc-ecosystem/go-grpc-middleware\" target=\"_blank\" rel=\"noopener\">go-grpc-middleware</a> : 服务端和客户端的一些中间件，认证、日志、分布式追踪跟重试等<br><a href=\"https://github.com/grpc-ecosystem/grpc-gateway\" target=\"_blank\" rel=\"noopener\">grpc-gateway</a> ：一个 protoc 的插件，可以将 gRPC 接口转换为对外暴露 RESTful API 的工具，同时还能生成 swagger 文档  </p>\n<h3 id=\"gRPC-与-负载均衡\"><a href=\"#gRPC-与-负载均衡\" class=\"headerlink\" title=\"gRPC 与 负载均衡\"></a>gRPC 与 负载均衡</h3><p><strong>进程内LB(Balancing-aware Client)</strong></p>\n<p>需要实现：</p>\n<ul>\n<li>服务注册</li>\n<li>健康检查</li>\n<li>服务发现</li>\n<li>负载均衡</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>开发成本：要实现上述功能</li>\n<li>维护成本：不同语言栈的sdk维护与升级</li>\n</ul>\n<p><a href=\"https://godoc.org/google.golang.org/grpc/balancer\" target=\"_blank\" rel=\"noopener\">官方</a>已经提供接口来实现进程内的负载均衡。同时结合服务发现，健康检查一起使用。</p>\n<p><strong>集中式LB(Proxy Model)</strong></p>\n<p>proxy 实现服务发现，健康检查，负载均衡等等。<br>还方便做限流等控制和其他统一控制策略。</p>\n<p>缺点：</p>\n<ul>\n<li>单点问题</li>\n<li>多一层性能开销</li>\n<li>不方便调试</li>\n</ul>\n<p><strong><em>Nginx</em></strong></p>\n<blockquote>\n<p>Nginx(1.13.10已经支持gRPC) </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream grpcservers &#123;</span><br><span class=\"line\">    server localhost:50000;</span><br><span class=\"line\">    server localhost:50001;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 9000 http2;</span><br><span class=\"line\"></span><br><span class=\"line\">    # router</span><br><span class=\"line\">    location /user.UserService &#123;</span><br><span class=\"line\">        grpc_pass grpc://grpcservers;</span><br><span class=\"line\">        error_page 502 = /error502grpc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 将默认错误页面更改成gRPC状态码</span><br><span class=\"line\">    location = /error502grpc &#123;</span><br><span class=\"line\">        internal;</span><br><span class=\"line\">        default_type application/grpc;</span><br><span class=\"line\">        add_header grpc-status 14;</span><br><span class=\"line\">        add_header grpc-message &quot;unavailable&quot;;</span><br><span class=\"line\">        return 204;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://nginx.org/en/docs/http/ngx_http_grpc_module.html\" target=\"_blank\" rel=\"noopener\">nginx gRPC module</a></p>\n<p><strong>独立LB进程(External Load Balancing Service)</strong></p>\n<p>在主机上部署独立的LB进程，来实现服务发现，健康检查，负载均衡等功能。<br>不用对于不同语言维护不同sdk版本；<br>常常用于微服务service mesh。</p>\n<p>缺点：</p>\n<ul>\n<li>单点问题：但是只影响本机</li>\n<li>不方便调试</li>\n</ul>\n<p>常用的组件：  </p>\n<ul>\n<li><a href=\"https://istio.io/\" target=\"_blank\" rel=\"noopener\">Istio</a>  </li>\n<li><a href=\"https://github.com/lyft/envoy\" target=\"_blank\" rel=\"noopener\">Envoy</a></li>\n</ul>\n<hr>\n<h1 id=\"gRPC-生态环境\"><a href=\"#gRPC-生态环境\" class=\"headerlink\" title=\"gRPC 生态环境\"></a>gRPC 生态环境</h1><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p> grpc 只是实现了 RPC 核心功能，缺少很多微服务的特性（服务注册发现、监控、治理、管理等），而基于 HTTP/2 相对来说比较容易进行扩展。</p>\n<p><a href=\"https://github.com/grpc-ecosystem\" target=\"_blank\" rel=\"noopener\">grpc-ecosystem</a> 上有一些比较优秀的外围组件来完善gRPC的生态体系  </p>\n<p><a href=\"https://github.com/grpc-ecosystem/awesome-grpc\" target=\"_blank\" rel=\"noopener\">awesome-grpc</a> 收集了一些优秀的gRPC项目   </p>\n<h2 id=\"grpc-文档与交流\"><a href=\"#grpc-文档与交流\" class=\"headerlink\" title=\"grpc 文档与交流\"></a>grpc 文档与交流</h2><p><strong>文档</strong></p>\n<ul>\n<li>官网文档 : <a href=\"https://grpc.io/docs/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/docs/</a> </li>\n<li>github 上 grpc 仓库下的 doc ： <a href=\"https://github.com/grpc/grpc/tree/master/doc\" target=\"_blank\" rel=\"noopener\">https://github.com/grpc/grpc/tree/master/doc</a></li>\n<li>博客 : <a href=\"https://grpc.io/blog/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/blog/</a></li>\n</ul>\n<p><strong>交流</strong></p>\n<p><a href=\"https://grpc.io/community/\" target=\"_blank\" rel=\"noopener\">https://grpc.io/community/</a> 交流的方式有：</p>\n<ul>\n<li>邮件列表</li>\n<li>Gitter</li>\n<li>Reddit</li>\n<li>Meetup Group </li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://grpc.io/docs/guides\" target=\"_blank\" rel=\"noopener\">grpc.io</a></p>\n<p><a href=\"https://developers.google.com/protocol-buffers/docs\" target=\"_blank\" rel=\"noopener\">developers.google.com</a></p>\n<p><a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#Requests\" target=\"_blank\" rel=\"noopener\">gRPC github doc</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc7540\" target=\"_blank\" rel=\"noopener\">http2 specs</a><br>or<br><a href=\"http://http2.github.io/http2-spec/#StreamPriority\" target=\"_blank\" rel=\"noopener\">github http2 spec</a></p>"},{"layout":"post","title":"NUMA","date":"2018-04-11T16:00:00.000Z","_content":"\n> NUMA 概念、历史、问题<!-- more -->  \n\n\n# NUMA 概念\n\nNUMA的几个概念（Node，socket，core，thread）\n\n![cputhreads](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cputhreads.jpg)\n\n\n- socket就是主板上的CPU插槽;   \n- core就是socket里独立的一组程序执行的硬件单元，比如寄存器，计算单元等;    \n- thread：就是超线程hyperthread的概念，逻辑的执行单元，独立的执行上下文，但是共享core内的寄存器和计算单元。   \n\nNUMA体系结构中多了Node的概念，这个概念其实是用来解决core的分组的问题，具体参见下图来理解（图中的OS CPU可以理解thread，那么core就没有在图中画出），从图中可以看出每个Socket里有两个node，共有4个socket，每个socket 2个node，每个node中有8个thread，总共`4（Socket）× 2（Node）× 8 （4core × 2 Thread） = 64个thread`。\n\n另外每个node有自己的内部CPU，总线和内存，同时还可以访问其他node内的内存，NUMA的最大的优势就是可以方便的增加CPU的数量，因为Node内有自己内部总线，所以增加CPU数量可以通过增加Node的数目来实现，如果单纯的增加CPU的数量，会对总线造成很大的压力，所以UMA结构不可能支持很多的核。\n\n![numacpus](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-cpus.png)  \n 《NUMA Best Practices for Dell PowerEdge 12th Generation Servers》\n\n\n\n根据上面提到的，由于每个node内部有自己的CPU总线和内存，所以如果一个虚拟机的vCPU跨不同的Node的话，就会导致一个node中的CPU去访问另外一个node中的内存的情况，这就导致内存访问延迟的增加。在有些特殊场景下，比如NFV(Network Function Virtualization)环境中，对性能有比较高的要求，就非常需要同一个虚拟机的vCPU尽量被分配到同一个Node中的pCPU上，所以在OpenStack的Kilo版本中增加了基于NUMA感知的虚拟机调度的特性。\n\n\n\n##### 查看机器的NUMA拓扑结构\n\n```\n[root@local ~]$ lscpu\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                48\t\t\t\t//  48个逻辑CPU（threads）\nOn-line CPU(s) list:   0-47\nThread(s) per core:    2\t\t\t\t// 每个core有2个threads\nCore(s) per socket:    12\t\t\t\t// 每个socket有12个cores\nSocket(s):             2\t\t\t\t\t// 共总有2个sockets\nNUMA node(s):          2\t\t\t\t// 2个NUMA nodes\nVendor ID:             GenuineIntel\nCPU family:            6\nModel:                 63\nModel name:            Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nStepping:              2\nCPU MHz:               2500.089\nBogoMIPS:              4999.27\nVirtualization:        VT-x\nL1d cache:             32K\nL1i cache:             32K\nL2 cache:              256K\nL3 cache:              30720K\nNUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46\nNUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47\n```\n\n> 可以看出当前机器有2个sockets，每个sockets包含1个numa node，每个numa node中有12个cores，每个cores包含2个thread，所以总的threads数量=2x1x12x2=48.\n\n---\n\n# NUMA 历史\n\n在若干年前，对于x86架构的计算机，那时的内存控制器还没有整合进CPU，所有内存的访问都需要通过北桥芯片来完成。此时的内存访问如下图所示，被称为UMA（uniform memory access, 一致性内存访问）。\n这样的访问对于软件层面来说非常容易实现：总线模型保证了所有的内存访问是一致的，不必考虑由不同内存地址之前的差异。\n\n\n![cpubus123](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus123.png)\n\n\n之后的x86平台经历了一场从“拼频率”到“拼核心数”的转变，越来越多的核心被尽可能地塞进了同一块芯片上，各个核心对于内存带宽的争抢访问成为了瓶颈；此时软件、OS方面对于SMP多核心CPU的支持也愈发成熟；再加上各种商业上的考量，x86平台也搞了NUMA（Non-uniform memory access, 非一致性内存访问）。\n\n\nNUMA中，虽然内存直接attach在CPU上，但是由于内存被平均分配在了各个die(核心)上。只有当CPU访问自身直接attach内存对应的物理地址时，才会有较短的响应时间（后称Local Access）。而如果需要访问其他CPU attach的内存的数据时，就需要通过inter-connect通道访问，响应时间就相比之前变慢了（后称Remote Access）。所以NUMA（Non-Uniform Memory Access）就此得名\n\n在这种架构之下，每个Socket都会有一个独立的内存控制器IMC（integrated memory controllers, 集成内存控制器），分属于不同的socket之内的IMC之间通过QPI link通讯。\n\n\n![cpubus-imc123](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc123.png)\n\n然后就是进一步的架构演进，由于每个socket上都会有多个core进行内存访问，这就会在每个core的内部出现一个类似最早SMP架构相似的内存访问总线，这个总线被称为IMC bus。\n\n![cpubus-imc124](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc124.png)\n\n于是，很明显的，在这种架构之下，两个socket各自管理1/2的内存插槽，如果要访问不属于本socket的内存则必须通过QPI link。也就是说内存的访问出现了本地/远程（local/remote）的概念，内存的延时是会有显著的区别的。\n\n以Xeon 2699 v4系列CPU的标准来看，两个Socket之之间通过各自的一条9.6GT/s的QPI link互访。而每个Socket事实上有2个内存控制器。双通道的缘故，每个控制器又有两个内存通道（channel），每个通道最多支持3根内存条（DIMM）。理论上最大单socket支持76.8GB/s的内存带宽，而两个QPI link，每个QPI link有9.6GT/s的速率（~57.6GB/s）事实上QPI link已经出现瓶颈了。\n\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpu-intel-xeon-e5-2600.png)\n\n核心数还是源源不断的增加，Skylake桌面版本的i7 EE已经有了18个core，Skylake Xeon 28个Core(2017)。为了塞进更多的core，原本核心之间类似环网的设计变成了复杂的路由。\n由于这种架构上的变化，导致内存的访问变得更加复杂。两个IMC也有了local/remote的区别，在保证兼容性的前提和性能导向的纠结中，系统允许用户进行更为灵活的内存访问架构划分。于是就有了“NUMA之上的NUMA”这种妖异的设定（SNC）。\n\n---\n\n# 性能提升\n\n内核调度和操作方式  \n- 在一个启用了NUMA支持的Linux中，Kernel不会将任务内存从一个NUMA node搬迁到另一个NUMA node。   \n- 一个进程一旦被启用，它所在的NUMA node就不会被迁移，为了尽可能的优化性能，在正常的调度之中，CPU的core也会尽可能的使用可以local访问的本地core，在进程的整个生命周期之中，NUMA node保持不变。   \n- 一旦当某个NUMA node的负载超出了另一个node一个阈值（默认25%），则认为需要在此node上减少负载，不同的NUMA结构和不同的负载状况，系统见给予一个延时任务的迁移——类似于漏杯算法。在这种情况下将会产生内存的remote访问。\n- NUMA node之间有不同的拓扑结构，各个 node 之间的访问会有一个距离（node distances）的概念，   \n如numactl -H命令的结果有这样的描述：   \n\n```\n[root@local ~]$ numactl -H\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46\nnode 0 size: 196514 MB\nnode 0 free: 73363 MB\nnode 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47\nnode 1 size: 196608 MB\nnode 1 free: 117527 MB\nnode distances:\nnode   0   1 \n  0:  10  21 \n  1:  21  10 \n\n```\n\n可以看出：0 node 到0 node之间距离为10，是最近的距离。\n\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-sample1.png)\n\n上图记录了某个Benchmark工具，在开启/关闭NUMA功能时QPI带宽消耗的情况。很明显的是，在开启了NUMA支持以后，QPI的带宽消耗有了两个数量级以上的下降，性能也有了显著的提升！\n\n通常情况下，用户可以通过numactl来进行NUMA访问策略的手工配置，cgroup中cpuset.mems也可以达到指定NUMA node的作用。  \n\n\n**Numa内存分配策略有四种:**  \n- 缺省default:总是在本地节点分配(当前进程运行的节点上)。  \n- 绑定bind:强制分配到指定节点上。  \n- 交叉interleavel:在所有节点或者指定节点上交叉分配内存。  \n- 优先preferred:在指定节点上分配，失败则在其他节点上分配  \n\n**以numactl命令为例，它有如下策略：** \n\n- –interleave=nodes //允许进程在多个node之间交替访问\n- –membind=nodes //将内存固定在某个node上，CPU则选择对应的core。\n- –cpunodebind=nodes //与membind相反，将CPU固定在某（几）个core上，内存则限制在对应的NUMA node之上。\n- –physcpubind=cpus //与cpunodebind类似，不同的是物理core。\n- –localalloc //本地配置\n- –preferred=node //按照推荐配置\n\n对于某些大内存访问的应用，比如Mongodb，将NUMA的访问策略制定为interleave=all则意味着整个进程的内存是均匀分布在所有的node之上，进程可以以最快的方式访问本地内存。\n北桥有一个功能就是PCI/PCIe控制器，南桥（PCH）整合了PCIe控制器。  \n在PCIe channel上也是有NUMA亲和性的。\n\n比如：查看网卡em1的NUMA\n\n```\n\n[root@local ~]$ numactl --prefer netdev:em1 --show\npolicy: preferred\npreferred node: 0\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n\n\n```\n\nPCI address 为00:1f.2的SATA控制器，用到了pci:   \n00:1f.2 SATA controller: Intel Corporation C610/X99 series chipset 6-Port SATA Controller [AHCI mode] (rev 05)\n\n```\n[root@local ~]$ numactl --prefer pci:00:1f.2 --show\npolicy: preferred\npreferred node: 0\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n\n```\n\n**查看当前系统numa策略：**  \n```\n[root@local ~]$ numactl --show\npolicy: default\npreferred node: current\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n```\n\n\n\n**查看当前numa的节点情况：** \n```\n[root@local ~]$ numactl --hardware\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46\nnode 0 size: 196514 MB\nnode 0 free: 73338 MB\nnode 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47\nnode 1 size: 196608 MB\nnode 1 free: 117521 MB\nnode distances:\nnode   0   1 \n  0:  10  21 \n  1:  21  10 \n```\n\n\n\n\n\n\n---\n\n# NUMA带来的问题\n\n- [MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture](http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/)\n- [PostgreSQL – PostgreSQL, NUMA and zone reclaim mode on linux](http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html)\n- [Oracle – Non-Uniform Memory Access (NUMA) architecture with Oracle database by examples](http://blog.yannickjaquier.com/hpux/non-uniform-memory-access-numa-architecture-with-oracle-database-by-examples.html)\n- [Java – Optimizing Linux Memory Management for Low-latency / High-throughput Databases](https://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases)\n\n这些问题都是：“因为CPU亲和策略导致的内存分配不平均”及“NUMA Zone Claim内存回收”有关，而和数据库种类并没有直接联系。\n\n## 数据库与NUMA\n\n\nMySQL在NUMA架构上遇到的典型问题  \n- [The MySQL “swap insanity” problem and the effects of the NUMA architecture](https://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/)\n- [A brief update on NUMA and MySQL](https://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/)\n\n\n> 大致分析如下：  \n\n- CPU规模因摩尔定律指数级发展，而总线发展缓慢，导致多核CPU通过一条总线共享内存成为瓶颈   \n- 于是NUMA出现了，CPU平均划分为若干个Chip（不多于4个），每个Chip有自己的内存控制器及内存插槽   \n- CPU访问自己Chip上所插的内存时速度快，而访问其他CPU所关联的内存（下文称Remote Access）的速度相较慢三倍左右   \n- 于是Linux内核默认使用CPU亲和的内存分配策略，使内存页尽可能的和调用线程处在同一个Core/Chip中   \n- 由于内存页没有动态调整策略，使得大部分内存页都集中在CPU 0上   \n- 又因为Reclaim默认策略优先淘汰/Swap本Chip上的内存，使得大量有用内存被换出    \n- 当被换出页被访问时问题就以数据库响应时间飙高甚至阻塞的形式出现了\n\n> 解决方案：\n\n- numactl --interleave=all\n- 在MySQL进程启动前，使用sysctl -q -w - vm.drop_caches=3清空文件缓存所占用的空间\n- Innodb在启动时，就完成整个Innodb_buffer_pool_size的内存分配\n\n> 不过这种三合一的解决方案只是减少了NUMA内存分配不均，导致的MySQL SWAP问题出现的可能性。如果当系统上其他进程，或者MySQL本身需要大量内存时，Innodb Buffer Pool的那些Page同样还是会被Swap到存储上。于是又在这基础上出现了另外几个进阶方案\n\n- 配置vm.zone_reclaim_mode = 0使得内存不足时去remote memory分配优先于swap out local page\n- echo -15 > /proc//oom_adj调低MySQL进程被OOM_killer强制Kill的可能\n- memlock\n- 对MySQL使用Huge Page（黑魔法，巧用了Huge Page不会被swap的特性）\n\n\n\n\n**为什么Interleave的策略就解决了问题？**  \n借用两张 Carrefour性能测试 的结果图，可以看到几乎所有情况下Interleave模式下的程序性能都要比默认的亲和模式要高，有时甚至能高达30%。究其根本原因是Linux服务器的大多数workload分布都是随机的：即每个线程在处理各个外部请求对应的逻辑时，所需要访问的内存是在物理上随机分布的。而Interleave模式就恰恰是针对这种特性将内存page随机打散到各个CPU Core上，使得每个CPU的负载和Remote Access的出现频率都均匀分布。相较NUMA默认的内存分配模式，死板的把内存都优先分配在线程所在Core上的做法，显然普遍适用性要强很多。\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-compare1.png)\n\n也就是说，像MySQL这种外部请求随机性强，各个线程访问内存在地址上平均分布的这种应用，Interleave的内存分配模式相较默认模式可以带来一定程度的性能提升。此外`各种论文 中也都通过实验证实，真正造成程序在NUMA系统上性能瓶颈的并不是Remote Acess带来的响应时间损耗，而是内存的不合理分布导致Remote Access将interconnect这个小水管塞满所造成的结果`。而Interleave恰好，把这种不合理分布情况下的Remote Access请求平均分布在了各个小水管中。所以这也是Interleave效果奇佳的一个原因。\n\n那是不是简简单单的配置个Interleave就已经把NUMA的特性和性能发挥到了极致呢？   \n答案是否定的，目前Linux的内存分配机制在NUMA架构的CPU上还有一定的改进空间。  \n例如：Dynamic Memory Loaction, Page Replication。\n\n\n**Dynamic Memory Relocation**   \nMySQL的线程分为两种，用户线程（SQL执行线程）和内部线程（内部功能，如：flush，io，master等）。对于用户线程来说随机性相当的强，但对于内部线程来说他们的行为以及所要访问的内存区域其实是相对固定且可以预测的。如果能对于这把这部分内存集中到这些内存线程所在的core上的时候，就能减少大量Remote Access，潜在的提升例如Page Flush，Purge等功能的吞吐量，甚至可以提高MySQL Crash后Recovery的速度（由于recovery是单线程）。   \n那是否能在Interleave模式下，把那些明显应该聚集在一个CPU上的内存集中在一起呢？很可惜，Dynamic Memory Relocation这种技术目前只停留在理论和实验阶段。我们来看下难点：要做到按照线程的行为动态的调整page在memory的分布，就势必需要做线程和内存的实时监控（profile）。对于Memory Access这种非常异常频繁的底层操作来说增加profile入口的性能损耗是极大的。  \n\n\n**Page Replication**  \n一些动态加载的库，把他们放在任何一个线程所在的CPU都会导致其他CPU上线程的执行效率下降。而这些共享数据往往读写比非常高，如果能把这些数据的副本在每个Memory Zone内都放置一份，理论上会带来较大的性能提升，同时也减少在interconnect上出现的瓶颈。由于缺乏硬件级别（如MESI协议的硬件支持）和操作系统原生级别的支持，Page Replication在数据一致性上维护的成本显得比他带来的提升更多。因此这种尝试也仅仅停留在理论阶段。当然，如果能得到底层的大力支持，相信这个方案还是有极大的实际价值的。\n\n\n## 关闭NUMA特性的方法\n* 硬件层，在BIOS中设置关闭\n* OS内核，启动时设置numa=off\n* 进程，numactl 进程启动时。numactl --interleave=all\n\n\n\n## NUMA取舍\n\n**指定numa**  \n在运行程序的时候使用numactl -m和-physcpubind就能制定将这个程序运行在哪个cpu和哪个memory中:  \n*`numactl –physcpubind=2,6 ./program`*\n\n[玩转cpu-topology](http://www.searchtb.com/2012/12/%E7%8E%A9%E8%BD%ACcpu-topology.html)(站点已经无法访问) 的测试中显示当程序只使用一个node资源和使用多个node资源的比较表（差不多是38s与28s的差距）。所以限定程序在numa node中运行是有实际意义的。\n\n**指定numa带来的问题**  \n[SWAP的罪与罚](http://huoding.com/2012/11/08/198) 文章就说到了一个numa的陷阱的问题。现象是当你的服务器还有内存的时候，发现它已经在开始使用swap了，甚至已经导致机器出现停滞的现象。如果一个进程限制它只能使用自己的numa节点的内存，那么当自身numa node内存使用光之后，就不会去使用其他numa node的内存了，会开始使用swap，甚至更糟的情况，机器没有设置swap的时候，可能会直接死机！  \n所以你可以使用`numactl --interleave=all`来取消numa node的限制。\n\n\n根据具体业务决定NUMA的使用:  \n- 如果你的程序是会占用大规模内存的，你大多应该选择关闭numa node的限制。因为这个时候你的程序很有几率会碰到numa陷阱。\n- 如果你的程序并不占用大内存，而是要求更快的程序运行时间。你大多应该选择限制只访问本numa node的方法来进行处理。\n\n\n---\n#### 推荐阅读:  \n\n- [NUMA-aware scheduler for Go](https://docs.google.com/document/u/0/d/1d3iI2QWURgDIsSR6G2275vMeQ_X7w-qxM2Vp7iGwwuM/pub)\n- [PostgreSQL, NUMA and zone reclaim mode on linux](http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html)\n- [NUMA and Java Databases](https://www.slideshare.net/slidunder/numa-and-java-databases)\n- [MySQL Server and NUMA architectures](http://mikaelronstrom.blogspot.com/2010/12/mysql-server-and-numa-architectures.html)\n","source":"_posts/numa.md","raw":"---\nlayout: post\ncategory: \"2018\"\ntitle:  \"NUMA\"\ntags: [cpu]\ndate: 2018-04-12\n---\n\n> NUMA 概念、历史、问题<!-- more -->  \n\n\n# NUMA 概念\n\nNUMA的几个概念（Node，socket，core，thread）\n\n![cputhreads](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cputhreads.jpg)\n\n\n- socket就是主板上的CPU插槽;   \n- core就是socket里独立的一组程序执行的硬件单元，比如寄存器，计算单元等;    \n- thread：就是超线程hyperthread的概念，逻辑的执行单元，独立的执行上下文，但是共享core内的寄存器和计算单元。   \n\nNUMA体系结构中多了Node的概念，这个概念其实是用来解决core的分组的问题，具体参见下图来理解（图中的OS CPU可以理解thread，那么core就没有在图中画出），从图中可以看出每个Socket里有两个node，共有4个socket，每个socket 2个node，每个node中有8个thread，总共`4（Socket）× 2（Node）× 8 （4core × 2 Thread） = 64个thread`。\n\n另外每个node有自己的内部CPU，总线和内存，同时还可以访问其他node内的内存，NUMA的最大的优势就是可以方便的增加CPU的数量，因为Node内有自己内部总线，所以增加CPU数量可以通过增加Node的数目来实现，如果单纯的增加CPU的数量，会对总线造成很大的压力，所以UMA结构不可能支持很多的核。\n\n![numacpus](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-cpus.png)  \n 《NUMA Best Practices for Dell PowerEdge 12th Generation Servers》\n\n\n\n根据上面提到的，由于每个node内部有自己的CPU总线和内存，所以如果一个虚拟机的vCPU跨不同的Node的话，就会导致一个node中的CPU去访问另外一个node中的内存的情况，这就导致内存访问延迟的增加。在有些特殊场景下，比如NFV(Network Function Virtualization)环境中，对性能有比较高的要求，就非常需要同一个虚拟机的vCPU尽量被分配到同一个Node中的pCPU上，所以在OpenStack的Kilo版本中增加了基于NUMA感知的虚拟机调度的特性。\n\n\n\n##### 查看机器的NUMA拓扑结构\n\n```\n[root@local ~]$ lscpu\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                48\t\t\t\t//  48个逻辑CPU（threads）\nOn-line CPU(s) list:   0-47\nThread(s) per core:    2\t\t\t\t// 每个core有2个threads\nCore(s) per socket:    12\t\t\t\t// 每个socket有12个cores\nSocket(s):             2\t\t\t\t\t// 共总有2个sockets\nNUMA node(s):          2\t\t\t\t// 2个NUMA nodes\nVendor ID:             GenuineIntel\nCPU family:            6\nModel:                 63\nModel name:            Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nStepping:              2\nCPU MHz:               2500.089\nBogoMIPS:              4999.27\nVirtualization:        VT-x\nL1d cache:             32K\nL1i cache:             32K\nL2 cache:              256K\nL3 cache:              30720K\nNUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46\nNUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47\n```\n\n> 可以看出当前机器有2个sockets，每个sockets包含1个numa node，每个numa node中有12个cores，每个cores包含2个thread，所以总的threads数量=2x1x12x2=48.\n\n---\n\n# NUMA 历史\n\n在若干年前，对于x86架构的计算机，那时的内存控制器还没有整合进CPU，所有内存的访问都需要通过北桥芯片来完成。此时的内存访问如下图所示，被称为UMA（uniform memory access, 一致性内存访问）。\n这样的访问对于软件层面来说非常容易实现：总线模型保证了所有的内存访问是一致的，不必考虑由不同内存地址之前的差异。\n\n\n![cpubus123](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus123.png)\n\n\n之后的x86平台经历了一场从“拼频率”到“拼核心数”的转变，越来越多的核心被尽可能地塞进了同一块芯片上，各个核心对于内存带宽的争抢访问成为了瓶颈；此时软件、OS方面对于SMP多核心CPU的支持也愈发成熟；再加上各种商业上的考量，x86平台也搞了NUMA（Non-uniform memory access, 非一致性内存访问）。\n\n\nNUMA中，虽然内存直接attach在CPU上，但是由于内存被平均分配在了各个die(核心)上。只有当CPU访问自身直接attach内存对应的物理地址时，才会有较短的响应时间（后称Local Access）。而如果需要访问其他CPU attach的内存的数据时，就需要通过inter-connect通道访问，响应时间就相比之前变慢了（后称Remote Access）。所以NUMA（Non-Uniform Memory Access）就此得名\n\n在这种架构之下，每个Socket都会有一个独立的内存控制器IMC（integrated memory controllers, 集成内存控制器），分属于不同的socket之内的IMC之间通过QPI link通讯。\n\n\n![cpubus-imc123](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc123.png)\n\n然后就是进一步的架构演进，由于每个socket上都会有多个core进行内存访问，这就会在每个core的内部出现一个类似最早SMP架构相似的内存访问总线，这个总线被称为IMC bus。\n\n![cpubus-imc124](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc124.png)\n\n于是，很明显的，在这种架构之下，两个socket各自管理1/2的内存插槽，如果要访问不属于本socket的内存则必须通过QPI link。也就是说内存的访问出现了本地/远程（local/remote）的概念，内存的延时是会有显著的区别的。\n\n以Xeon 2699 v4系列CPU的标准来看，两个Socket之之间通过各自的一条9.6GT/s的QPI link互访。而每个Socket事实上有2个内存控制器。双通道的缘故，每个控制器又有两个内存通道（channel），每个通道最多支持3根内存条（DIMM）。理论上最大单socket支持76.8GB/s的内存带宽，而两个QPI link，每个QPI link有9.6GT/s的速率（~57.6GB/s）事实上QPI link已经出现瓶颈了。\n\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpu-intel-xeon-e5-2600.png)\n\n核心数还是源源不断的增加，Skylake桌面版本的i7 EE已经有了18个core，Skylake Xeon 28个Core(2017)。为了塞进更多的core，原本核心之间类似环网的设计变成了复杂的路由。\n由于这种架构上的变化，导致内存的访问变得更加复杂。两个IMC也有了local/remote的区别，在保证兼容性的前提和性能导向的纠结中，系统允许用户进行更为灵活的内存访问架构划分。于是就有了“NUMA之上的NUMA”这种妖异的设定（SNC）。\n\n---\n\n# 性能提升\n\n内核调度和操作方式  \n- 在一个启用了NUMA支持的Linux中，Kernel不会将任务内存从一个NUMA node搬迁到另一个NUMA node。   \n- 一个进程一旦被启用，它所在的NUMA node就不会被迁移，为了尽可能的优化性能，在正常的调度之中，CPU的core也会尽可能的使用可以local访问的本地core，在进程的整个生命周期之中，NUMA node保持不变。   \n- 一旦当某个NUMA node的负载超出了另一个node一个阈值（默认25%），则认为需要在此node上减少负载，不同的NUMA结构和不同的负载状况，系统见给予一个延时任务的迁移——类似于漏杯算法。在这种情况下将会产生内存的remote访问。\n- NUMA node之间有不同的拓扑结构，各个 node 之间的访问会有一个距离（node distances）的概念，   \n如numactl -H命令的结果有这样的描述：   \n\n```\n[root@local ~]$ numactl -H\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46\nnode 0 size: 196514 MB\nnode 0 free: 73363 MB\nnode 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47\nnode 1 size: 196608 MB\nnode 1 free: 117527 MB\nnode distances:\nnode   0   1 \n  0:  10  21 \n  1:  21  10 \n\n```\n\n可以看出：0 node 到0 node之间距离为10，是最近的距离。\n\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-sample1.png)\n\n上图记录了某个Benchmark工具，在开启/关闭NUMA功能时QPI带宽消耗的情况。很明显的是，在开启了NUMA支持以后，QPI的带宽消耗有了两个数量级以上的下降，性能也有了显著的提升！\n\n通常情况下，用户可以通过numactl来进行NUMA访问策略的手工配置，cgroup中cpuset.mems也可以达到指定NUMA node的作用。  \n\n\n**Numa内存分配策略有四种:**  \n- 缺省default:总是在本地节点分配(当前进程运行的节点上)。  \n- 绑定bind:强制分配到指定节点上。  \n- 交叉interleavel:在所有节点或者指定节点上交叉分配内存。  \n- 优先preferred:在指定节点上分配，失败则在其他节点上分配  \n\n**以numactl命令为例，它有如下策略：** \n\n- –interleave=nodes //允许进程在多个node之间交替访问\n- –membind=nodes //将内存固定在某个node上，CPU则选择对应的core。\n- –cpunodebind=nodes //与membind相反，将CPU固定在某（几）个core上，内存则限制在对应的NUMA node之上。\n- –physcpubind=cpus //与cpunodebind类似，不同的是物理core。\n- –localalloc //本地配置\n- –preferred=node //按照推荐配置\n\n对于某些大内存访问的应用，比如Mongodb，将NUMA的访问策略制定为interleave=all则意味着整个进程的内存是均匀分布在所有的node之上，进程可以以最快的方式访问本地内存。\n北桥有一个功能就是PCI/PCIe控制器，南桥（PCH）整合了PCIe控制器。  \n在PCIe channel上也是有NUMA亲和性的。\n\n比如：查看网卡em1的NUMA\n\n```\n\n[root@local ~]$ numactl --prefer netdev:em1 --show\npolicy: preferred\npreferred node: 0\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n\n\n```\n\nPCI address 为00:1f.2的SATA控制器，用到了pci:   \n00:1f.2 SATA controller: Intel Corporation C610/X99 series chipset 6-Port SATA Controller [AHCI mode] (rev 05)\n\n```\n[root@local ~]$ numactl --prefer pci:00:1f.2 --show\npolicy: preferred\npreferred node: 0\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n\n```\n\n**查看当前系统numa策略：**  \n```\n[root@local ~]$ numactl --show\npolicy: default\npreferred node: current\nphyscpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \ncpubind: 0 1 \nnodebind: 0 1 \nmembind: 0 1 \n```\n\n\n\n**查看当前numa的节点情况：** \n```\n[root@local ~]$ numactl --hardware\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46\nnode 0 size: 196514 MB\nnode 0 free: 73338 MB\nnode 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47\nnode 1 size: 196608 MB\nnode 1 free: 117521 MB\nnode distances:\nnode   0   1 \n  0:  10  21 \n  1:  21  10 \n```\n\n\n\n\n\n\n---\n\n# NUMA带来的问题\n\n- [MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture](http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/)\n- [PostgreSQL – PostgreSQL, NUMA and zone reclaim mode on linux](http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html)\n- [Oracle – Non-Uniform Memory Access (NUMA) architecture with Oracle database by examples](http://blog.yannickjaquier.com/hpux/non-uniform-memory-access-numa-architecture-with-oracle-database-by-examples.html)\n- [Java – Optimizing Linux Memory Management for Low-latency / High-throughput Databases](https://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases)\n\n这些问题都是：“因为CPU亲和策略导致的内存分配不平均”及“NUMA Zone Claim内存回收”有关，而和数据库种类并没有直接联系。\n\n## 数据库与NUMA\n\n\nMySQL在NUMA架构上遇到的典型问题  \n- [The MySQL “swap insanity” problem and the effects of the NUMA architecture](https://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/)\n- [A brief update on NUMA and MySQL](https://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/)\n\n\n> 大致分析如下：  \n\n- CPU规模因摩尔定律指数级发展，而总线发展缓慢，导致多核CPU通过一条总线共享内存成为瓶颈   \n- 于是NUMA出现了，CPU平均划分为若干个Chip（不多于4个），每个Chip有自己的内存控制器及内存插槽   \n- CPU访问自己Chip上所插的内存时速度快，而访问其他CPU所关联的内存（下文称Remote Access）的速度相较慢三倍左右   \n- 于是Linux内核默认使用CPU亲和的内存分配策略，使内存页尽可能的和调用线程处在同一个Core/Chip中   \n- 由于内存页没有动态调整策略，使得大部分内存页都集中在CPU 0上   \n- 又因为Reclaim默认策略优先淘汰/Swap本Chip上的内存，使得大量有用内存被换出    \n- 当被换出页被访问时问题就以数据库响应时间飙高甚至阻塞的形式出现了\n\n> 解决方案：\n\n- numactl --interleave=all\n- 在MySQL进程启动前，使用sysctl -q -w - vm.drop_caches=3清空文件缓存所占用的空间\n- Innodb在启动时，就完成整个Innodb_buffer_pool_size的内存分配\n\n> 不过这种三合一的解决方案只是减少了NUMA内存分配不均，导致的MySQL SWAP问题出现的可能性。如果当系统上其他进程，或者MySQL本身需要大量内存时，Innodb Buffer Pool的那些Page同样还是会被Swap到存储上。于是又在这基础上出现了另外几个进阶方案\n\n- 配置vm.zone_reclaim_mode = 0使得内存不足时去remote memory分配优先于swap out local page\n- echo -15 > /proc//oom_adj调低MySQL进程被OOM_killer强制Kill的可能\n- memlock\n- 对MySQL使用Huge Page（黑魔法，巧用了Huge Page不会被swap的特性）\n\n\n\n\n**为什么Interleave的策略就解决了问题？**  \n借用两张 Carrefour性能测试 的结果图，可以看到几乎所有情况下Interleave模式下的程序性能都要比默认的亲和模式要高，有时甚至能高达30%。究其根本原因是Linux服务器的大多数workload分布都是随机的：即每个线程在处理各个外部请求对应的逻辑时，所需要访问的内存是在物理上随机分布的。而Interleave模式就恰恰是针对这种特性将内存page随机打散到各个CPU Core上，使得每个CPU的负载和Remote Access的出现频率都均匀分布。相较NUMA默认的内存分配模式，死板的把内存都优先分配在线程所在Core上的做法，显然普遍适用性要强很多。\n\n![image](https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-compare1.png)\n\n也就是说，像MySQL这种外部请求随机性强，各个线程访问内存在地址上平均分布的这种应用，Interleave的内存分配模式相较默认模式可以带来一定程度的性能提升。此外`各种论文 中也都通过实验证实，真正造成程序在NUMA系统上性能瓶颈的并不是Remote Acess带来的响应时间损耗，而是内存的不合理分布导致Remote Access将interconnect这个小水管塞满所造成的结果`。而Interleave恰好，把这种不合理分布情况下的Remote Access请求平均分布在了各个小水管中。所以这也是Interleave效果奇佳的一个原因。\n\n那是不是简简单单的配置个Interleave就已经把NUMA的特性和性能发挥到了极致呢？   \n答案是否定的，目前Linux的内存分配机制在NUMA架构的CPU上还有一定的改进空间。  \n例如：Dynamic Memory Loaction, Page Replication。\n\n\n**Dynamic Memory Relocation**   \nMySQL的线程分为两种，用户线程（SQL执行线程）和内部线程（内部功能，如：flush，io，master等）。对于用户线程来说随机性相当的强，但对于内部线程来说他们的行为以及所要访问的内存区域其实是相对固定且可以预测的。如果能对于这把这部分内存集中到这些内存线程所在的core上的时候，就能减少大量Remote Access，潜在的提升例如Page Flush，Purge等功能的吞吐量，甚至可以提高MySQL Crash后Recovery的速度（由于recovery是单线程）。   \n那是否能在Interleave模式下，把那些明显应该聚集在一个CPU上的内存集中在一起呢？很可惜，Dynamic Memory Relocation这种技术目前只停留在理论和实验阶段。我们来看下难点：要做到按照线程的行为动态的调整page在memory的分布，就势必需要做线程和内存的实时监控（profile）。对于Memory Access这种非常异常频繁的底层操作来说增加profile入口的性能损耗是极大的。  \n\n\n**Page Replication**  \n一些动态加载的库，把他们放在任何一个线程所在的CPU都会导致其他CPU上线程的执行效率下降。而这些共享数据往往读写比非常高，如果能把这些数据的副本在每个Memory Zone内都放置一份，理论上会带来较大的性能提升，同时也减少在interconnect上出现的瓶颈。由于缺乏硬件级别（如MESI协议的硬件支持）和操作系统原生级别的支持，Page Replication在数据一致性上维护的成本显得比他带来的提升更多。因此这种尝试也仅仅停留在理论阶段。当然，如果能得到底层的大力支持，相信这个方案还是有极大的实际价值的。\n\n\n## 关闭NUMA特性的方法\n* 硬件层，在BIOS中设置关闭\n* OS内核，启动时设置numa=off\n* 进程，numactl 进程启动时。numactl --interleave=all\n\n\n\n## NUMA取舍\n\n**指定numa**  \n在运行程序的时候使用numactl -m和-physcpubind就能制定将这个程序运行在哪个cpu和哪个memory中:  \n*`numactl –physcpubind=2,6 ./program`*\n\n[玩转cpu-topology](http://www.searchtb.com/2012/12/%E7%8E%A9%E8%BD%ACcpu-topology.html)(站点已经无法访问) 的测试中显示当程序只使用一个node资源和使用多个node资源的比较表（差不多是38s与28s的差距）。所以限定程序在numa node中运行是有实际意义的。\n\n**指定numa带来的问题**  \n[SWAP的罪与罚](http://huoding.com/2012/11/08/198) 文章就说到了一个numa的陷阱的问题。现象是当你的服务器还有内存的时候，发现它已经在开始使用swap了，甚至已经导致机器出现停滞的现象。如果一个进程限制它只能使用自己的numa节点的内存，那么当自身numa node内存使用光之后，就不会去使用其他numa node的内存了，会开始使用swap，甚至更糟的情况，机器没有设置swap的时候，可能会直接死机！  \n所以你可以使用`numactl --interleave=all`来取消numa node的限制。\n\n\n根据具体业务决定NUMA的使用:  \n- 如果你的程序是会占用大规模内存的，你大多应该选择关闭numa node的限制。因为这个时候你的程序很有几率会碰到numa陷阱。\n- 如果你的程序并不占用大内存，而是要求更快的程序运行时间。你大多应该选择限制只访问本numa node的方法来进行处理。\n\n\n---\n#### 推荐阅读:  \n\n- [NUMA-aware scheduler for Go](https://docs.google.com/document/u/0/d/1d3iI2QWURgDIsSR6G2275vMeQ_X7w-qxM2Vp7iGwwuM/pub)\n- [PostgreSQL, NUMA and zone reclaim mode on linux](http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html)\n- [NUMA and Java Databases](https://www.slideshare.net/slidunder/numa-and-java-databases)\n- [MySQL Server and NUMA architectures](http://mikaelronstrom.blogspot.com/2010/12/mysql-server-and-numa-architectures.html)\n","slug":"numa","published":1,"updated":"2020-04-15T03:28:41.896Z","comments":1,"photos":[],"link":"","_id":"ck9115hpo0006ppfcd7gc8851","content":"<blockquote>\n<p>NUMA 概念、历史、问题<a id=\"more\"></a>  </p>\n</blockquote>\n<h1 id=\"NUMA-概念\"><a href=\"#NUMA-概念\" class=\"headerlink\" title=\"NUMA 概念\"></a>NUMA 概念</h1><p>NUMA的几个概念（Node，socket，core，thread）</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cputhreads.jpg\" alt=\"cputhreads\"></p>\n<ul>\n<li>socket就是主板上的CPU插槽;   </li>\n<li>core就是socket里独立的一组程序执行的硬件单元，比如寄存器，计算单元等;    </li>\n<li>thread：就是超线程hyperthread的概念，逻辑的执行单元，独立的执行上下文，但是共享core内的寄存器和计算单元。   </li>\n</ul>\n<p>NUMA体系结构中多了Node的概念，这个概念其实是用来解决core的分组的问题，具体参见下图来理解（图中的OS CPU可以理解thread，那么core就没有在图中画出），从图中可以看出每个Socket里有两个node，共有4个socket，每个socket 2个node，每个node中有8个thread，总共<code>4（Socket）× 2（Node）× 8 （4core × 2 Thread） = 64个thread</code>。</p>\n<p>另外每个node有自己的内部CPU，总线和内存，同时还可以访问其他node内的内存，NUMA的最大的优势就是可以方便的增加CPU的数量，因为Node内有自己内部总线，所以增加CPU数量可以通过增加Node的数目来实现，如果单纯的增加CPU的数量，会对总线造成很大的压力，所以UMA结构不可能支持很多的核。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-cpus.png\" alt=\"numacpus\"><br> 《NUMA Best Practices for Dell PowerEdge 12th Generation Servers》</p>\n<p>根据上面提到的，由于每个node内部有自己的CPU总线和内存，所以如果一个虚拟机的vCPU跨不同的Node的话，就会导致一个node中的CPU去访问另外一个node中的内存的情况，这就导致内存访问延迟的增加。在有些特殊场景下，比如NFV(Network Function Virtualization)环境中，对性能有比较高的要求，就非常需要同一个虚拟机的vCPU尽量被分配到同一个Node中的pCPU上，所以在OpenStack的Kilo版本中增加了基于NUMA感知的虚拟机调度的特性。</p>\n<h5 id=\"查看机器的NUMA拓扑结构\"><a href=\"#查看机器的NUMA拓扑结构\" class=\"headerlink\" title=\"查看机器的NUMA拓扑结构\"></a>查看机器的NUMA拓扑结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ lscpu</span><br><span class=\"line\">Architecture:          x86_64</span><br><span class=\"line\">CPU op-mode(s):        32-bit, 64-bit</span><br><span class=\"line\">Byte Order:            Little Endian</span><br><span class=\"line\">CPU(s):                48\t\t\t\t//  48个逻辑CPU（threads）</span><br><span class=\"line\">On-line CPU(s) list:   0-47</span><br><span class=\"line\">Thread(s) per core:    2\t\t\t\t// 每个core有2个threads</span><br><span class=\"line\">Core(s) per socket:    12\t\t\t\t// 每个socket有12个cores</span><br><span class=\"line\">Socket(s):             2\t\t\t\t\t// 共总有2个sockets</span><br><span class=\"line\">NUMA node(s):          2\t\t\t\t// 2个NUMA nodes</span><br><span class=\"line\">Vendor ID:             GenuineIntel</span><br><span class=\"line\">CPU family:            6</span><br><span class=\"line\">Model:                 63</span><br><span class=\"line\">Model name:            Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz</span><br><span class=\"line\">Stepping:              2</span><br><span class=\"line\">CPU MHz:               2500.089</span><br><span class=\"line\">BogoMIPS:              4999.27</span><br><span class=\"line\">Virtualization:        VT-x</span><br><span class=\"line\">L1d cache:             32K</span><br><span class=\"line\">L1i cache:             32K</span><br><span class=\"line\">L2 cache:              256K</span><br><span class=\"line\">L3 cache:              30720K</span><br><span class=\"line\">NUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46</span><br><span class=\"line\">NUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看出当前机器有2个sockets，每个sockets包含1个numa node，每个numa node中有12个cores，每个cores包含2个thread，所以总的threads数量=2x1x12x2=48.</p>\n</blockquote>\n<hr>\n<h1 id=\"NUMA-历史\"><a href=\"#NUMA-历史\" class=\"headerlink\" title=\"NUMA 历史\"></a>NUMA 历史</h1><p>在若干年前，对于x86架构的计算机，那时的内存控制器还没有整合进CPU，所有内存的访问都需要通过北桥芯片来完成。此时的内存访问如下图所示，被称为UMA（uniform memory access, 一致性内存访问）。<br>这样的访问对于软件层面来说非常容易实现：总线模型保证了所有的内存访问是一致的，不必考虑由不同内存地址之前的差异。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus123.png\" alt=\"cpubus123\"></p>\n<p>之后的x86平台经历了一场从“拼频率”到“拼核心数”的转变，越来越多的核心被尽可能地塞进了同一块芯片上，各个核心对于内存带宽的争抢访问成为了瓶颈；此时软件、OS方面对于SMP多核心CPU的支持也愈发成熟；再加上各种商业上的考量，x86平台也搞了NUMA（Non-uniform memory access, 非一致性内存访问）。</p>\n<p>NUMA中，虽然内存直接attach在CPU上，但是由于内存被平均分配在了各个die(核心)上。只有当CPU访问自身直接attach内存对应的物理地址时，才会有较短的响应时间（后称Local Access）。而如果需要访问其他CPU attach的内存的数据时，就需要通过inter-connect通道访问，响应时间就相比之前变慢了（后称Remote Access）。所以NUMA（Non-Uniform Memory Access）就此得名</p>\n<p>在这种架构之下，每个Socket都会有一个独立的内存控制器IMC（integrated memory controllers, 集成内存控制器），分属于不同的socket之内的IMC之间通过QPI link通讯。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc123.png\" alt=\"cpubus-imc123\"></p>\n<p>然后就是进一步的架构演进，由于每个socket上都会有多个core进行内存访问，这就会在每个core的内部出现一个类似最早SMP架构相似的内存访问总线，这个总线被称为IMC bus。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc124.png\" alt=\"cpubus-imc124\"></p>\n<p>于是，很明显的，在这种架构之下，两个socket各自管理1/2的内存插槽，如果要访问不属于本socket的内存则必须通过QPI link。也就是说内存的访问出现了本地/远程（local/remote）的概念，内存的延时是会有显著的区别的。</p>\n<p>以Xeon 2699 v4系列CPU的标准来看，两个Socket之之间通过各自的一条9.6GT/s的QPI link互访。而每个Socket事实上有2个内存控制器。双通道的缘故，每个控制器又有两个内存通道（channel），每个通道最多支持3根内存条（DIMM）。理论上最大单socket支持76.8GB/s的内存带宽，而两个QPI link，每个QPI link有9.6GT/s的速率（~57.6GB/s）事实上QPI link已经出现瓶颈了。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpu-intel-xeon-e5-2600.png\" alt=\"image\"></p>\n<p>核心数还是源源不断的增加，Skylake桌面版本的i7 EE已经有了18个core，Skylake Xeon 28个Core(2017)。为了塞进更多的core，原本核心之间类似环网的设计变成了复杂的路由。<br>由于这种架构上的变化，导致内存的访问变得更加复杂。两个IMC也有了local/remote的区别，在保证兼容性的前提和性能导向的纠结中，系统允许用户进行更为灵活的内存访问架构划分。于是就有了“NUMA之上的NUMA”这种妖异的设定（SNC）。</p>\n<hr>\n<h1 id=\"性能提升\"><a href=\"#性能提升\" class=\"headerlink\" title=\"性能提升\"></a>性能提升</h1><p>内核调度和操作方式  </p>\n<ul>\n<li>在一个启用了NUMA支持的Linux中，Kernel不会将任务内存从一个NUMA node搬迁到另一个NUMA node。   </li>\n<li>一个进程一旦被启用，它所在的NUMA node就不会被迁移，为了尽可能的优化性能，在正常的调度之中，CPU的core也会尽可能的使用可以local访问的本地core，在进程的整个生命周期之中，NUMA node保持不变。   </li>\n<li>一旦当某个NUMA node的负载超出了另一个node一个阈值（默认25%），则认为需要在此node上减少负载，不同的NUMA结构和不同的负载状况，系统见给予一个延时任务的迁移——类似于漏杯算法。在这种情况下将会产生内存的remote访问。</li>\n<li>NUMA node之间有不同的拓扑结构，各个 node 之间的访问会有一个距离（node distances）的概念，<br>如numactl -H命令的结果有这样的描述：   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl -H</span><br><span class=\"line\">available: 2 nodes (0-1)</span><br><span class=\"line\">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46</span><br><span class=\"line\">node 0 size: 196514 MB</span><br><span class=\"line\">node 0 free: 73363 MB</span><br><span class=\"line\">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47</span><br><span class=\"line\">node 1 size: 196608 MB</span><br><span class=\"line\">node 1 free: 117527 MB</span><br><span class=\"line\">node distances:</span><br><span class=\"line\">node   0   1 </span><br><span class=\"line\">  0:  10  21 </span><br><span class=\"line\">  1:  21  10</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：0 node 到0 node之间距离为10，是最近的距离。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-sample1.png\" alt=\"image\"></p>\n<p>上图记录了某个Benchmark工具，在开启/关闭NUMA功能时QPI带宽消耗的情况。很明显的是，在开启了NUMA支持以后，QPI的带宽消耗有了两个数量级以上的下降，性能也有了显著的提升！</p>\n<p>通常情况下，用户可以通过numactl来进行NUMA访问策略的手工配置，cgroup中cpuset.mems也可以达到指定NUMA node的作用。  </p>\n<p><strong>Numa内存分配策略有四种:</strong>  </p>\n<ul>\n<li>缺省default:总是在本地节点分配(当前进程运行的节点上)。  </li>\n<li>绑定bind:强制分配到指定节点上。  </li>\n<li>交叉interleavel:在所有节点或者指定节点上交叉分配内存。  </li>\n<li>优先preferred:在指定节点上分配，失败则在其他节点上分配  </li>\n</ul>\n<p><strong>以numactl命令为例，它有如下策略：</strong> </p>\n<ul>\n<li>–interleave=nodes //允许进程在多个node之间交替访问</li>\n<li>–membind=nodes //将内存固定在某个node上，CPU则选择对应的core。</li>\n<li>–cpunodebind=nodes //与membind相反，将CPU固定在某（几）个core上，内存则限制在对应的NUMA node之上。</li>\n<li>–physcpubind=cpus //与cpunodebind类似，不同的是物理core。</li>\n<li>–localalloc //本地配置</li>\n<li>–preferred=node //按照推荐配置</li>\n</ul>\n<p>对于某些大内存访问的应用，比如Mongodb，将NUMA的访问策略制定为interleave=all则意味着整个进程的内存是均匀分布在所有的node之上，进程可以以最快的方式访问本地内存。<br>北桥有一个功能就是PCI/PCIe控制器，南桥（PCH）整合了PCIe控制器。<br>在PCIe channel上也是有NUMA亲和性的。</p>\n<p>比如：查看网卡em1的NUMA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@local ~]$ numactl --prefer netdev:em1 --show</span><br><span class=\"line\">policy: preferred</span><br><span class=\"line\">preferred node: 0</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p>PCI address 为00:1f.2的SATA控制器，用到了pci:<br>00:1f.2 SATA controller: Intel Corporation C610/X99 series chipset 6-Port SATA Controller [AHCI mode] (rev 05)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --prefer pci:00:1f.2 --show</span><br><span class=\"line\">policy: preferred</span><br><span class=\"line\">preferred node: 0</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前系统numa策略：</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --show</span><br><span class=\"line\">policy: default</span><br><span class=\"line\">preferred node: current</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前numa的节点情况：</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --hardware</span><br><span class=\"line\">available: 2 nodes (0-1)</span><br><span class=\"line\">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46</span><br><span class=\"line\">node 0 size: 196514 MB</span><br><span class=\"line\">node 0 free: 73338 MB</span><br><span class=\"line\">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47</span><br><span class=\"line\">node 1 size: 196608 MB</span><br><span class=\"line\">node 1 free: 117521 MB</span><br><span class=\"line\">node distances:</span><br><span class=\"line\">node   0   1 </span><br><span class=\"line\">  0:  10  21 </span><br><span class=\"line\">  1:  21  10</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"NUMA带来的问题\"><a href=\"#NUMA带来的问题\" class=\"headerlink\" title=\"NUMA带来的问题\"></a>NUMA带来的问题</h1><ul>\n<li><a href=\"http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/\" target=\"_blank\" rel=\"noopener\">MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture</a></li>\n<li><a href=\"http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html\" target=\"_blank\" rel=\"noopener\">PostgreSQL – PostgreSQL, NUMA and zone reclaim mode on linux</a></li>\n<li><a href=\"http://blog.yannickjaquier.com/hpux/non-uniform-memory-access-numa-architecture-with-oracle-database-by-examples.html\" target=\"_blank\" rel=\"noopener\">Oracle – Non-Uniform Memory Access (NUMA) architecture with Oracle database by examples</a></li>\n<li><a href=\"https://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases\" target=\"_blank\" rel=\"noopener\">Java – Optimizing Linux Memory Management for Low-latency / High-throughput Databases</a></li>\n</ul>\n<p>这些问题都是：“因为CPU亲和策略导致的内存分配不平均”及“NUMA Zone Claim内存回收”有关，而和数据库种类并没有直接联系。</p>\n<h2 id=\"数据库与NUMA\"><a href=\"#数据库与NUMA\" class=\"headerlink\" title=\"数据库与NUMA\"></a>数据库与NUMA</h2><p>MySQL在NUMA架构上遇到的典型问题  </p>\n<ul>\n<li><a href=\"https://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/\" target=\"_blank\" rel=\"noopener\">The MySQL “swap insanity” problem and the effects of the NUMA architecture</a></li>\n<li><a href=\"https://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/\" target=\"_blank\" rel=\"noopener\">A brief update on NUMA and MySQL</a></li>\n</ul>\n<blockquote>\n<p>大致分析如下：  </p>\n</blockquote>\n<ul>\n<li>CPU规模因摩尔定律指数级发展，而总线发展缓慢，导致多核CPU通过一条总线共享内存成为瓶颈   </li>\n<li>于是NUMA出现了，CPU平均划分为若干个Chip（不多于4个），每个Chip有自己的内存控制器及内存插槽   </li>\n<li>CPU访问自己Chip上所插的内存时速度快，而访问其他CPU所关联的内存（下文称Remote Access）的速度相较慢三倍左右   </li>\n<li>于是Linux内核默认使用CPU亲和的内存分配策略，使内存页尽可能的和调用线程处在同一个Core/Chip中   </li>\n<li>由于内存页没有动态调整策略，使得大部分内存页都集中在CPU 0上   </li>\n<li>又因为Reclaim默认策略优先淘汰/Swap本Chip上的内存，使得大量有用内存被换出    </li>\n<li>当被换出页被访问时问题就以数据库响应时间飙高甚至阻塞的形式出现了</li>\n</ul>\n<blockquote>\n<p>解决方案：</p>\n</blockquote>\n<ul>\n<li>numactl –interleave=all</li>\n<li>在MySQL进程启动前，使用sysctl -q -w - vm.drop_caches=3清空文件缓存所占用的空间</li>\n<li>Innodb在启动时，就完成整个Innodb_buffer_pool_size的内存分配</li>\n</ul>\n<blockquote>\n<p>不过这种三合一的解决方案只是减少了NUMA内存分配不均，导致的MySQL SWAP问题出现的可能性。如果当系统上其他进程，或者MySQL本身需要大量内存时，Innodb Buffer Pool的那些Page同样还是会被Swap到存储上。于是又在这基础上出现了另外几个进阶方案</p>\n</blockquote>\n<ul>\n<li>配置vm.zone_reclaim_mode = 0使得内存不足时去remote memory分配优先于swap out local page</li>\n<li>echo -15 &gt; /proc//oom_adj调低MySQL进程被OOM_killer强制Kill的可能</li>\n<li>memlock</li>\n<li>对MySQL使用Huge Page（黑魔法，巧用了Huge Page不会被swap的特性）</li>\n</ul>\n<p><strong>为什么Interleave的策略就解决了问题？</strong><br>借用两张 Carrefour性能测试 的结果图，可以看到几乎所有情况下Interleave模式下的程序性能都要比默认的亲和模式要高，有时甚至能高达30%。究其根本原因是Linux服务器的大多数workload分布都是随机的：即每个线程在处理各个外部请求对应的逻辑时，所需要访问的内存是在物理上随机分布的。而Interleave模式就恰恰是针对这种特性将内存page随机打散到各个CPU Core上，使得每个CPU的负载和Remote Access的出现频率都均匀分布。相较NUMA默认的内存分配模式，死板的把内存都优先分配在线程所在Core上的做法，显然普遍适用性要强很多。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-compare1.png\" alt=\"image\"></p>\n<p>也就是说，像MySQL这种外部请求随机性强，各个线程访问内存在地址上平均分布的这种应用，Interleave的内存分配模式相较默认模式可以带来一定程度的性能提升。此外<code>各种论文 中也都通过实验证实，真正造成程序在NUMA系统上性能瓶颈的并不是Remote Acess带来的响应时间损耗，而是内存的不合理分布导致Remote Access将interconnect这个小水管塞满所造成的结果</code>。而Interleave恰好，把这种不合理分布情况下的Remote Access请求平均分布在了各个小水管中。所以这也是Interleave效果奇佳的一个原因。</p>\n<p>那是不是简简单单的配置个Interleave就已经把NUMA的特性和性能发挥到了极致呢？<br>答案是否定的，目前Linux的内存分配机制在NUMA架构的CPU上还有一定的改进空间。<br>例如：Dynamic Memory Loaction, Page Replication。</p>\n<p><strong>Dynamic Memory Relocation</strong><br>MySQL的线程分为两种，用户线程（SQL执行线程）和内部线程（内部功能，如：flush，io，master等）。对于用户线程来说随机性相当的强，但对于内部线程来说他们的行为以及所要访问的内存区域其实是相对固定且可以预测的。如果能对于这把这部分内存集中到这些内存线程所在的core上的时候，就能减少大量Remote Access，潜在的提升例如Page Flush，Purge等功能的吞吐量，甚至可以提高MySQL Crash后Recovery的速度（由于recovery是单线程）。<br>那是否能在Interleave模式下，把那些明显应该聚集在一个CPU上的内存集中在一起呢？很可惜，Dynamic Memory Relocation这种技术目前只停留在理论和实验阶段。我们来看下难点：要做到按照线程的行为动态的调整page在memory的分布，就势必需要做线程和内存的实时监控（profile）。对于Memory Access这种非常异常频繁的底层操作来说增加profile入口的性能损耗是极大的。  </p>\n<p><strong>Page Replication</strong><br>一些动态加载的库，把他们放在任何一个线程所在的CPU都会导致其他CPU上线程的执行效率下降。而这些共享数据往往读写比非常高，如果能把这些数据的副本在每个Memory Zone内都放置一份，理论上会带来较大的性能提升，同时也减少在interconnect上出现的瓶颈。由于缺乏硬件级别（如MESI协议的硬件支持）和操作系统原生级别的支持，Page Replication在数据一致性上维护的成本显得比他带来的提升更多。因此这种尝试也仅仅停留在理论阶段。当然，如果能得到底层的大力支持，相信这个方案还是有极大的实际价值的。</p>\n<h2 id=\"关闭NUMA特性的方法\"><a href=\"#关闭NUMA特性的方法\" class=\"headerlink\" title=\"关闭NUMA特性的方法\"></a>关闭NUMA特性的方法</h2><ul>\n<li>硬件层，在BIOS中设置关闭</li>\n<li>OS内核，启动时设置numa=off</li>\n<li>进程，numactl 进程启动时。numactl –interleave=all</li>\n</ul>\n<h2 id=\"NUMA取舍\"><a href=\"#NUMA取舍\" class=\"headerlink\" title=\"NUMA取舍\"></a>NUMA取舍</h2><p><strong>指定numa</strong><br>在运行程序的时候使用numactl -m和-physcpubind就能制定将这个程序运行在哪个cpu和哪个memory中:<br><em><code>numactl –physcpubind=2,6 ./program</code></em></p>\n<p><a href=\"http://www.searchtb.com/2012/12/%E7%8E%A9%E8%BD%ACcpu-topology.html\" target=\"_blank\" rel=\"noopener\">玩转cpu-topology</a>(站点已经无法访问) 的测试中显示当程序只使用一个node资源和使用多个node资源的比较表（差不多是38s与28s的差距）。所以限定程序在numa node中运行是有实际意义的。</p>\n<p><strong>指定numa带来的问题</strong><br><a href=\"http://huoding.com/2012/11/08/198\" target=\"_blank\" rel=\"noopener\">SWAP的罪与罚</a> 文章就说到了一个numa的陷阱的问题。现象是当你的服务器还有内存的时候，发现它已经在开始使用swap了，甚至已经导致机器出现停滞的现象。如果一个进程限制它只能使用自己的numa节点的内存，那么当自身numa node内存使用光之后，就不会去使用其他numa node的内存了，会开始使用swap，甚至更糟的情况，机器没有设置swap的时候，可能会直接死机！<br>所以你可以使用<code>numactl --interleave=all</code>来取消numa node的限制。</p>\n<p>根据具体业务决定NUMA的使用:  </p>\n<ul>\n<li>如果你的程序是会占用大规模内存的，你大多应该选择关闭numa node的限制。因为这个时候你的程序很有几率会碰到numa陷阱。</li>\n<li>如果你的程序并不占用大内存，而是要求更快的程序运行时间。你大多应该选择限制只访问本numa node的方法来进行处理。</li>\n</ul>\n<hr>\n<h4 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读:\"></a>推荐阅读:</h4><ul>\n<li><a href=\"https://docs.google.com/document/u/0/d/1d3iI2QWURgDIsSR6G2275vMeQ_X7w-qxM2Vp7iGwwuM/pub\" target=\"_blank\" rel=\"noopener\">NUMA-aware scheduler for Go</a></li>\n<li><a href=\"http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html\" target=\"_blank\" rel=\"noopener\">PostgreSQL, NUMA and zone reclaim mode on linux</a></li>\n<li><a href=\"https://www.slideshare.net/slidunder/numa-and-java-databases\" target=\"_blank\" rel=\"noopener\">NUMA and Java Databases</a></li>\n<li><a href=\"http://mikaelronstrom.blogspot.com/2010/12/mysql-server-and-numa-architectures.html\" target=\"_blank\" rel=\"noopener\">MySQL Server and NUMA architectures</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>NUMA 概念、历史、问题","more":"</p>\n</blockquote>\n<h1 id=\"NUMA-概念\"><a href=\"#NUMA-概念\" class=\"headerlink\" title=\"NUMA 概念\"></a>NUMA 概念</h1><p>NUMA的几个概念（Node，socket，core，thread）</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cputhreads.jpg\" alt=\"cputhreads\"></p>\n<ul>\n<li>socket就是主板上的CPU插槽;   </li>\n<li>core就是socket里独立的一组程序执行的硬件单元，比如寄存器，计算单元等;    </li>\n<li>thread：就是超线程hyperthread的概念，逻辑的执行单元，独立的执行上下文，但是共享core内的寄存器和计算单元。   </li>\n</ul>\n<p>NUMA体系结构中多了Node的概念，这个概念其实是用来解决core的分组的问题，具体参见下图来理解（图中的OS CPU可以理解thread，那么core就没有在图中画出），从图中可以看出每个Socket里有两个node，共有4个socket，每个socket 2个node，每个node中有8个thread，总共<code>4（Socket）× 2（Node）× 8 （4core × 2 Thread） = 64个thread</code>。</p>\n<p>另外每个node有自己的内部CPU，总线和内存，同时还可以访问其他node内的内存，NUMA的最大的优势就是可以方便的增加CPU的数量，因为Node内有自己内部总线，所以增加CPU数量可以通过增加Node的数目来实现，如果单纯的增加CPU的数量，会对总线造成很大的压力，所以UMA结构不可能支持很多的核。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-cpus.png\" alt=\"numacpus\"><br> 《NUMA Best Practices for Dell PowerEdge 12th Generation Servers》</p>\n<p>根据上面提到的，由于每个node内部有自己的CPU总线和内存，所以如果一个虚拟机的vCPU跨不同的Node的话，就会导致一个node中的CPU去访问另外一个node中的内存的情况，这就导致内存访问延迟的增加。在有些特殊场景下，比如NFV(Network Function Virtualization)环境中，对性能有比较高的要求，就非常需要同一个虚拟机的vCPU尽量被分配到同一个Node中的pCPU上，所以在OpenStack的Kilo版本中增加了基于NUMA感知的虚拟机调度的特性。</p>\n<h5 id=\"查看机器的NUMA拓扑结构\"><a href=\"#查看机器的NUMA拓扑结构\" class=\"headerlink\" title=\"查看机器的NUMA拓扑结构\"></a>查看机器的NUMA拓扑结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ lscpu</span><br><span class=\"line\">Architecture:          x86_64</span><br><span class=\"line\">CPU op-mode(s):        32-bit, 64-bit</span><br><span class=\"line\">Byte Order:            Little Endian</span><br><span class=\"line\">CPU(s):                48\t\t\t\t//  48个逻辑CPU（threads）</span><br><span class=\"line\">On-line CPU(s) list:   0-47</span><br><span class=\"line\">Thread(s) per core:    2\t\t\t\t// 每个core有2个threads</span><br><span class=\"line\">Core(s) per socket:    12\t\t\t\t// 每个socket有12个cores</span><br><span class=\"line\">Socket(s):             2\t\t\t\t\t// 共总有2个sockets</span><br><span class=\"line\">NUMA node(s):          2\t\t\t\t// 2个NUMA nodes</span><br><span class=\"line\">Vendor ID:             GenuineIntel</span><br><span class=\"line\">CPU family:            6</span><br><span class=\"line\">Model:                 63</span><br><span class=\"line\">Model name:            Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz</span><br><span class=\"line\">Stepping:              2</span><br><span class=\"line\">CPU MHz:               2500.089</span><br><span class=\"line\">BogoMIPS:              4999.27</span><br><span class=\"line\">Virtualization:        VT-x</span><br><span class=\"line\">L1d cache:             32K</span><br><span class=\"line\">L1i cache:             32K</span><br><span class=\"line\">L2 cache:              256K</span><br><span class=\"line\">L3 cache:              30720K</span><br><span class=\"line\">NUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46</span><br><span class=\"line\">NUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看出当前机器有2个sockets，每个sockets包含1个numa node，每个numa node中有12个cores，每个cores包含2个thread，所以总的threads数量=2x1x12x2=48.</p>\n</blockquote>\n<hr>\n<h1 id=\"NUMA-历史\"><a href=\"#NUMA-历史\" class=\"headerlink\" title=\"NUMA 历史\"></a>NUMA 历史</h1><p>在若干年前，对于x86架构的计算机，那时的内存控制器还没有整合进CPU，所有内存的访问都需要通过北桥芯片来完成。此时的内存访问如下图所示，被称为UMA（uniform memory access, 一致性内存访问）。<br>这样的访问对于软件层面来说非常容易实现：总线模型保证了所有的内存访问是一致的，不必考虑由不同内存地址之前的差异。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus123.png\" alt=\"cpubus123\"></p>\n<p>之后的x86平台经历了一场从“拼频率”到“拼核心数”的转变，越来越多的核心被尽可能地塞进了同一块芯片上，各个核心对于内存带宽的争抢访问成为了瓶颈；此时软件、OS方面对于SMP多核心CPU的支持也愈发成熟；再加上各种商业上的考量，x86平台也搞了NUMA（Non-uniform memory access, 非一致性内存访问）。</p>\n<p>NUMA中，虽然内存直接attach在CPU上，但是由于内存被平均分配在了各个die(核心)上。只有当CPU访问自身直接attach内存对应的物理地址时，才会有较短的响应时间（后称Local Access）。而如果需要访问其他CPU attach的内存的数据时，就需要通过inter-connect通道访问，响应时间就相比之前变慢了（后称Remote Access）。所以NUMA（Non-Uniform Memory Access）就此得名</p>\n<p>在这种架构之下，每个Socket都会有一个独立的内存控制器IMC（integrated memory controllers, 集成内存控制器），分属于不同的socket之内的IMC之间通过QPI link通讯。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc123.png\" alt=\"cpubus-imc123\"></p>\n<p>然后就是进一步的架构演进，由于每个socket上都会有多个core进行内存访问，这就会在每个core的内部出现一个类似最早SMP架构相似的内存访问总线，这个总线被称为IMC bus。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpubus-imc124.png\" alt=\"cpubus-imc124\"></p>\n<p>于是，很明显的，在这种架构之下，两个socket各自管理1/2的内存插槽，如果要访问不属于本socket的内存则必须通过QPI link。也就是说内存的访问出现了本地/远程（local/remote）的概念，内存的延时是会有显著的区别的。</p>\n<p>以Xeon 2699 v4系列CPU的标准来看，两个Socket之之间通过各自的一条9.6GT/s的QPI link互访。而每个Socket事实上有2个内存控制器。双通道的缘故，每个控制器又有两个内存通道（channel），每个通道最多支持3根内存条（DIMM）。理论上最大单socket支持76.8GB/s的内存带宽，而两个QPI link，每个QPI link有9.6GT/s的速率（~57.6GB/s）事实上QPI link已经出现瓶颈了。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/cpu-intel-xeon-e5-2600.png\" alt=\"image\"></p>\n<p>核心数还是源源不断的增加，Skylake桌面版本的i7 EE已经有了18个core，Skylake Xeon 28个Core(2017)。为了塞进更多的core，原本核心之间类似环网的设计变成了复杂的路由。<br>由于这种架构上的变化，导致内存的访问变得更加复杂。两个IMC也有了local/remote的区别，在保证兼容性的前提和性能导向的纠结中，系统允许用户进行更为灵活的内存访问架构划分。于是就有了“NUMA之上的NUMA”这种妖异的设定（SNC）。</p>\n<hr>\n<h1 id=\"性能提升\"><a href=\"#性能提升\" class=\"headerlink\" title=\"性能提升\"></a>性能提升</h1><p>内核调度和操作方式  </p>\n<ul>\n<li>在一个启用了NUMA支持的Linux中，Kernel不会将任务内存从一个NUMA node搬迁到另一个NUMA node。   </li>\n<li>一个进程一旦被启用，它所在的NUMA node就不会被迁移，为了尽可能的优化性能，在正常的调度之中，CPU的core也会尽可能的使用可以local访问的本地core，在进程的整个生命周期之中，NUMA node保持不变。   </li>\n<li>一旦当某个NUMA node的负载超出了另一个node一个阈值（默认25%），则认为需要在此node上减少负载，不同的NUMA结构和不同的负载状况，系统见给予一个延时任务的迁移——类似于漏杯算法。在这种情况下将会产生内存的remote访问。</li>\n<li>NUMA node之间有不同的拓扑结构，各个 node 之间的访问会有一个距离（node distances）的概念，<br>如numactl -H命令的结果有这样的描述：   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl -H</span><br><span class=\"line\">available: 2 nodes (0-1)</span><br><span class=\"line\">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46</span><br><span class=\"line\">node 0 size: 196514 MB</span><br><span class=\"line\">node 0 free: 73363 MB</span><br><span class=\"line\">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47</span><br><span class=\"line\">node 1 size: 196608 MB</span><br><span class=\"line\">node 1 free: 117527 MB</span><br><span class=\"line\">node distances:</span><br><span class=\"line\">node   0   1 </span><br><span class=\"line\">  0:  10  21 </span><br><span class=\"line\">  1:  21  10</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：0 node 到0 node之间距离为10，是最近的距离。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-sample1.png\" alt=\"image\"></p>\n<p>上图记录了某个Benchmark工具，在开启/关闭NUMA功能时QPI带宽消耗的情况。很明显的是，在开启了NUMA支持以后，QPI的带宽消耗有了两个数量级以上的下降，性能也有了显著的提升！</p>\n<p>通常情况下，用户可以通过numactl来进行NUMA访问策略的手工配置，cgroup中cpuset.mems也可以达到指定NUMA node的作用。  </p>\n<p><strong>Numa内存分配策略有四种:</strong>  </p>\n<ul>\n<li>缺省default:总是在本地节点分配(当前进程运行的节点上)。  </li>\n<li>绑定bind:强制分配到指定节点上。  </li>\n<li>交叉interleavel:在所有节点或者指定节点上交叉分配内存。  </li>\n<li>优先preferred:在指定节点上分配，失败则在其他节点上分配  </li>\n</ul>\n<p><strong>以numactl命令为例，它有如下策略：</strong> </p>\n<ul>\n<li>–interleave=nodes //允许进程在多个node之间交替访问</li>\n<li>–membind=nodes //将内存固定在某个node上，CPU则选择对应的core。</li>\n<li>–cpunodebind=nodes //与membind相反，将CPU固定在某（几）个core上，内存则限制在对应的NUMA node之上。</li>\n<li>–physcpubind=cpus //与cpunodebind类似，不同的是物理core。</li>\n<li>–localalloc //本地配置</li>\n<li>–preferred=node //按照推荐配置</li>\n</ul>\n<p>对于某些大内存访问的应用，比如Mongodb，将NUMA的访问策略制定为interleave=all则意味着整个进程的内存是均匀分布在所有的node之上，进程可以以最快的方式访问本地内存。<br>北桥有一个功能就是PCI/PCIe控制器，南桥（PCH）整合了PCIe控制器。<br>在PCIe channel上也是有NUMA亲和性的。</p>\n<p>比如：查看网卡em1的NUMA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@local ~]$ numactl --prefer netdev:em1 --show</span><br><span class=\"line\">policy: preferred</span><br><span class=\"line\">preferred node: 0</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p>PCI address 为00:1f.2的SATA控制器，用到了pci:<br>00:1f.2 SATA controller: Intel Corporation C610/X99 series chipset 6-Port SATA Controller [AHCI mode] (rev 05)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --prefer pci:00:1f.2 --show</span><br><span class=\"line\">policy: preferred</span><br><span class=\"line\">preferred node: 0</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前系统numa策略：</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --show</span><br><span class=\"line\">policy: default</span><br><span class=\"line\">preferred node: current</span><br><span class=\"line\">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 </span><br><span class=\"line\">cpubind: 0 1 </span><br><span class=\"line\">nodebind: 0 1 </span><br><span class=\"line\">membind: 0 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看当前numa的节点情况：</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@local ~]$ numactl --hardware</span><br><span class=\"line\">available: 2 nodes (0-1)</span><br><span class=\"line\">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46</span><br><span class=\"line\">node 0 size: 196514 MB</span><br><span class=\"line\">node 0 free: 73338 MB</span><br><span class=\"line\">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47</span><br><span class=\"line\">node 1 size: 196608 MB</span><br><span class=\"line\">node 1 free: 117521 MB</span><br><span class=\"line\">node distances:</span><br><span class=\"line\">node   0   1 </span><br><span class=\"line\">  0:  10  21 </span><br><span class=\"line\">  1:  21  10</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"NUMA带来的问题\"><a href=\"#NUMA带来的问题\" class=\"headerlink\" title=\"NUMA带来的问题\"></a>NUMA带来的问题</h1><ul>\n<li><a href=\"http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/\" target=\"_blank\" rel=\"noopener\">MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture</a></li>\n<li><a href=\"http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html\" target=\"_blank\" rel=\"noopener\">PostgreSQL – PostgreSQL, NUMA and zone reclaim mode on linux</a></li>\n<li><a href=\"http://blog.yannickjaquier.com/hpux/non-uniform-memory-access-numa-architecture-with-oracle-database-by-examples.html\" target=\"_blank\" rel=\"noopener\">Oracle – Non-Uniform Memory Access (NUMA) architecture with Oracle database by examples</a></li>\n<li><a href=\"https://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases\" target=\"_blank\" rel=\"noopener\">Java – Optimizing Linux Memory Management for Low-latency / High-throughput Databases</a></li>\n</ul>\n<p>这些问题都是：“因为CPU亲和策略导致的内存分配不平均”及“NUMA Zone Claim内存回收”有关，而和数据库种类并没有直接联系。</p>\n<h2 id=\"数据库与NUMA\"><a href=\"#数据库与NUMA\" class=\"headerlink\" title=\"数据库与NUMA\"></a>数据库与NUMA</h2><p>MySQL在NUMA架构上遇到的典型问题  </p>\n<ul>\n<li><a href=\"https://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/\" target=\"_blank\" rel=\"noopener\">The MySQL “swap insanity” problem and the effects of the NUMA architecture</a></li>\n<li><a href=\"https://blog.jcole.us/2012/04/16/a-brief-update-on-numa-and-mysql/\" target=\"_blank\" rel=\"noopener\">A brief update on NUMA and MySQL</a></li>\n</ul>\n<blockquote>\n<p>大致分析如下：  </p>\n</blockquote>\n<ul>\n<li>CPU规模因摩尔定律指数级发展，而总线发展缓慢，导致多核CPU通过一条总线共享内存成为瓶颈   </li>\n<li>于是NUMA出现了，CPU平均划分为若干个Chip（不多于4个），每个Chip有自己的内存控制器及内存插槽   </li>\n<li>CPU访问自己Chip上所插的内存时速度快，而访问其他CPU所关联的内存（下文称Remote Access）的速度相较慢三倍左右   </li>\n<li>于是Linux内核默认使用CPU亲和的内存分配策略，使内存页尽可能的和调用线程处在同一个Core/Chip中   </li>\n<li>由于内存页没有动态调整策略，使得大部分内存页都集中在CPU 0上   </li>\n<li>又因为Reclaim默认策略优先淘汰/Swap本Chip上的内存，使得大量有用内存被换出    </li>\n<li>当被换出页被访问时问题就以数据库响应时间飙高甚至阻塞的形式出现了</li>\n</ul>\n<blockquote>\n<p>解决方案：</p>\n</blockquote>\n<ul>\n<li>numactl –interleave=all</li>\n<li>在MySQL进程启动前，使用sysctl -q -w - vm.drop_caches=3清空文件缓存所占用的空间</li>\n<li>Innodb在启动时，就完成整个Innodb_buffer_pool_size的内存分配</li>\n</ul>\n<blockquote>\n<p>不过这种三合一的解决方案只是减少了NUMA内存分配不均，导致的MySQL SWAP问题出现的可能性。如果当系统上其他进程，或者MySQL本身需要大量内存时，Innodb Buffer Pool的那些Page同样还是会被Swap到存储上。于是又在这基础上出现了另外几个进阶方案</p>\n</blockquote>\n<ul>\n<li>配置vm.zone_reclaim_mode = 0使得内存不足时去remote memory分配优先于swap out local page</li>\n<li>echo -15 &gt; /proc//oom_adj调低MySQL进程被OOM_killer强制Kill的可能</li>\n<li>memlock</li>\n<li>对MySQL使用Huge Page（黑魔法，巧用了Huge Page不会被swap的特性）</li>\n</ul>\n<p><strong>为什么Interleave的策略就解决了问题？</strong><br>借用两张 Carrefour性能测试 的结果图，可以看到几乎所有情况下Interleave模式下的程序性能都要比默认的亲和模式要高，有时甚至能高达30%。究其根本原因是Linux服务器的大多数workload分布都是随机的：即每个线程在处理各个外部请求对应的逻辑时，所需要访问的内存是在物理上随机分布的。而Interleave模式就恰恰是针对这种特性将内存page随机打散到各个CPU Core上，使得每个CPU的负载和Remote Access的出现频率都均匀分布。相较NUMA默认的内存分配模式，死板的把内存都优先分配在线程所在Core上的做法，显然普遍适用性要强很多。</p>\n<p><img src=\"https://raw.githubusercontent.com/ikenchina/img1/master/1/cpu/numa/numa-compare1.png\" alt=\"image\"></p>\n<p>也就是说，像MySQL这种外部请求随机性强，各个线程访问内存在地址上平均分布的这种应用，Interleave的内存分配模式相较默认模式可以带来一定程度的性能提升。此外<code>各种论文 中也都通过实验证实，真正造成程序在NUMA系统上性能瓶颈的并不是Remote Acess带来的响应时间损耗，而是内存的不合理分布导致Remote Access将interconnect这个小水管塞满所造成的结果</code>。而Interleave恰好，把这种不合理分布情况下的Remote Access请求平均分布在了各个小水管中。所以这也是Interleave效果奇佳的一个原因。</p>\n<p>那是不是简简单单的配置个Interleave就已经把NUMA的特性和性能发挥到了极致呢？<br>答案是否定的，目前Linux的内存分配机制在NUMA架构的CPU上还有一定的改进空间。<br>例如：Dynamic Memory Loaction, Page Replication。</p>\n<p><strong>Dynamic Memory Relocation</strong><br>MySQL的线程分为两种，用户线程（SQL执行线程）和内部线程（内部功能，如：flush，io，master等）。对于用户线程来说随机性相当的强，但对于内部线程来说他们的行为以及所要访问的内存区域其实是相对固定且可以预测的。如果能对于这把这部分内存集中到这些内存线程所在的core上的时候，就能减少大量Remote Access，潜在的提升例如Page Flush，Purge等功能的吞吐量，甚至可以提高MySQL Crash后Recovery的速度（由于recovery是单线程）。<br>那是否能在Interleave模式下，把那些明显应该聚集在一个CPU上的内存集中在一起呢？很可惜，Dynamic Memory Relocation这种技术目前只停留在理论和实验阶段。我们来看下难点：要做到按照线程的行为动态的调整page在memory的分布，就势必需要做线程和内存的实时监控（profile）。对于Memory Access这种非常异常频繁的底层操作来说增加profile入口的性能损耗是极大的。  </p>\n<p><strong>Page Replication</strong><br>一些动态加载的库，把他们放在任何一个线程所在的CPU都会导致其他CPU上线程的执行效率下降。而这些共享数据往往读写比非常高，如果能把这些数据的副本在每个Memory Zone内都放置一份，理论上会带来较大的性能提升，同时也减少在interconnect上出现的瓶颈。由于缺乏硬件级别（如MESI协议的硬件支持）和操作系统原生级别的支持，Page Replication在数据一致性上维护的成本显得比他带来的提升更多。因此这种尝试也仅仅停留在理论阶段。当然，如果能得到底层的大力支持，相信这个方案还是有极大的实际价值的。</p>\n<h2 id=\"关闭NUMA特性的方法\"><a href=\"#关闭NUMA特性的方法\" class=\"headerlink\" title=\"关闭NUMA特性的方法\"></a>关闭NUMA特性的方法</h2><ul>\n<li>硬件层，在BIOS中设置关闭</li>\n<li>OS内核，启动时设置numa=off</li>\n<li>进程，numactl 进程启动时。numactl –interleave=all</li>\n</ul>\n<h2 id=\"NUMA取舍\"><a href=\"#NUMA取舍\" class=\"headerlink\" title=\"NUMA取舍\"></a>NUMA取舍</h2><p><strong>指定numa</strong><br>在运行程序的时候使用numactl -m和-physcpubind就能制定将这个程序运行在哪个cpu和哪个memory中:<br><em><code>numactl –physcpubind=2,6 ./program</code></em></p>\n<p><a href=\"http://www.searchtb.com/2012/12/%E7%8E%A9%E8%BD%ACcpu-topology.html\" target=\"_blank\" rel=\"noopener\">玩转cpu-topology</a>(站点已经无法访问) 的测试中显示当程序只使用一个node资源和使用多个node资源的比较表（差不多是38s与28s的差距）。所以限定程序在numa node中运行是有实际意义的。</p>\n<p><strong>指定numa带来的问题</strong><br><a href=\"http://huoding.com/2012/11/08/198\" target=\"_blank\" rel=\"noopener\">SWAP的罪与罚</a> 文章就说到了一个numa的陷阱的问题。现象是当你的服务器还有内存的时候，发现它已经在开始使用swap了，甚至已经导致机器出现停滞的现象。如果一个进程限制它只能使用自己的numa节点的内存，那么当自身numa node内存使用光之后，就不会去使用其他numa node的内存了，会开始使用swap，甚至更糟的情况，机器没有设置swap的时候，可能会直接死机！<br>所以你可以使用<code>numactl --interleave=all</code>来取消numa node的限制。</p>\n<p>根据具体业务决定NUMA的使用:  </p>\n<ul>\n<li>如果你的程序是会占用大规模内存的，你大多应该选择关闭numa node的限制。因为这个时候你的程序很有几率会碰到numa陷阱。</li>\n<li>如果你的程序并不占用大内存，而是要求更快的程序运行时间。你大多应该选择限制只访问本numa node的方法来进行处理。</li>\n</ul>\n<hr>\n<h4 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读:\"></a>推荐阅读:</h4><ul>\n<li><a href=\"https://docs.google.com/document/u/0/d/1d3iI2QWURgDIsSR6G2275vMeQ_X7w-qxM2Vp7iGwwuM/pub\" target=\"_blank\" rel=\"noopener\">NUMA-aware scheduler for Go</a></li>\n<li><a href=\"http://frosty-postgres.blogspot.com/2012/08/postgresql-numa-and-zone-reclaim-mode.html\" target=\"_blank\" rel=\"noopener\">PostgreSQL, NUMA and zone reclaim mode on linux</a></li>\n<li><a href=\"https://www.slideshare.net/slidunder/numa-and-java-databases\" target=\"_blank\" rel=\"noopener\">NUMA and Java Databases</a></li>\n<li><a href=\"http://mikaelronstrom.blogspot.com/2010/12/mysql-server-and-numa-architectures.html\" target=\"_blank\" rel=\"noopener\">MySQL Server and NUMA architectures</a></li>\n</ul>"},{"layout":"post","title":"What Is the Most Important Thing in Life？","date":"2017-12-31T16:00:00.000Z","_content":"\n> the most important thing in life.<!-- more -->  \n\n\n# the most important thing in life.\n- Keeping healthy. It is health that is real wealth and not pieces of gold and silver.\n- Everybody needs somebody, be that a friend, a partner, or someone you’re related to.\n- Making someone’s day full of sunshine even when yours is not.\n- Money should not be a priority.\n- The beautiful thing about learning is that nobody can take it away from you.\n- Know who you are.\n- Don’t be a victim BUT instead be a hero in your life.\n- Don't give up. A winner is just a loser who tried on more time.\n- Always make time for gratitude.","source":"_posts/which-most-important.md","raw":"---\nlayout: post\ncategory: \"2018\"\ntitle:  \"What Is the Most Important Thing in Life？\"\ntags: [阅读,人生]\ndate: 2018-01-01\n---\n\n> the most important thing in life.<!-- more -->  \n\n\n# the most important thing in life.\n- Keeping healthy. It is health that is real wealth and not pieces of gold and silver.\n- Everybody needs somebody, be that a friend, a partner, or someone you’re related to.\n- Making someone’s day full of sunshine even when yours is not.\n- Money should not be a priority.\n- The beautiful thing about learning is that nobody can take it away from you.\n- Know who you are.\n- Don’t be a victim BUT instead be a hero in your life.\n- Don't give up. A winner is just a loser who tried on more time.\n- Always make time for gratitude.","slug":"which-most-important","published":1,"updated":"2020-04-15T03:28:41.896Z","comments":1,"photos":[],"link":"","_id":"ck9115hpq0008ppfc537aftlj","content":"<blockquote>\n<p>the most important thing in life.<a id=\"more\"></a>  </p>\n</blockquote>\n<h1 id=\"the-most-important-thing-in-life\"><a href=\"#the-most-important-thing-in-life\" class=\"headerlink\" title=\"the most important thing in life.\"></a>the most important thing in life.</h1><ul>\n<li>Keeping healthy. It is health that is real wealth and not pieces of gold and silver.</li>\n<li>Everybody needs somebody, be that a friend, a partner, or someone you’re related to.</li>\n<li>Making someone’s day full of sunshine even when yours is not.</li>\n<li>Money should not be a priority.</li>\n<li>The beautiful thing about learning is that nobody can take it away from you.</li>\n<li>Know who you are.</li>\n<li>Don’t be a victim BUT instead be a hero in your life.</li>\n<li>Don’t give up. A winner is just a loser who tried on more time.</li>\n<li>Always make time for gratitude.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>the most important thing in life.","more":"</p>\n</blockquote>\n<h1 id=\"the-most-important-thing-in-life\"><a href=\"#the-most-important-thing-in-life\" class=\"headerlink\" title=\"the most important thing in life.\"></a>the most important thing in life.</h1><ul>\n<li>Keeping healthy. It is health that is real wealth and not pieces of gold and silver.</li>\n<li>Everybody needs somebody, be that a friend, a partner, or someone you’re related to.</li>\n<li>Making someone’s day full of sunshine even when yours is not.</li>\n<li>Money should not be a priority.</li>\n<li>The beautiful thing about learning is that nobody can take it away from you.</li>\n<li>Know who you are.</li>\n<li>Don’t be a victim BUT instead be a hero in your life.</li>\n<li>Don’t give up. A winner is just a loser who tried on more time.</li>\n<li>Always make time for gratitude.</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9115hpf0000ppfcvq9z2p4f","category_id":"ck9115hpm0004ppfcayy0bwtp","_id":"ck9115hps000cppfcw6mhpz26"},{"post_id":"ck9115hpk0002ppfcvrvp01pb","category_id":"ck9115hpr0009ppfchvycnpvv","_id":"ck9115hpu000gppfcwokpek4j"},{"post_id":"ck9115hpo0006ppfcd7gc8851","category_id":"ck9115hpr0009ppfchvycnpvv","_id":"ck9115hpv000jppfcxiv5vpwz"},{"post_id":"ck9115hpq0008ppfc537aftlj","category_id":"ck9115hpr0009ppfchvycnpvv","_id":"ck9115hpw000nppfcjrtp7fpz"}],"PostTag":[{"post_id":"ck9115hpf0000ppfcvq9z2p4f","tag_id":"ck9115hpo0005ppfcv0et7y4r","_id":"ck9115hps000bppfcsr17z7no"},{"post_id":"ck9115hpk0002ppfcvrvp01pb","tag_id":"ck9115hpr000appfcx9m3c1be","_id":"ck9115hpv000ippfcf4fznafr"},{"post_id":"ck9115hpk0002ppfcvrvp01pb","tag_id":"ck9115hps000eppfcgcw38i2l","_id":"ck9115hpv000kppfckhit8p1f"},{"post_id":"ck9115hpo0006ppfcd7gc8851","tag_id":"ck9115hpv000hppfcnwj2pg89","_id":"ck9115hpw000mppfc28szyei9"},{"post_id":"ck9115hpq0008ppfc537aftlj","tag_id":"ck9115hpv000lppfc9muck793","_id":"ck9115hpw000pppfcny17e2xh"},{"post_id":"ck9115hpq0008ppfc537aftlj","tag_id":"ck9115hpw000oppfcc225eczu","_id":"ck9115hpw000qppfclmqk1azr"}],"Tag":[{"name":"分布式","_id":"ck9115hpo0005ppfcv0et7y4r"},{"name":"rpc","_id":"ck9115hpr000appfcx9m3c1be"},{"name":"grpc","_id":"ck9115hps000eppfcgcw38i2l"},{"name":"cpu","_id":"ck9115hpv000hppfcnwj2pg89"},{"name":"阅读","_id":"ck9115hpv000lppfc9muck793"},{"name":"人生","_id":"ck9115hpw000oppfcc225eczu"}]}}